/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package android.support.fragment;

public final class R {
  public static final class attr {
    /**
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int font=0x00000000;
    /**
     * The authority of the Font Provider to be used for the request.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderAuthority=0x00000000;
    /**
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static int fontProviderCerts=0x00000000;
    /**
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     */
    public static int fontProviderFetchStrategy=0x00000000;
    /**
     * The length of the timeout during fetching.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     */
    public static int fontProviderFetchTimeout=0x00000000;
    /**
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderPackage=0x00000000;
    /**
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static int fontProviderQuery=0x00000000;
    /**
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static int fontStyle=0x00000000;
    /**
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static int fontWeight=0x00000000;
  }
  public static final class bool {
    public static int abc_action_bar_embed_tabs=0x00000000;
    /**
     * If true, thumbnails will be forcibly set to ScaleType.CENTER
     */
    public static int force_thumbnail_no_scaling=0x00000000;
  }
  public static final class color {
    public static int notification_action_color_filter=0x00000000;
    public static int notification_icon_bg_color=0x00000000;
    public static int photo_crop_dim_color=0x00000000;
    public static int photo_crop_highlight_color=0x00000000;
    public static int photo_status_bar_black=0x00000000;
    /**
     * 12% black (foreground)
     */
    public static int ripple_material_light=0x00000000;
    /**
     * 54% black
     */
    public static int secondary_text_default_material_light=0x00000000;
    /**
     * Photo Viewer Colors
     */
    public static int solid_black=0x00000000;
  }
  public static final class dimen {
    public static int compat_button_inset_horizontal_material=0x00000000;
    public static int compat_button_inset_vertical_material=0x00000000;
    public static int compat_button_padding_horizontal_material=0x00000000;
    /**
     * Default inner padding within buttons
     */
    public static int compat_button_padding_vertical_material=0x00000000;
    /**
     * Default rounded corner for controls
     */
    public static int compat_control_corner_material=0x00000000;
    /**
     * The size of the action icons
     */
    public static int notification_action_icon_size=0x00000000;
    /**
     * Size of notification action text
     */
    public static int notification_action_text_size=0x00000000;
    /**
     * the side margin of the big notification circle
     */
    public static int notification_big_circle_margin=0x00000000;
    /**
     * the margin at the beginning of the notification content
     * the margin at the beginning of the notification content
     */
    public static int notification_content_margin_start=0x00000000;
    /**
     * The width of the big icons in notifications.
     */
    public static int notification_large_icon_height=0x00000000;
    /**
     * The width of the big icons in notifications.
     */
    public static int notification_large_icon_width=0x00000000;
    /**
     * the top padding of the notification content
     * the top padding of the notification content
     */
    public static int notification_main_column_padding_top=0x00000000;
    /**
     * image margin on the large icon in the narrow media template
     * image margin on the large icon in the narrow media template
     */
    public static int notification_media_narrow_margin=0x00000000;
    /**
     * the size of the small icon on the right of the largeIcon
     */
    public static int notification_right_icon_size=0x00000000;
    /**
     * the paddingtop on the right side of the notification (for time etc.)
     * the paddingtop on the right side of the notification (for time etc.)
     */
    public static int notification_right_side_padding_top=0x00000000;
    /**
     * the padding of the small icon to the circle
     */
    public static int notification_small_icon_background_padding=0x00000000;
    /**
     * small icon size when placed as large icon
     */
    public static int notification_small_icon_size_as_large=0x00000000;
    /**
     * Size of smaller notification text (see TextAppearance.StatusBar.EventContent.Line2, Info,
     * Time)
     */
    public static int notification_subtext_size=0x00000000;
    /**
     * Top padding for notifications in the standard layout.
     */
    public static int notification_top_pad=0x00000000;
    /**
     * Top padding for notification when text is large
     */
    public static int notification_top_pad_large_text=0x00000000;
    public static int photo_crop_stroke_width=0x00000000;
    public static int photo_crop_width=0x00000000;
    public static int photo_page_margin=0x00000000;
    public static int photo_preview_size=0x00000000;
    public static int retry_button_size=0x00000000;
  }
  public static final class drawable {
    public static int actionbar_translucent=0x00000000;
    public static int default_image=0x00000000;
    public static int ic_menu_refresh_holo_dark=0x00000000;
    public static int notification_action_background=0x00000000;
    public static int notification_bg=0x00000000;
    public static int notification_bg_low=0x00000000;
    public static int notification_bg_low_normal=0x00000000;
    public static int notification_bg_low_pressed=0x00000000;
    public static int notification_bg_normal=0x00000000;
    public static int notification_bg_normal_pressed=0x00000000;
    public static int notification_icon_background=0x00000000;
    public static int notification_template_icon_bg=0x00000000;
    public static int notification_template_icon_low_bg=0x00000000;
    public static int notification_tile_bg=0x00000000;
    public static int notify_panel_notification_icon_bg=0x00000000;
  }
  public static final class id {
    public static int action_container=0x00000000;
    public static int action_divider=0x00000000;
    public static int action_image=0x00000000;
    public static int action_text=0x00000000;
    public static int actions=0x00000000;
    public static int async=0x00000000;
    public static int blocking=0x00000000;
    public static int chronometer=0x00000000;
    public static int determinate_progress=0x00000000;
    public static int empty_text=0x00000000;
    public static int forever=0x00000000;
    public static int icon=0x00000000;
    public static int icon_group=0x00000000;
    public static int indeterminate_progress=0x00000000;
    public static int info=0x00000000;
    public static int italic=0x00000000;
    public static int line1=0x00000000;
    public static int line3=0x00000000;
    public static int normal=0x00000000;
    public static int notification_background=0x00000000;
    public static int notification_main_column=0x00000000;
    public static int notification_main_column_container=0x00000000;
    public static int photo_activity_background=0x00000000;
    public static int photo_activity_root_view=0x00000000;
    public static int photo_activity_temporary_image=0x00000000;
    public static int photo_preview=0x00000000;
    public static int photo_preview_image=0x00000000;
    public static int photo_view=0x00000000;
    public static int photo_view_pager=0x00000000;
    public static int retry_button=0x00000000;
    public static int right_icon=0x00000000;
    public static int right_side=0x00000000;
    public static int tag_transition_group=0x00000000;
    public static int text=0x00000000;
    public static int text2=0x00000000;
    public static int time=0x00000000;
    public static int title=0x00000000;
  }
  public static final class integer {
    public static int reenter_fullscreen_delay_time_in_millis=0x00000000;
    /**
     * Maximum numerical value that will be shown in a status bar
     * notification icon or in the notification itself. Will be replaced
     * with @string/status_bar_notification_info_overflow when shown in the
     * UI.
     */
    public static int status_bar_notification_info_maxnum=0x00000000;
  }
  public static final class layout {
    public static int notification_action=0x00000000;
    public static int notification_action_tombstone=0x00000000;
    public static int notification_template_custom_big=0x00000000;
    public static int notification_template_icon_group=0x00000000;
    public static int notification_template_part_chronometer=0x00000000;
    public static int notification_template_part_time=0x00000000;
    public static int photo_activity_view=0x00000000;
    public static int photo_fragment_view=0x00000000;
    public static int photo_retry_button=0x00000000;
  }
  public static final class string {
    /**
     * Photo view error message shown below thumbnail if full image could not be shown [CHAR LIMIT=30]
     */
    public static int failed=0x00000000;
    /**
     * Photo view sub-title for current photo position [CHAR LIMIT=10]
     */
    public static int photo_view_count=0x00000000;
    public static int retry=0x00000000;
    /**
     * Text to use when the number in a notification info is too large
     * (greater than status_bar_notification_info_maxnum, defined in
     * values/config.xml) and must be truncated. May need to be localized
     * for most appropriate textual indicator of "more than X".
     * [CHAR LIMIT=4]
     */
    public static int status_bar_notification_info_overflow=0x00000000;
    /**
     * Title and subtitle combined into a single string
     */
    public static int titles=0x00000000;
  }
  public static final class style {
    public static int Holo_ActionBar=0x00000000;
    public static int PhotoViewTheme=0x00000000;
    public static int PhotoViewTheme_NoActionBar=0x00000000;
    public static int PhotoViewTheme_Translucent=0x00000000;
    /**
     * Use platform styles
     */
    public static int TextAppearance_Compat_Notification=0x00000000;
    public static int TextAppearance_Compat_Notification_Info=0x00000000;
    public static int TextAppearance_Compat_Notification_Line2=0x00000000;
    public static int TextAppearance_Compat_Notification_Time=0x00000000;
    public static int TextAppearance_Compat_Notification_Title=0x00000000;
    public static int Widget_Compat_NotificationActionContainer=0x00000000;
    public static int Widget_Compat_NotificationActionText=0x00000000;
  }
  public static final class styleable {
    /**
     * Attributes that are read when parsing a <fontfamily> tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderAuthority com.android.ex.photo:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderCerts com.android.ex.photo:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchStrategy com.android.ex.photo:fontProviderFetchStrategy}</code></td><td>The strategy to be used when fetching font data from a font provider in XML layouts.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchTimeout com.android.ex.photo:fontProviderFetchTimeout}</code></td><td>The length of the timeout during fetching.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderPackage com.android.ex.photo:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderQuery com.android.ex.photo:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
     * </table>
     * @see #FontFamily_fontProviderAuthority
     * @see #FontFamily_fontProviderCerts
     * @see #FontFamily_fontProviderFetchStrategy
     * @see #FontFamily_fontProviderFetchTimeout
     * @see #FontFamily_fontProviderPackage
     * @see #FontFamily_fontProviderQuery
     */
    public static final int[] FontFamily={
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 
        0x00000000, 0x00000000
      };
    /**
     * <p>
     * @attr description
     * The authority of the Font Provider to be used for the request.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.photo:fontProviderAuthority
     */
    public static int FontFamily_fontProviderAuthority=0;
    /**
     * <p>
     * @attr description
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.photo:fontProviderCerts
     */
    public static int FontFamily_fontProviderCerts=1;
    /**
     * <p>
     * @attr description
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     *
     * @attr name com.android.ex.photo:fontProviderFetchStrategy
     */
    public static int FontFamily_fontProviderFetchStrategy=2;
    /**
     * <p>
     * @attr description
     * The length of the timeout during fetching.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     *
     * @attr name com.android.ex.photo:fontProviderFetchTimeout
     */
    public static int FontFamily_fontProviderFetchTimeout=3;
    /**
     * <p>
     * @attr description
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.photo:fontProviderPackage
     */
    public static int FontFamily_fontProviderPackage=4;
    /**
     * <p>
     * @attr description
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.ex.photo:fontProviderQuery
     */
    public static int FontFamily_fontProviderQuery=5;
    /**
     * Attributes that are read when parsing a <font> tag, which is a child of
     * <font-family>. This represents an actual font file and its attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamilyFont_font com.android.ex.photo:font}</code></td><td>The reference to the font file to be used.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontStyle com.android.ex.photo:fontStyle}</code></td><td>The style of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontWeight com.android.ex.photo:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
     * </table>
     * @see #FontFamilyFont_font
     * @see #FontFamilyFont_fontStyle
     * @see #FontFamilyFont_fontWeight
     */
    public static final int[] FontFamilyFont={
        0x00000000, 0x00000000, 0x00000000
      };
    /**
     * <p>
     * @attr description
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.ex.photo:font
     */
    public static int FontFamilyFont_font=0;
    /**
     * <p>
     * @attr description
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.ex.photo:fontStyle
     */
    public static int FontFamilyFont_fontStyle=1;
    /**
     * <p>
     * @attr description
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.ex.photo:fontWeight
     */
    public static int FontFamilyFont_fontWeight=2;
  }
}