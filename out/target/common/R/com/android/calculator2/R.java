/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.calculator2;

public final class R {
    public static final class array {
        /**  Content description for the pad pages when slide-able. 
         */
        public static final int desc_pad_pages=0x7f090000;
    }
    public static final class attr {
        /** 
        When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins. When set to alignBounds,
        causes alignment to take place between the edges of the view.
        The default is alignMargins.
        See {@link android.widget.GridLayout#setAlignmentMode(int)}.
        
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignBounds</code></td><td>0</td><td>
            Align the bounds of the children.
            See {@link android.widget.GridLayout#ALIGN_BOUNDS}.
            </td></tr>
<tr><td><code>alignMargins</code></td><td>1</td><td>
            Align the margins of the children.
            See {@link android.widget.GridLayout#ALIGN_MARGINS}.
            </td></tr>
</table>
         */
        public static final int alignmentMode=0x7f01000d;
        /**  The maximum number of columns to create when automatically positioning children. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int columnCount=0x7f01000b;
        /** 
        When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
        
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int columnOrderPreserved=0x7f01000f;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int fastScrollEnabled=0x7f010004;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int fastScrollHorizontalThumbDrawable=0x7f010007;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int fastScrollHorizontalTrackDrawable=0x7f010008;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int fastScrollVerticalThumbDrawable=0x7f010005;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int fastScrollVerticalTrackDrawable=0x7f010006;
        /**  Class name of the Layout Manager to be used.
        <p/>
        The class must extend android.support.v7.widget.RecyclerView$LayoutManager
        and have either a default constructor or constructor with the signature
        (android.content.Context, android.util.AttributeSet, int, int).
         <p/>
         If the name starts with a '.', application package is prefixed.
         Else, if the name contains a '.', the classname is assumed to be a full class name.
         Else, the recycler view package name (android.support.v7.widget) is prefixed. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layoutManager=0x7f010000;
        /** 
        The column boundary delimiting the left of the group of cells
        occupied by this view.
        
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_column=0x7f010013;
        /** 
        The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}.
        
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_columnSpan=0x7f010014;
        /**  The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_columnWeight=0x7f010015;
        /** 
        Gravity specifies how a component should be placed in its group of cells.
        The default is LEFT | BASELINE.
        See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
        
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td>
             Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges.
            </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td>
             Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges.
            </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
         */
        public static final int layout_gravity=0x7f010016;
        /**  END MarginLayout layoutparams 

        The row boundary delimiting the top of the group of cells
        occupied by this view.
        
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_row=0x7f010010;
        /** 
        The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}.
        
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_rowSpan=0x7f010011;
        /**  The relative proportion of vertical space that should be allocated to this view
        during excess space distribution. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int layout_rowWeight=0x7f010012;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int maxTextSize=0x7f010018;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int minTextSize=0x7f010017;
        /** 
              support versions. All attributes not present in ViewGroup/View are
              redefined in the support library namespace.
        

        The orientation property is not used during layout. It is only used to
        allocate row and column parameters when they are not specified by its children's
        layout parameters. GridLayout works like LinearLayout in this case;
        putting all the components either in a single row or in a single column -
        depending on the value of this flag. In the horizontal case, a columnCount
        property may be additionally supplied to force new rows to be created when a
        row is full. The rowCount attribute may be used similarly in the vertical case.
        The default is horizontal.
        
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
         */
        public static final int orientation=0x7f010009;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int reverseLayout=0x7f010002;
        /**  The maximum number of rows to create when automatically positioning children. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int rowCount=0x7f01000a;
        /** 
        When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
        
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int rowOrderPreserved=0x7f01000e;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int spanCount=0x7f010001;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int stackFromEnd=0x7f010003;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int stepTextSize=0x7f010019;
        /** 
        When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
        
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int useDefaultMargins=0x7f01000c;
    }
    public static final class color {
        /**  Default accent color. 
         */
        public static final int calculator_accent_color=0x7f070000;
        /**  Color to indicate an error has occured. 
         */
        public static final int calculator_error_color=0x7f070003;
        /**  Primary color (Color for the toolbars). 
         */
        public static final int calculator_primary_color=0x7f070001;
        /**  Status bar color. 
         */
        public static final int calculator_statusbar_color=0x7f070002;
        /**  Background color of the calculator display. 
         */
        public static final int display_background_color=0x7f070004;
        /**  Text color for the formula in the calculator display. 
         */
        public static final int display_formula_text_color=0x7f070005;
        /**  Lighter color for exponent while scrolling. 
         */
        public static final int display_result_exponent_text_color=0x7f070007;
        /**  Text color for the result in the calculator display. 
         */
        public static final int display_result_text_color=0x7f070006;
        /**  Background color for empty history view. 
         */
        public static final int empty_history_color=0x7f07000f;
        /**  Background color for the advanced pad. 
         */
        public static final int pad_advanced_background_color=0x7f07000a;
        /**  Ripple color when a button is pressed in a pad. 
         */
        public static final int pad_button_advanced_ripple_color=0x7f07000e;
        /**  Text color for a button in the advanced pad. 
         */
        public static final int pad_button_advanced_text_color=0x7f07000c;
        /**  Ripple color when a button is pressed in a pad. 
         */
        public static final int pad_button_ripple_color=0x7f07000d;
        /**  Text color for a button in a pad. 
         */
        public static final int pad_button_text_color=0x7f07000b;
        /**  Background color for the numeric pad. 
         */
        public static final int pad_numeric_background_color=0x7f070008;
        /**  Background color for the operator pad. 
         */
        public static final int pad_operator_background_color=0x7f070009;
    }
    public static final class dimen {
        /**  The default gap between components in a layout. 
         */
        public static final int default_gap=0x7f050006;
        public static final int fastscroll_default_thickness=0x7f050003;
        public static final int fastscroll_margin=0x7f050005;
        public static final int fastscroll_minimum_range=0x7f050004;
        public static final int formula_max_textsize=0x7f050010;
        public static final int formula_min_textsize=0x7f05000f;
        public static final int formula_padding_bottom=0x7f05000c;
        public static final int formula_padding_end=0x7f05000e;
        public static final int formula_padding_start=0x7f05000d;
        /**  Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
 Dimens for display formula. 
         */
        public static final int formula_padding_top=0x7f05000b;
        public static final int formula_step_textsize=0x7f050011;
        public static final int history_divider_padding=0x7f050008;
        public static final int history_item_text_padding_bottom=0x7f05000a;
        public static final int history_item_text_padding_top=0x7f050009;
        /**  The max amount of scroll ItemTouchHelper will trigger if dragged view is out of
    RecyclerView's bounds.
         */
        public static final int item_touch_helper_max_drag_scroll_per_frame=0x7f050000;
        public static final int item_touch_helper_swipe_escape_max_velocity=0x7f050002;
        public static final int item_touch_helper_swipe_escape_velocity=0x7f050001;
        /**  The margin between the pad pages when displayed using a view pager. 
         */
        public static final int pad_page_margin=0x7f050007;
        public static final int result_padding_bottom=0x7f050013;
        public static final int result_padding_end=0x7f050015;
        public static final int result_padding_start=0x7f050014;
        /**  Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
 Dimens for display result. 
         */
        public static final int result_padding_top=0x7f050012;
        public static final int result_textsize=0x7f050016;
    }
    public static final class drawable {
        public static final int ic_history_grey600_48dp=0x7f020000;
        public static final int pad_button_advanced_background=0x7f020001;
        public static final int pad_button_background=0x7f020002;
        public static final int pad_button_inverse_background=0x7f020003;
    }
    public static final class id {
        public static final int alignBounds=0x7f060003;
        public static final int alignMargins=0x7f060004;
        public static final int bottom=0x7f060005;
        public static final int center=0x7f060006;
        public static final int center_horizontal=0x7f060007;
        public static final int center_vertical=0x7f060008;
        public static final int clip_horizontal=0x7f060009;
        public static final int clip_vertical=0x7f06000a;
        public static final int clr=0x7f060049;
        public static final int const_e=0x7f060034;
        public static final int const_pi=0x7f060033;
        public static final int dec_point=0x7f060044;
        public static final int del=0x7f060048;
        public static final int digit_0=0x7f060045;
        public static final int digit_1=0x7f060041;
        public static final int digit_2=0x7f060042;
        public static final int digit_3=0x7f060043;
        public static final int digit_4=0x7f06003e;
        public static final int digit_5=0x7f06003f;
        public static final int digit_6=0x7f060040;
        public static final int digit_7=0x7f06003b;
        public static final int digit_8=0x7f06003c;
        public static final int digit_9=0x7f06003d;
        public static final int display=0x7f060018;
        public static final int drag_layout=0x7f060013;
        public static final int empty_history_view=0x7f06001c;
        public static final int end=0x7f06000b;
        public static final int eq=0x7f060046;
        public static final int fill=0x7f06000c;
        public static final int fill_horizontal=0x7f06000d;
        public static final int fill_vertical=0x7f06000e;
        public static final int formula=0x7f06001a;
        public static final int formula_container=0x7f060019;
        public static final int fun_10pow=0x7f060031;
        public static final int fun_arccos=0x7f06002b;
        public static final int fun_arcsin=0x7f060029;
        public static final int fun_arctan=0x7f06002d;
        public static final int fun_cos=0x7f06002a;
        public static final int fun_exp=0x7f06002f;
        public static final int fun_ln=0x7f06002e;
        public static final int fun_log=0x7f060030;
        public static final int fun_sin=0x7f060028;
        public static final int fun_tan=0x7f06002c;
        public static final int history_date=0x7f060020;
        public static final int history_divider=0x7f06001f;
        public static final int history_formula=0x7f060022;
        public static final int history_formula_container=0x7f060021;
        public static final int history_frame=0x7f060015;
        public static final int history_recycler_view=0x7f06001e;
        public static final int history_result=0x7f060023;
        public static final int history_toolbar=0x7f06001d;
        public static final int horizontal=0x7f060001;
        /**  ItemTouchHelper uses this id to save a View's original elevation. 
         */
        public static final int item_touch_helper_previous_elevation=0x7f060000;
        public static final int left=0x7f06000f;
        public static final int lparen=0x7f060036;
        public static final int main_calculator=0x7f060014;
        public static final int memory_add=0x7f060058;
        public static final int memory_recall=0x7f060055;
        public static final int memory_store=0x7f060057;
        public static final int memory_subtract=0x7f060059;
        public static final int menu_clear_history=0x7f060054;
        public static final int menu_copy=0x7f06005a;
        public static final int menu_fraction=0x7f060052;
        public static final int menu_history=0x7f060050;
        public static final int menu_leading=0x7f060051;
        public static final int menu_licenses=0x7f060053;
        public static final int menu_paste=0x7f060056;
        public static final int message=0x7f060017;
        public static final int mode=0x7f06004f;
        public static final int op_add=0x7f06004d;
        public static final int op_div=0x7f06004a;
        public static final int op_fact=0x7f060032;
        public static final int op_mul=0x7f06004b;
        public static final int op_pct=0x7f060027;
        public static final int op_pow=0x7f060035;
        public static final int op_sqr=0x7f060039;
        public static final int op_sqrt=0x7f060038;
        public static final int op_sub=0x7f06004c;
        public static final int pad_advanced=0x7f060024;
        public static final int pad_numeric=0x7f06003a;
        public static final int pad_operator=0x7f060047;
        public static final int pad_pager=0x7f060016;
        public static final int result=0x7f06001b;
        public static final int right=0x7f060010;
        public static final int rparen=0x7f060037;
        public static final int start=0x7f060011;
        public static final int toggle_inv=0x7f060025;
        public static final int toggle_mode=0x7f060026;
        public static final int toolbar=0x7f06004e;
        public static final int top=0x7f060012;
        public static final int vertical=0x7f060002;
    }
    public static final class layout {
        public static final int activity_calculator=0x7f040011;
        public static final int activity_calculator_land=0x7f040000;
        public static final int activity_calculator_main=0x7f040001;
        public static final int activity_calculator_port=0x7f040002;
        public static final int activity_calculator_tablet_port=0x7f040003;
        public static final int dialog_message=0x7f040004;
        public static final int display=0x7f040012;
        public static final int display_one_line=0x7f040005;
        public static final int display_two_line=0x7f040006;
        public static final int empty_history_view=0x7f040007;
        public static final int fragment_history=0x7f040008;
        public static final int history_item=0x7f040009;
        public static final int pad_advanced=0x7f040014;
        public static final int pad_advanced_3x5=0x7f04000a;
        public static final int pad_advanced_4x4=0x7f04000b;
        public static final int pad_advanced_5x3=0x7f04000c;
        public static final int pad_numeric=0x7f04000d;
        public static final int pad_operator=0x7f040013;
        public static final int pad_operator_one_col=0x7f04000e;
        public static final int pad_operator_two_col=0x7f04000f;
        public static final int toolbar=0x7f040010;
    }
    public static final class menu {
        public static final int activity_calculator=0x7f0b0000;
        public static final int fragment_history=0x7f0b0001;
        public static final int menu_formula=0x7f0b0002;
        public static final int menu_result=0x7f0b0003;
    }
    public static final class mipmap {
        public static final int ic_launcher_calculator=0x7f030000;
    }
    public static final class string {
        /**  Name of the application. [CHAR_LIMIT=NONE] 
         */
        public static final int app_name=0x7f080000;
        /**  Indicator (for "leading" display) that result is inexact. [CHAR_LIMIT=NONE] 
         */
        public static final int approximate=0x7f080060;
        /**  Dialog message when a computation is cancelled by the user. [CHAR_LIMIT=NONE] 
         */
        public static final int cancelled=0x7f08005b;
        /** 
      Announced when all characters are removed from Formula, e.g. after clear. [CHAR_LIMIT=NONE]
      
         */
        public static final int cleared=0x7f080029;
        /**  Clear button to clear the currently entered expression. [CHAR_LIMIT=4] 
         */
        public static final int clr=0x7f080028;
        /**  Constant for Euler's number (i.e. "2.7182…"). [CHAR_LIMIT=1] 
         */
        public static final int const_e=0x7f080001;
        /**  Constant for pi (i.e. "3.1415…"). [CHAR_LIMIT=1] 
         */
        public static final int const_pi=0x7f080002;
        /** 
      Decimal separator (e.g. "1.23" or "1,23").

      This should be whatever character is appropriate for use as a decimal sign for a given locale
      when used with Arabic numerals (i.e. 0, 1, 2, 3, ...)

      [CHAR_LIMIT=1]
      
         */
        public static final int dec_point=0x7f080005;
        /**  Delete button to remove last entered token. [CHAR_LIMIT=4] 
         */
        public static final int del=0x7f08002a;
        /**  Content description for the advanced pad when slide-able. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_adv_pad=0x7f080054;
        /**  Content description for "clr" button. Deletes entire formula. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_clr=0x7f08004d;
        /**  Content description for 'e' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_const_e=0x7f080030;
        /**  Content description for 'π' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_const_pi=0x7f080031;
        /**  Content description for '.' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_dec_point=0x7f080032;
        /** 
      Content description for "del" button. Deletes single character. Should differ
      from desc_clr. [CHAR_LIMIT=NONE]
      
         */
        public static final int desc_del=0x7f08004e;
        /**  Content description for '=' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_eq=0x7f08004c;
        /**  Content description for formula field when it is empty. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_formula=0x7f080051;
        /** 
      Content description for 10^ button. This button is used to raise 10 to the subsequently
      entered power. E.g. <10^>3 would yield 1000.
      [CHAR_LIMIT=NONE]
      
         */
        public static final int desc_fun_10pow=0x7f08003d;
        /**  Content description for 'arccos' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_arccos=0x7f08003a;
        /**  Content description for 'arcsin' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_arcsin=0x7f08003b;
        /**  Content description for 'arctan' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_arctan=0x7f08003c;
        /**  Content description for 'cos' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_cos=0x7f080035;
        /**  Content description for e^ (exponential function) button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_exp=0x7f08003e;
        /**  Content description for 'ln' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_ln=0x7f080036;
        /**  Content description for 'log' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_log=0x7f080037;
        /**  Content description for 'sin' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_sin=0x7f080038;
        /**  Content description for 'tan' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_fun_tan=0x7f080039;
        /**  Content description for "inv" button to show inverse functions. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_inv_off=0x7f08004f;
        /**  Content description for "inv" button to hide inverse functions. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_inv_on=0x7f080050;
        /**  Content description for '(' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_lparen=0x7f080033;
        /**  Content description for degree mode. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_mode_deg=0x7f080048;
        /**  Content description for radian mode. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_mode_rad=0x7f080049;
        /**  Action bar navigate up description in history page. [CHAR_LIMIT=40] 
         */
        public static final int desc_navigate_up=0x7f080067;
        /**  Content description for the numeric/operation pad when slide-able. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_num_pad=0x7f080053;
        /**  Content description for '+' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_add=0x7f080040;
        /**  Content description for '÷' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_div=0x7f080041;
        /**  Content description for '!' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_fact=0x7f080042;
        /**  Content description for '×' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_mul=0x7f080043;
        /**  Content description for '%' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_pct=0x7f080044;
        /**  Content description for '^' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_pow=0x7f080045;
        /** 
      Content description for ^2 button. This button is used to square the previously entered
      number. E.g. 3<^2> would yield 9.
      [CHAR_LIMIT=NONE]
      
         */
        public static final int desc_op_sqr=0x7f08003f;
        /**  Content description for '√' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_sqrt=0x7f080046;
        /**  Content description for '-' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_op_sub=0x7f080047;
        /**  Content description for result field when it is empty. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_result=0x7f080052;
        /**  Content description for ')' button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_rparen=0x7f080034;
        /**  Content description for switch to degree button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_switch_deg=0x7f08004a;
        /**  Content description for switch to radian button. [CHAR_LIMIT=NONE] 
         */
        public static final int desc_switch_rad=0x7f08004b;
        /** 
      Message for alert dialog when user is about to clear history and memory. [CHAR_LIMIT=NONE]
    
         */
        public static final int dialog_clear=0x7f080069;
        /**  Title for alert dialog when calculation takes too long (timeout). [CHAR_LIMIT=30] 
         */
        public static final int dialog_timeout=0x7f080068;
        /**  Decimal representation of zero (e.g. "0", "10", "1.0", "1e0"). [CHAR_LIMIT=1] 
         */
        public static final int digit_0=0x7f080006;
        /**  Decimal representation of one (e.g. "1", "11", "1.1", "1e1"). [CHAR_LIMIT=1] 
         */
        public static final int digit_1=0x7f080007;
        /**  Decimal representation of two (e.g. "2", "22", "2.2", "2e2"). [CHAR_LIMIT=1] 
         */
        public static final int digit_2=0x7f080008;
        /**  Decimal representation of three (e.g. "3", "33", "3.3", "3e3"). [CHAR_LIMIT=1] 
         */
        public static final int digit_3=0x7f080009;
        /**  Decimal representation of four (e.g. "4", "44", "4.4", "4e4"). [CHAR_LIMIT=1] 
         */
        public static final int digit_4=0x7f08000a;
        /**  Decimal representation of five (e.g. "5", "55", "5.5", "5e5"). [CHAR_LIMIT=1] 
         */
        public static final int digit_5=0x7f08000b;
        /**  Decimal representation of six (e.g. "6", "66", "6.6", "6e6"). [CHAR_LIMIT=1] 
         */
        public static final int digit_6=0x7f08000c;
        /**  Decimal representation of seven (e.g. "7", "77", "7.7", "7e7"). [CHAR_LIMIT=1] 
         */
        public static final int digit_7=0x7f08000d;
        /**  Decimal representation of eight (e.g. "8", "88", "8.8", "8e8"). [CHAR_LIMIT=1] 
         */
        public static final int digit_8=0x7f08000e;
        /**  Decimal representation of eight (e.g. "9", "99", "9.9", "9e9"). [CHAR_LIMIT=1] 
         */
        public static final int digit_9=0x7f08000f;
        /**  Button label to dismiss informative text message. [CHAR_LIMIT=40] 
         */
        public static final int dismiss=0x7f08005e;
        /**  Equals button (e.g. "1 + 2 = ?"). [CHAR_LIMIT=1] 
         */
        public static final int eq=0x7f080027;
        /**  Error displayed when evaluation is manually aborted. [CHAR_LIMIT=20] 
         */
        public static final int error_aborted=0x7f080057;
        /**  Error displayed when expression evaluates to an undefined result. [CHAR_LIMIT=20] 
         */
        public static final int error_nan=0x7f080055;
        /**  Error displayed when excessive precision is required. [CHAR_LIMIT=20] 
         */
        public static final int error_overflow=0x7f080058;
        /**  Error displayed when expression contains a syntax error. [CHAR_LIMIT=20] 
         */
        public static final int error_syntax=0x7f080056;
        /** 
      Error displayed when division by zero is detected.

      If the translation does not fit within the given limit, then a shortened version must
      be used, e.g. "Division by 0". Exceeding the limit will result in a truncated string.

      [CHAR_LIMIT=20]
      
         */
        public static final int error_zero_divide=0x7f080059;
        /**  Appended indicator (for "leading" display) that result is exact. [CHAR_LIMIT=NONE] 
         */
        public static final int exact=0x7f08005f;
        /**  Abbrev. name of exponential function in formula.  
         */
        public static final int exponential=0x7f080024;
        /**  Abbrev. name of base 10 exponential function (e.g. "10^6"). [CHAR_LIMIT=5] 
         */
        public static final int fun_10pow=0x7f080020;
        /**  Abbrev. name of cosine function (e.g. "arccos(π)"). [CHAR_LIMIT=5] 
         */
        public static final int fun_arccos=0x7f08001d;
        /**  Abbrev. name of sine function (e.g. "arcsin(π)"). [CHAR_LIMIT=5] 
         */
        public static final int fun_arcsin=0x7f08001e;
        /**  Abbrev. name of tangent function (e.g. "arctan(π)"). [CHAR_LIMIT=5] 
         */
        public static final int fun_arctan=0x7f08001f;
        /**  Abbrev. name of cosine function (e.g. "cos(π)"). [CHAR_LIMIT=4] 
         */
        public static final int fun_cos=0x7f080018;
        /**  Abbrev. name of exponential function (e.g. "e^6"). [CHAR_LIMIT=5] 
         */
        public static final int fun_exp=0x7f080021;
        /**  Natural logarithm function (e.g. "ln(2)"). [CHAR_LIMIT=4] 
         */
        public static final int fun_ln=0x7f080019;
        /**  Logarithm function (e.g. "log(10)"). [CHAR_LIMIT=4] 
         */
        public static final int fun_log=0x7f08001a;
        /**  Abbrev. name of sine function (e.g. "sin(π)"). [CHAR_LIMIT=4] 
         */
        public static final int fun_sin=0x7f08001b;
        /**  Abbrev. name of tangent function (e.g. "tan(π)"). [CHAR_LIMIT=4] 
         */
        public static final int fun_tan=0x7f08001c;
        /**  Toggle button to show/hide inverse functions. [CHAR_LIMIT=4] 
         */
        public static final int inv=0x7f08002b;
        /**  Left parenthesis (e.g. "log(", "2 × (3 - 1)". [CHAR_LIMIT=1] 
         */
        public static final int lparen=0x7f080003;
        /**  Item on Result context menu, which adds the current result to the number in memory.
      [CHAR_LIMIT=2]
      
         */
        public static final int memory_add=0x7f08002f;
        /** 
      Item on Formula context menu used to paste from the Memory into the edit field. [CHAR_LIMIT=2]
      
         */
        public static final int memory_recall=0x7f08002c;
        /**  Item on Result context menu used to store the result in memory. [CHAR_LIMIT=2]
      
         */
        public static final int memory_store=0x7f08002d;
        /**  Item on Result context menu, which subtracts the current result from the number in memory.
      [CHAR_LIMIT=2]
      
         */
        public static final int memory_subtract=0x7f08002e;
        /**  Menu option to clear calculation history and memory. [CHAR_LIMIT=40] 
         */
        public static final int menu_clear_history=0x7f080065;
        /**  Menu option to display result as fraction. [CHAR_LIMIT=40] 
         */
        public static final int menu_fraction=0x7f080062;
        /**  Menu option to access calculation history. [CHAR_LIMIT=40] 
         */
        public static final int menu_history=0x7f080064;
        /**  Menu option to display result including leading digits. [CHAR_LIMIT=40] 
         */
        public static final int menu_leading=0x7f080061;
        /**  Menu option to view the app's open source licenses. [CHAR_LIMIT=40] 
         */
        public static final int menu_licenses=0x7f080063;
        /**  Abbrev. name of degree mode [CHAR_LIMIT=4] 
         */
        public static final int mode_deg=0x7f080025;
        /**  Abbrev. name of radian mode. [CHAR_LIMIT=4] 
         */
        public static final int mode_rad=0x7f080026;
        /**  Placeholder string when there is no history to be shown. [CHAR_LIMIT=40] 
         */
        public static final int no_history=0x7f08006b;
        /** 
      Button label to allow future computations with a longer timeout.

      When evaluating a result takes too long, we show a "timed out" dialog. This button allows
      the user to increase the maximum amount of time we attempt to evaluate the expression before
      "timing out".

      [CHAR_LIMIT=40]
      
         */
        public static final int ok_remove_timeout=0x7f08005d;
        /**  Addition operator (e.g. "1 + 2"). [CHAR_LIMIT=1] 
         */
        public static final int op_add=0x7f080010;
        /**  Divide operator (e.g. "1 ÷ 2"). [CHAR_LIMIT=1] 
         */
        public static final int op_div=0x7f080011;
        /**  Factorial operator (e.g. "2!"). [CHAR_LIMIT=1] 
         */
        public static final int op_fact=0x7f080012;
        /**  Multiply operator (e.g. "1 × 2"). [CHAR_LIMIT=1] 
         */
        public static final int op_mul=0x7f080013;
        /**  Percent operator (e.g. "25%"). [CHAR_LIMIT=1] 
         */
        public static final int op_pct=0x7f080014;
        /**  Power operator (e.g. "1 ^ 2"). [CHAR_LIMIT=1] 
         */
        public static final int op_pow=0x7f080015;
        /**  Abbrev. name of suffix square function on key (e.g. "17^2"). [CHAR_LIMIT=5] 
         */
        public static final int op_sqr=0x7f080022;
        /**  Square root operator (e.g. "√1"). [CHAR_LIMIT=1] 
         */
        public static final int op_sqrt=0x7f080016;
        /**  Subtraction operator (e.g. "1 - 2"). [CHAR_LIMIT=1] 
         */
        public static final int op_sub=0x7f080017;
        /**  Right parenthesis (e.g. "log(2)", "(3 - 1) × 2". [CHAR_LIMIT=1] 
         */
        public static final int rparen=0x7f080004;
        /** 
      Abbrev. name of suffix square function in formula.
      "^2" does not work, since it blends into a later constant.
      
         */
        public static final int squared=0x7f080023;
        /**  Toast shown when text is copied to the clipboard. [CHAR_LIMIT=40] 
         */
        public static final int text_copied_toast=0x7f08005a;
        /**  Dialog message when a computation times out. [CHAR_LIMIT=NONE] 
         */
        public static final int timeout=0x7f08005c;
        /**  Title for "current expression" in history page. [CHAR_LIMIT=40] 
         */
        public static final int title_current_expression=0x7f08006a;
        /**  Action bar title in history page. [CHAR_LIMIT=40] 
         */
        public static final int title_history=0x7f080066;
    }
    public static final class style {
        public static final int DisplayTextStyle=0x7f0a0000;
        public static final int DisplayTextStyle_Formula=0x7f0a0001;
        public static final int DisplayTextStyle_Result=0x7f0a0002;
        public static final int HistoryItemTextStyle=0x7f0a0003;
        public static final int PadButtonStyle=0x7f0a0004;
        public static final int PadButtonStyle_Advanced=0x7f0a0005;
        public static final int PadButtonStyle_Advanced_Text=0x7f0a0006;
        public static final int PadButtonStyle_Numeric=0x7f0a0007;
        public static final int PadButtonStyle_Numeric_Equals=0x7f0a0008;
        public static final int PadButtonStyle_Operator=0x7f0a0009;
        public static final int PadButtonStyle_Operator_Text=0x7f0a000a;
        public static final int PadLayoutStyle=0x7f0a000b;
        public static final int PadLayoutStyle_Advanced=0x7f0a000c;
        public static final int PadLayoutStyle_Numeric=0x7f0a000d;
        public static final int PadLayoutStyle_Operator=0x7f0a000e;
        public static final int Theme=0x7f0a000f;
        public static final int Theme_Calculator=0x7f0a0010;
        public static final int Theme_Licenses=0x7f0a0011;
    }
    public static final class styleable {
        /** Attributes that can be used with a CalculatorFormula.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CalculatorFormula_maxTextSize com.android.calculator2:maxTextSize}</code></td><td></td></tr>
           <tr><td><code>{@link #CalculatorFormula_minTextSize com.android.calculator2:minTextSize}</code></td><td></td></tr>
           <tr><td><code>{@link #CalculatorFormula_stepTextSize com.android.calculator2:stepTextSize}</code></td><td></td></tr>
           </table>
           @see #CalculatorFormula_maxTextSize
           @see #CalculatorFormula_minTextSize
           @see #CalculatorFormula_stepTextSize
         */
        public static final int[] CalculatorFormula = {
            0x7f010017, 0x7f010018, 0x7f010019
        };
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#maxTextSize}
          attribute's value can be found in the {@link #CalculatorFormula} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:maxTextSize
        */
        public static final int CalculatorFormula_maxTextSize = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#minTextSize}
          attribute's value can be found in the {@link #CalculatorFormula} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:minTextSize
        */
        public static final int CalculatorFormula_minTextSize = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#stepTextSize}
          attribute's value can be found in the {@link #CalculatorFormula} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:stepTextSize
        */
        public static final int CalculatorFormula_stepTextSize = 2;
        /** Attributes that can be used with a GridLayout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridLayout_alignmentMode com.android.calculator2:alignmentMode}</code></td><td>
        When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins.</td></tr>
           <tr><td><code>{@link #GridLayout_columnCount com.android.calculator2:columnCount}</code></td><td> The maximum number of columns to create when automatically positioning children.</td></tr>
           <tr><td><code>{@link #GridLayout_columnOrderPreserved com.android.calculator2:columnOrderPreserved}</code></td><td>
        When set to true, forces column boundaries to appear in the same order
        as column indices.</td></tr>
           <tr><td><code>{@link #GridLayout_orientation com.android.calculator2:orientation}</code></td><td>
              support versions.</td></tr>
           <tr><td><code>{@link #GridLayout_rowCount com.android.calculator2:rowCount}</code></td><td> The maximum number of rows to create when automatically positioning children.</td></tr>
           <tr><td><code>{@link #GridLayout_rowOrderPreserved com.android.calculator2:rowOrderPreserved}</code></td><td>
        When set to true, forces row boundaries to appear in the same order
        as row indices.</td></tr>
           <tr><td><code>{@link #GridLayout_useDefaultMargins com.android.calculator2:useDefaultMargins}</code></td><td>
        When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.</td></tr>
           </table>
           @see #GridLayout_alignmentMode
           @see #GridLayout_columnCount
           @see #GridLayout_columnOrderPreserved
           @see #GridLayout_orientation
           @see #GridLayout_rowCount
           @see #GridLayout_rowOrderPreserved
           @see #GridLayout_useDefaultMargins
         */
        public static final int[] GridLayout = {
            0x7f010009, 0x7f01000a, 0x7f01000b, 0x7f01000c,
            0x7f01000d, 0x7f01000e, 0x7f01000f
        };
        /**
          <p>
          @attr description
          
        When set to alignMargins, causes alignment to take place between the outer
        boundary of a view, as defined by its margins. When set to alignBounds,
        causes alignment to take place between the edges of the view.
        The default is alignMargins.
        See {@link android.widget.GridLayout#setAlignmentMode(int)}.
        


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignBounds</code></td><td>0</td><td>
            Align the bounds of the children.
            See {@link android.widget.GridLayout#ALIGN_BOUNDS}.
            </td></tr>
<tr><td><code>alignMargins</code></td><td>1</td><td>
            Align the margins of the children.
            See {@link android.widget.GridLayout#ALIGN_MARGINS}.
            </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.android.calculator2:alignmentMode
        */
        public static final int GridLayout_alignmentMode = 4;
        /**
          <p>
          @attr description
           The maximum number of columns to create when automatically positioning children. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:columnCount
        */
        public static final int GridLayout_columnCount = 2;
        /**
          <p>
          @attr description
          
        When set to true, forces column boundaries to appear in the same order
        as column indices.
        The default is true.
        See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
        


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:columnOrderPreserved
        */
        public static final int GridLayout_columnOrderPreserved = 6;
        /**
          <p>
          @attr description
          
              support versions. All attributes not present in ViewGroup/View are
              redefined in the support library namespace.
        

        The orientation property is not used during layout. It is only used to
        allocate row and column parameters when they are not specified by its children's
        layout parameters. GridLayout works like LinearLayout in this case;
        putting all the components either in a single row or in a single column -
        depending on the value of this flag. In the horizontal case, a columnCount
        property may be additionally supplied to force new rows to be created when a
        row is full. The rowCount attribute may be used similarly in the vertical case.
        The default is horizontal.
        


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
<tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.android.calculator2:orientation
        */
        public static final int GridLayout_orientation = 0;
        /**
          <p>
          @attr description
           The maximum number of rows to create when automatically positioning children. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:rowCount
        */
        public static final int GridLayout_rowCount = 1;
        /**
          <p>
          @attr description
          
        When set to true, forces row boundaries to appear in the same order
        as row indices.
        The default is true.
        See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
        


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:rowOrderPreserved
        */
        public static final int GridLayout_rowOrderPreserved = 5;
        /**
          <p>
          @attr description
          
        When set to true, tells GridLayout to use default margins when none are specified
        in a view's layout parameters.
        The default value is false.
        See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
        


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:useDefaultMargins
        */
        public static final int GridLayout_useDefaultMargins = 3;
        /** Attributes that can be used with a GridLayout_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_height android:layout_height}</code></td><td></td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_margin android:layout_margin}</code></td><td>
              Specifies extra space on the left, top, right and bottom
              sides of this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_marginBottom android:layout_marginBottom}</code></td><td>
              Specifies extra space on the bottom side of this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_marginLeft android:layout_marginLeft}</code></td><td>
              Specifies extra space on the left side of this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_marginRight android:layout_marginRight}</code></td><td>
              Specifies extra space on the right side of this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_marginTop android:layout_marginTop}</code></td><td>
              Specifies extra space on the top side of this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_android_layout_width android:layout_width}</code></td><td>
              support versions.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_column com.android.calculator2:layout_column}</code></td><td>
        The column boundary delimiting the left of the group of cells
        occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan com.android.calculator2:layout_columnSpan}</code></td><td>
        The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_columnWeight com.android.calculator2:layout_columnWeight}</code></td><td> The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_gravity com.android.calculator2:layout_gravity}</code></td><td>
        Gravity specifies how a component should be placed in its group of cells.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_row com.android.calculator2:layout_row}</code></td><td> END MarginLayout layoutparams 

        The row boundary delimiting the top of the group of cells
        occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan com.android.calculator2:layout_rowSpan}</code></td><td>
        The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.</td></tr>
           <tr><td><code>{@link #GridLayout_Layout_layout_rowWeight com.android.calculator2:layout_rowWeight}</code></td><td> The relative proportion of vertical space that should be allocated to this view
        during excess space distribution.</td></tr>
           </table>
           @see #GridLayout_Layout_android_layout_height
           @see #GridLayout_Layout_android_layout_margin
           @see #GridLayout_Layout_android_layout_marginBottom
           @see #GridLayout_Layout_android_layout_marginLeft
           @see #GridLayout_Layout_android_layout_marginRight
           @see #GridLayout_Layout_android_layout_marginTop
           @see #GridLayout_Layout_android_layout_width
           @see #GridLayout_Layout_layout_column
           @see #GridLayout_Layout_layout_columnSpan
           @see #GridLayout_Layout_layout_columnWeight
           @see #GridLayout_Layout_layout_gravity
           @see #GridLayout_Layout_layout_row
           @see #GridLayout_Layout_layout_rowSpan
           @see #GridLayout_Layout_layout_rowWeight
         */
        public static final int[] GridLayout_Layout = {
            0x010100f4, 0x010100f5, 0x010100f6, 0x010100f7,
            0x010100f8, 0x010100f9, 0x010100fa, 0x7f010010,
            0x7f010011, 0x7f010012, 0x7f010013, 0x7f010014,
            0x7f010015, 0x7f010016
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#layout_height}
          attribute's value can be found in the {@link #GridLayout_Layout} array.
          @attr name android:layout_height
        */
        public static final int GridLayout_Layout_android_layout_height = 1;
        /**
          <p>
          @attr description
          
              Specifies extra space on the left, top, right and bottom
              sides of this view. This space is outside this view's bounds.
        
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_margin}.
          @attr name android:layout_margin
        */
        public static final int GridLayout_Layout_android_layout_margin = 2;
        /**
          <p>
          @attr description
          
              Specifies extra space on the bottom side of this view.
              This space is outside this view's bounds.
        
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_marginBottom}.
          @attr name android:layout_marginBottom
        */
        public static final int GridLayout_Layout_android_layout_marginBottom = 6;
        /**
          <p>
          @attr description
          
              Specifies extra space on the left side of this view.
              This space is outside this view's bounds.
        
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_marginLeft}.
          @attr name android:layout_marginLeft
        */
        public static final int GridLayout_Layout_android_layout_marginLeft = 3;
        /**
          <p>
          @attr description
          
              Specifies extra space on the right side of this view.
              This space is outside this view's bounds.
        
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_marginRight}.
          @attr name android:layout_marginRight
        */
        public static final int GridLayout_Layout_android_layout_marginRight = 5;
        /**
          <p>
          @attr description
          
              Specifies extra space on the top side of this view.
              This space is outside this view's bounds.
        
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_marginTop}.
          @attr name android:layout_marginTop
        */
        public static final int GridLayout_Layout_android_layout_marginTop = 4;
        /**
          <p>
          @attr description
          
              support versions. All attributes not present in MarginLayout are
              redefined in the support library name space.
        
 START MarginLayout layoutparams 
          <p>This corresponds to the global attribute
          resource symbol {@link android.R.attr#layout_width}.
          @attr name android:layout_width
        */
        public static final int GridLayout_Layout_android_layout_width = 0;
        /**
          <p>
          @attr description
          
        The column boundary delimiting the left of the group of cells
        occupied by this view.
        


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_column
        */
        public static final int GridLayout_Layout_layout_column = 10;
        /**
          <p>
          @attr description
          
        The column span: the difference between the right and left
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}.
        


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_columnSpan
        */
        public static final int GridLayout_Layout_layout_columnSpan = 11;
        /**
          <p>
          @attr description
           The relative proportion of horizontal space that should be allocated to this view
        during excess space distribution. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_columnWeight
        */
        public static final int GridLayout_Layout_layout_columnWeight = 12;
        /**
          <p>
          @attr description
          
        Gravity specifies how a component should be placed in its group of cells.
        The default is LEFT | BASELINE.
        See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
        


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td>
             Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges.
            </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td>
             Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges.
            </td></tr>
<tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
<tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_gravity
        */
        public static final int GridLayout_Layout_layout_gravity = 13;
        /**
          <p>
          @attr description
           END MarginLayout layoutparams 

        The row boundary delimiting the top of the group of cells
        occupied by this view.
        


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_row
        */
        public static final int GridLayout_Layout_layout_row = 7;
        /**
          <p>
          @attr description
          
        The row span: the difference between the top and bottom
        boundaries delimiting the group of cells occupied by this view.
        The default is one.
        See {@link android.widget.GridLayout.Spec}.
        


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_rowSpan
        */
        public static final int GridLayout_Layout_layout_rowSpan = 8;
        /**
          <p>
          @attr description
           The relative proportion of vertical space that should be allocated to this view
        during excess space distribution. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layout_rowWeight
        */
        public static final int GridLayout_Layout_layout_rowWeight = 9;
        /** Attributes that can be used with a RecyclerView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #RecyclerView_android_descendantFocusability android:descendantFocusability}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_android_orientation android:orientation}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_fastScrollEnabled com.android.calculator2:fastScrollEnabled}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_fastScrollHorizontalThumbDrawable com.android.calculator2:fastScrollHorizontalThumbDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_fastScrollHorizontalTrackDrawable com.android.calculator2:fastScrollHorizontalTrackDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_fastScrollVerticalThumbDrawable com.android.calculator2:fastScrollVerticalThumbDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_fastScrollVerticalTrackDrawable com.android.calculator2:fastScrollVerticalTrackDrawable}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_layoutManager com.android.calculator2:layoutManager}</code></td><td> Class name of the Layout Manager to be used.</td></tr>
           <tr><td><code>{@link #RecyclerView_reverseLayout com.android.calculator2:reverseLayout}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_spanCount com.android.calculator2:spanCount}</code></td><td></td></tr>
           <tr><td><code>{@link #RecyclerView_stackFromEnd com.android.calculator2:stackFromEnd}</code></td><td></td></tr>
           </table>
           @see #RecyclerView_android_descendantFocusability
           @see #RecyclerView_android_orientation
           @see #RecyclerView_fastScrollEnabled
           @see #RecyclerView_fastScrollHorizontalThumbDrawable
           @see #RecyclerView_fastScrollHorizontalTrackDrawable
           @see #RecyclerView_fastScrollVerticalThumbDrawable
           @see #RecyclerView_fastScrollVerticalTrackDrawable
           @see #RecyclerView_layoutManager
           @see #RecyclerView_reverseLayout
           @see #RecyclerView_spanCount
           @see #RecyclerView_stackFromEnd
         */
        public static final int[] RecyclerView = {
            0x010100c4, 0x010100f1, 0x7f010000, 0x7f010001,
            0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005,
            0x7f010006, 0x7f010007, 0x7f010008
        };
        /**
          <p>This symbol is the offset where the {@link android.R.attr#descendantFocusability}
          attribute's value can be found in the {@link #RecyclerView} array.
          @attr name android:descendantFocusability
        */
        public static final int RecyclerView_android_descendantFocusability = 1;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#orientation}
          attribute's value can be found in the {@link #RecyclerView} array.
          @attr name android:orientation
        */
        public static final int RecyclerView_android_orientation = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollEnabled}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:fastScrollEnabled
        */
        public static final int RecyclerView_fastScrollEnabled = 6;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollHorizontalThumbDrawable}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.calculator2:fastScrollHorizontalThumbDrawable
        */
        public static final int RecyclerView_fastScrollHorizontalThumbDrawable = 9;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollHorizontalTrackDrawable}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.calculator2:fastScrollHorizontalTrackDrawable
        */
        public static final int RecyclerView_fastScrollHorizontalTrackDrawable = 10;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollVerticalThumbDrawable}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.calculator2:fastScrollVerticalThumbDrawable
        */
        public static final int RecyclerView_fastScrollVerticalThumbDrawable = 7;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollVerticalTrackDrawable}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.calculator2:fastScrollVerticalTrackDrawable
        */
        public static final int RecyclerView_fastScrollVerticalTrackDrawable = 8;
        /**
          <p>
          @attr description
           Class name of the Layout Manager to be used.
        <p/>
        The class must extend android.support.v7.widget.RecyclerView$LayoutManager
        and have either a default constructor or constructor with the signature
        (android.content.Context, android.util.AttributeSet, int, int).
         <p/>
         If the name starts with a '.', application package is prefixed.
         Else, if the name contains a '.', the classname is assumed to be a full class name.
         Else, the recycler view package name (android.support.v7.widget) is prefixed. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.calculator2:layoutManager
        */
        public static final int RecyclerView_layoutManager = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#reverseLayout}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:reverseLayout
        */
        public static final int RecyclerView_reverseLayout = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#spanCount}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:spanCount
        */
        public static final int RecyclerView_spanCount = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#stackFromEnd}
          attribute's value can be found in the {@link #RecyclerView} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.calculator2:stackFromEnd
        */
        public static final int RecyclerView_stackFromEnd = 5;
    };
}
