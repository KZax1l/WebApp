/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.inputmethod.latin;

public final class R {
  public static final class anim {
    public static final int alt_code_key_while_typing_fadein=0x7f010000;
    public static final int alt_code_key_while_typing_fadeout=0x7f010001;
    public static final int key_preview_dismiss_holo=0x7f010002;
    public static final int key_preview_dismiss_lxx=0x7f010003;
    public static final int key_preview_show_up_holo=0x7f010004;
    public static final int key_preview_show_up_lxx=0x7f010005;
    public static final int language_on_spacebar_fadeout=0x7f010006;
  }
  public static final class array {
    /**
     * The array of the auto correction threshold settings values.
     */
    public static final int auto_correction_threshold_mode_indexes=0x7f020000;
    /**
     * The array of the human readable auto correction threshold settings entries.
     */
    public static final int auto_correction_threshold_modes=0x7f020001;
    /**
     * The array of auto correction threshold values.
     */
    public static final int auto_correction_threshold_values=0x7f020002;
    public static final int emoji_eight_activity=0x7f020003;
    public static final int emoji_eight_animals_nature=0x7f020004;
    public static final int emoji_eight_flags=0x7f020005;
    public static final int emoji_eight_food_drink=0x7f020006;
    public static final int emoji_eight_objects=0x7f020007;
    public static final int emoji_eight_smiley_people=0x7f020008;
    public static final int emoji_eight_smiley_people_boring=0x7f020009;
    public static final int emoji_eight_symbols=0x7f02000a;
    public static final int emoji_eight_travel_places=0x7f02000b;
    public static final int emoji_emoticons=0x7f02000c;
    public static final int emoji_faces=0x7f02000d;
    public static final int emoji_flags=0x7f02000e;
    public static final int emoji_nature=0x7f02000f;
    public static final int emoji_objects=0x7f020010;
    public static final int emoji_places=0x7f020011;
    /**
     * Dummy codeArrays for recents emoji keyboard.
     * Do not remove these keys, because they are used as a template.
     */
    public static final int emoji_recents=0x7f020012;
    public static final int emoji_symbols=0x7f020013;
    /**
     * Build condition,keyboard_height_in_dp
     * Build condition,keyboard_height_in_dp
     */
    public static final int keyboard_heights=0x7f020014;
    /**
     * Key codes of hardware keys that can be used to toggle the Emoji layout.
     * Each array defines a comma-separated tuple containing:
     * 1. Key code constant from android.view.KeyEvent
     * 2. Meta mask (if any) from android.view.KeyEvent
     * Used in EmojiAltPhysicalKeyDetector and KeyboardSwitcher.
     */
    public static final int keyboard_switcher_emoji=0x7f020015;
    /**
     * Key codes of hardware keys that can be used to toggle the Symbols (Shifted) layout.
     * Each array defines a comma-separated tuple containing:
     * 1. Key code constant from android.view.KeyEvent
     * 2. Meta mask (if any) from android.view.KeyEvent
     * Used in EmojiAltPhysicalKeyDetector and KeyboardSwitcher.
     */
    public static final int keyboard_switcher_symbols_shifted=0x7f020016;
    /**
     * An element must be a keyboard theme id of
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.
     */
    public static final int keyboard_theme_ids=0x7f020017;
    /**
     * For keyboard color scheme option dialog.
     */
    public static final int keyboard_theme_names=0x7f020018;
    /**
     * Build condition,duration_in_milliseconds
     */
    public static final int keypress_vibration_durations=0x7f020019;
    /**
     * Build condition,volume
     */
    public static final int keypress_volumes=0x7f02001a;
    /**
     * Compatibility map from subtypeLocale:subtypeExtraValue to keyboardLayoutSet
     */
    public static final int locale_and_extra_value_to_keyboard_layout_set_map=0x7f02001b;
    public static final int phantom_sudden_move_event_device_list=0x7f02001c;
    /**
     * Predefined keyboard layout display names
     */
    public static final int predefined_layout_display_names=0x7f02001d;
    /**
     * Predefined keyboard layouts for additional subtype
     */
    public static final int predefined_layouts=0x7f02001e;
    /**
     * Predefined subtypes (language:layout[:extraValue])
     */
    public static final int predefined_subtypes=0x7f02001f;
    /**
     * Subtype locale whose name should be displayed in Locale.ROOT.
     */
    public static final int subtype_locale_displayed_in_root_locale=0x7f020020;
    /**
     * Subtype locale display name exceptions.
     * For each exception, there should be related string resources for display name that may have
     * explicit keyboard layout. The string resource name must be "subtype_<locale>" or
     * "subtype_with_layout_<locale>. Please refer to strings.xml for these resources.
     */
    public static final int subtype_locale_exception_keys=0x7f020021;
    /**
     * Note that correctionX is obsolete (See com.android.inputmethod.keyboard.internal.TouchPositionCorrection)
     * An entry of the touch_position_correction word should be:
     * 1. correctionX: (touch_center_x - hitbox_center_x) / hitbox_width
     * 2. correctionY: (touch_center_y - hitbox_center_y) / hitbox_height
     * 3. correctionR: sweet_spot_radius / sqrt(hitbox_width^2 + hitbox_height^2)
     */
    public static final int touch_position_correction_data_default=0x7f020022;
    public static final int touch_position_correction_data_holo=0x7f020023;
  }
  public static final class attr {
    /**
     * The keys to display in the more keys keyboard in addition to moreKeys.
     * The additional more keys are inserted at the '%' markers in the moreKeys if any.
     * They are inserted at the head of moreKeys if none.
     * If there are remaining entries of additionalMoreKeys even after all '%' markers have
     * been replaced, those remaining entries are appended at the end of moreKeys.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int additionalMoreKeys=0x7f030000;
    /**
     * Allow redundant more keys when they are in the base layout. true by default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowRedundantMoreKeys=0x7f030001;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int alphaObsoleted=0x7f030002;
    /**
     * The alternate unicode value that this key outputs while typing.
     * Code value represented in hexadecimal prefixed with "0x" or code value reference using
     * "!code/<code_name>" notation.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int altCode=0x7f030003;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int altCodeKeyWhileTypingFadeinAnimator=0x7f030004;
    /**
     * Fadeout and fadein animator for altCodeWhileTyping keys.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int altCodeKeyWhileTypingFadeoutAnimator=0x7f030005;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int backgroundDimAlpha=0x7f030006;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>action</td><td>5</td><td></td></tr>
     * <tr><td>empty</td><td>0</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#BACKGROUND_TYPE_NORMAL} etc.</td></tr>
     * <tr><td>functional</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>1</td><td></td></tr>
     * <tr><td>spacebar</td><td>6</td><td></td></tr>
     * <tr><td>stickyOff</td><td>3</td><td></td></tr>
     * <tr><td>stickyOn</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int backgroundType=0x7f030007;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int categoryIndicatorBackground=0x7f030008;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int categoryIndicatorDrawable=0x7f030009;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int categoryIndicatorEnabled=0x7f03000a;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int categoryPageIndicatorBackground=0x7f03000b;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int categoryPageIndicatorColor=0x7f03000c;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int centerSuggestionPercentile=0x7f03000d;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clobberSettingsKey=0x7f03000e;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int codesArray=0x7f03000f;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorAutoCorrect=0x7f030010;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorSuggested=0x7f030011;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorTypedWord=0x7f030012;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorValidTypedWord=0x7f030013;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int countryCode=0x7f030014;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int divider=0x7f030015;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int elementKeyboard=0x7f030016;
    /**
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alphabet</td><td>0</td><td></td></tr>
     * <tr><td>alphabetAutomaticShifted</td><td>2</td><td></td></tr>
     * <tr><td>alphabetManualShifted</td><td>1</td><td></td></tr>
     * <tr><td>alphabetShiftLockShifted</td><td>4</td><td></td></tr>
     * <tr><td>alphabetShiftLocked</td><td>3</td><td></td></tr>
     * <tr><td>emojiCategory1</td><td>b</td><td></td></tr>
     * <tr><td>emojiCategory10</td><td>14</td><td></td></tr>
     * <tr><td>emojiCategory11</td><td>15</td><td></td></tr>
     * <tr><td>emojiCategory12</td><td>16</td><td></td></tr>
     * <tr><td>emojiCategory13</td><td>17</td><td></td></tr>
     * <tr><td>emojiCategory14</td><td>18</td><td></td></tr>
     * <tr><td>emojiCategory15</td><td>19</td><td></td></tr>
     * <tr><td>emojiCategory16</td><td>1a</td><td></td></tr>
     * <tr><td>emojiCategory2</td><td>c</td><td></td></tr>
     * <tr><td>emojiCategory3</td><td>d</td><td></td></tr>
     * <tr><td>emojiCategory4</td><td>e</td><td></td></tr>
     * <tr><td>emojiCategory5</td><td>f</td><td></td></tr>
     * <tr><td>emojiCategory6</td><td>10</td><td></td></tr>
     * <tr><td>emojiCategory7</td><td>11</td><td></td></tr>
     * <tr><td>emojiCategory8</td><td>12</td><td></td></tr>
     * <tr><td>emojiCategory9</td><td>13</td><td></td></tr>
     * <tr><td>emojiRecents</td><td>a</td><td></td></tr>
     * <tr><td>number</td><td>9</td><td></td></tr>
     * <tr><td>phone</td><td>7</td><td></td></tr>
     * <tr><td>phoneSymbols</td><td>8</td><td></td></tr>
     * <tr><td>symbols</td><td>5</td><td></td></tr>
     * <tr><td>symbolsShifted</td><td>6</td><td></td></tr>
     * </table>
     */
    public static final int elementName=0x7f030017;
    /**
     * EmojiPalettesView style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int emojiPalettesViewStyle=0x7f030018;
    /**
     * Enable proximity characters correction. Disabled by default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int enableProximityCharsCorrection=0x7f030019;
    /**
     * Background image for the functional key. This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible
     * states: normal, pressed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int functionalKeyBackground=0x7f03001a;
    /**
     * Color to use for the label in a key that has followFunctionalTextColor keyLabelFlags.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int functionalTextColor=0x7f03001b;
    /**
     * Static threshold for starting gesture detection (keyWidth%/sec)
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gestureDetectFastMoveSpeedThreshold=0x7f03001c;
    /**
     * Distance based threshold values for gesture detection (keyWidth%/sec)
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gestureDynamicDistanceThresholdFrom=0x7f03001d;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gestureDynamicDistanceThresholdTo=0x7f03001e;
    /**
     * Dynamic threshold for gesture after fast typing (msec)
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureDynamicThresholdDecayDuration=0x7f03001f;
    /**
     * Time based threshold values for gesture detection (msec)
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureDynamicTimeThresholdFrom=0x7f030020;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureDynamicTimeThresholdTo=0x7f030021;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int gestureFloatingPreviewColor=0x7f030022;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureFloatingPreviewHorizontalPadding=0x7f030023;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureFloatingPreviewRoundRadius=0x7f030024;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int gestureFloatingPreviewTextColor=0x7f030025;
    /**
     * Delay after gesture input and gesture floating preview text dismissing in millisecond
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureFloatingPreviewTextLingerTimeout=0x7f030026;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureFloatingPreviewTextOffset=0x7f030027;
    /**
     * Attributes for GestureFloatingPreviewText
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureFloatingPreviewTextSize=0x7f030028;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureFloatingPreviewVerticalPadding=0x7f030029;
    /**
     * Parameters for gesture recognition (msec) and (keyWidth%/sec)
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureRecognitionMinimumTime=0x7f03002a;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gestureRecognitionSpeedThreshold=0x7f03002b;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureRecognitionUpdateTime=0x7f03002c;
    /**
     * Parameter for gesture sampling (keyWidth%/sec)
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gestureSamplingMinimumDistance=0x7f03002d;
    /**
     * Static threshold for gesture after fast typing (msec)
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureStaticTimeThresholdAfterFastTyping=0x7f03002e;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailBodyRatio=0x7f03002f;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int gestureTrailColor=0x7f030030;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureTrailEndWidth=0x7f030031;
    /**
     * Duration while gesture trail is fading out in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailFadeoutDuration=0x7f030032;
    /**
     * Delay after gesture trail starts fading out in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailFadeoutStartDelay=0x7f030033;
    /**
     * Maximum angular threshold between gesture trail interpolation segments in degree.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailMaxInterpolationAngularThreshold=0x7f030034;
    /**
     * Maximum distance threshold between gesture trail interpolation segments.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureTrailMaxInterpolationDistanceThreshold=0x7f030035;
    /**
     * Maximum number of gesture trail interpolation segments.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailMaxInterpolationSegments=0x7f030036;
    /**
     * Minimum distance between gesture trail sampling points.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureTrailMinSamplingDistance=0x7f030037;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailShadowRatio=0x7f030038;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int gestureTrailStartWidth=0x7f030039;
    /**
     * Interval of updating gesture trail in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int gestureTrailUpdateInterval=0x7f03003a;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hasShortcutKey=0x7f03003b;
    /**
     * Default horizontal gap between keys, in the proportion of keyboard width.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int horizontalGap=0x7f03003c;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconDeleteKey=0x7f03003d;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconDoneKey=0x7f03003e;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiActionKey=0x7f03003f;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory10Tab=0x7f030040;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory11Tab=0x7f030041;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory12Tab=0x7f030042;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory13Tab=0x7f030043;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory14Tab=0x7f030044;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory15Tab=0x7f030045;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory16Tab=0x7f030046;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory1Tab=0x7f030047;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory2Tab=0x7f030048;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory3Tab=0x7f030049;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory4Tab=0x7f03004a;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory5Tab=0x7f03004b;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory6Tab=0x7f03004c;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory7Tab=0x7f03004d;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory8Tab=0x7f03004e;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiCategory9Tab=0x7f03004f;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiNormalKey=0x7f030050;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEmojiRecentsTab=0x7f030051;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconEnterKey=0x7f030052;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconGoKey=0x7f030053;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconImeKey=0x7f030054;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconLanguageSwitchKey=0x7f030055;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconNextKey=0x7f030056;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconPreviousKey=0x7f030057;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconSearchKey=0x7f030058;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconSendKey=0x7f030059;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconSettingsKey=0x7f03005a;
    /**
     * Icon set for key top and key preview. These should be aligned with
     * {@link com.android.inputmethod.keyboard.internal.KeyboardIconsSet#NAMES_AND_ATTR_IDS}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconShiftKey=0x7f03005b;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconShiftKeyShifted=0x7f03005c;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconShortcutKey=0x7f03005d;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconShortcutKeyDisabled=0x7f03005e;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconSpaceKey=0x7f03005f;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconSpaceKeyForNumberLayout=0x7f030060;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconTabKey=0x7f030061;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconZwjKey=0x7f030062;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int iconZwnjKey=0x7f030063;
    /**
     * Ignore special key timeout while typing in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int ignoreAltCodeKeyTimeout=0x7f030064;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionCustomLabel</td><td>100</td><td>This should be aligned with
     * {@link com.android.inputmethod.latin.utils.InputTypeUtils#IME_ACTION_CUSTOM_LABEL}.</td></tr>
     * <tr><td>actionDone</td><td>6</td><td></td></tr>
     * <tr><td>actionGo</td><td>2</td><td></td></tr>
     * <tr><td>actionNext</td><td>5</td><td></td></tr>
     * <tr><td>actionNone</td><td>1</td><td></td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td></td></tr>
     * <tr><td>actionSearch</td><td>3</td><td></td></tr>
     * <tr><td>actionSend</td><td>4</td><td></td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>This should be aligned with
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO} etc.</td></tr>
     * </table>
     */
    public static final int imeAction=0x7f030065;
    /**
     * InputView style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int inputViewStyle=0x7f030066;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int isIconDefined=0x7f030067;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isMultiLine=0x7f030068;
    /**
     * Enable split keyboard layout. Disabled by default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isSplitLayout=0x7f030069;
    /**
     * The key action flags.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>altCodeWhileTyping</td><td>4</td><td></td></tr>
     * <tr><td>enableLongPress</td><td>8</td><td></td></tr>
     * <tr><td>isRepeatable</td><td>1</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#ACTION_FLAGS_IS_REPEATABLE} etc.</td></tr>
     * <tr><td>noKeyPreview</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int keyActionFlags=0x7f03006a;
    /**
     * Background image for the key. This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible states:
     * normal, pressed, checkable, checkable+pressed, checkable+checked,
     * checkable+checked+pressed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyBackground=0x7f03006b;
    /**
     * The hint label to display on the key in conjunction with the label.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keyHintLabel=0x7f03006c;
    /**
     * Key hint label color
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyHintLabelColor=0x7f03006d;
    /**
     * The hint label's horizontal offset to the center of the key. Negative is to left and
     * positive is to right. The value is in proportion of the width of
     * {@link com.android.inputmethod.latin.utils.TypefaceUtils#KEY_LABEL_REFERENCE_CHAR}.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyHintLabelOffCenterRatio=0x7f03006e;
    /**
     * Size of the text for hint label, in the proportion of key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyHintLabelRatio=0x7f03006f;
    /**
     * The vertical adjustment of key hint label in proportion to its height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyHintLabelVerticalAdjustment=0x7f030070;
    /**
     * Key hint letter (= one character hint label) color
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyHintLetterColor=0x7f030071;
    /**
     * Right padding of hint letter to the edge of the key.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyHintLetterPadding=0x7f030072;
    /**
     * Size of the text for hint letter (= one character hint label), in the proportion of
     * key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyHintLetterRatio=0x7f030073;
    /**
     * Key detection hysteresis distance.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyHysteresisDistance=0x7f030074;
    /**
     * Key detection hysteresis distance for shift/symbols sliding input.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyHysteresisDistanceForSlidingModifier=0x7f030075;
    /**
     * The icon for disabled key
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keyIconDisabled=0x7f030076;
    /**
     * The key label flags.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignHintLabelToBottom</td><td>2</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#LABEL_FLAGS_FONT_NORMAL} etc.</td></tr>
     * <tr><td>alignIconToBottom</td><td>4</td><td></td></tr>
     * <tr><td>alignLabelOffCenter</td><td>8</td><td></td></tr>
     * <tr><td>autoScale</td><td>c000</td><td>The autoScale value implies autoXScale bit on to optimize scaling code path.</td></tr>
     * <tr><td>autoXScale</td><td>4000</td><td></td></tr>
     * <tr><td>disableAdditionalMoreKeys</td><td>80000000</td><td>If true, disable additionalMoreKeys.</td></tr>
     * <tr><td>disableKeyHintLabel</td><td>40000000</td><td>If true, disable keyHintLabel.</td></tr>
     * <tr><td>followFunctionalTextColor</td><td>80000</td><td>If true, use functionalTextColor instead of ketTextColor to drawing the label on
     * the key</td></tr>
     * <tr><td>followKeyHintLabelRatio</td><td>140</td><td></td></tr>
     * <tr><td>followKeyLabelRatio</td><td>c0</td><td></td></tr>
     * <tr><td>followKeyLargeLetterRatio</td><td>40</td><td></td></tr>
     * <tr><td>followKeyLetterRatio</td><td>80</td><td></td></tr>
     * <tr><td>fontDefault</td><td>30</td><td></td></tr>
     * <tr><td>fontMonoSpace</td><td>20</td><td></td></tr>
     * <tr><td>fontNormal</td><td>10</td><td></td></tr>
     * <tr><td>fromCustomActionLabel</td><td>40000</td><td>If true, use EditorInfo.actionLabel for the key label.</td></tr>
     * <tr><td>hasHintLabel</td><td>800</td><td></td></tr>
     * <tr><td>hasPopupHint</td><td>200</td><td></td></tr>
     * <tr><td>hasShiftedLetterHint</td><td>400</td><td></td></tr>
     * <tr><td>keepBackgroundAspectRatio</td><td>100000</td><td>Keep aspect ratio of key background.</td></tr>
     * <tr><td>preserveCase</td><td>10000</td><td>If true, character case of code, altCode, moreKeys, keyOutputText, keyLabel,
     * or keyHintLabel will never be subject to change.</td></tr>
     * <tr><td>shiftedLetterActivated</td><td>20000</td><td>If true, use keyShiftedLetterHintActivatedColor for the shifted letter hint and
     * keyTextInactivatedColor for the primary key top label.</td></tr>
     * </table>
     */
    public static final int keyLabelFlags=0x7f030077;
    /**
     * The label's horizontal offset to the center of the key. Negative is to left and
     * positive is to right. The value is in proportion of the width of
     * {@link com.android.inputmethod.latin.utils.TypefaceUtils#KEY_LABEL_REFERENCE_CHAR}.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyLabelOffCenterRatio=0x7f030078;
    /**
     * Size of the text for keys with multiple letters. If specified as fraction, the text
     * size is measured in the proportion of key height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyLabelSize=0x7f030079;
    /**
     * Large size of the text for one letter keys, in the proportion of key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyLargeLetterRatio=0x7f03007a;
    /**
     * Size of the text for one letter keys. If specified as fraction, the text size is
     * measured in the proportion of key height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyLetterSize=0x7f03007b;
    /**
     * Popup hint letter string
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keyPopupHintLetter=0x7f03007c;
    /**
     * Bottom padding of popup hint letter to the edge of the key.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyPopupHintLetterPadding=0x7f03007d;
    /**
     * Background resource for key press feedback.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyPreviewBackground=0x7f03007e;
    /**
     * Key preview dismiss animator
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyPreviewDismissAnimator=0x7f03007f;
    /**
     * Height of the key press feedback popup.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyPreviewHeight=0x7f030080;
    /**
     * Delay after key releasing and key press feedback dismissing in millisecond
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int keyPreviewLingerTimeout=0x7f030081;
    /**
     * Vertical offset of the key press feedback from the key.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyPreviewOffset=0x7f030082;
    /**
     * Key preview show up animator
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyPreviewShowUpAnimator=0x7f030083;
    /**
     * The text color for key press feedback.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyPreviewTextColor=0x7f030084;
    /**
     * Size of the text for key press feedback popup, in the proportion of key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyPreviewTextRatio=0x7f030085;
    /**
     * Key repeat interval in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int keyRepeatInterval=0x7f030086;
    /**
     * Key repeat start timeout
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int keyRepeatStartTimeout=0x7f030087;
    /**
     * Enable key selection by dragging finger
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int keySelectionByDraggingFinger=0x7f030088;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyShiftedLetterHintActivatedColor=0x7f030089;
    /**
     * Shifted letter hint colors
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyShiftedLetterHintInactivatedColor=0x7f03008a;
    /**
     * Right padding of shifted letter hint to the edge of the key.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int keyShiftedLetterHintPadding=0x7f03008b;
    /**
     * Size of the text for shifted letter hint, in the proportion of key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyShiftedLetterHintRatio=0x7f03008c;
    /**
     * The label, icon to display on the key. And code, outputText of the key.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keySpec=0x7f03008d;
    /**
     * The key style to specify a set of key attributes defined by <key_style/>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keyStyle=0x7f03008e;
    /**
     * Color to use for the label in a key.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyTextColor=0x7f03008f;
    /**
     * Color to use for the label in a key when in inactivated state.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyTextInactivatedColor=0x7f030090;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int keyTextShadowColor=0x7f030091;
    /**
     * Blur radius of key text shadow.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int keyTextShadowRadius=0x7f030092;
    /**
     * Key top visual attributes
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bold</td><td>1</td><td></td></tr>
     * <tr><td>boldItalic</td><td>3</td><td></td></tr>
     * <tr><td>italic</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td>This should be aligned with {@link android.graphics.Typeface#NORMAL} etc.</td></tr>
     * </table>
     */
    public static final int keyTypeface=0x7f030093;
    /**
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.internal.KeyboardRow#KEYWIDTH_FILL_RIGHT}.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fillRight</td><td>ffffffff</td><td></td></tr>
     * </table>
     */
    public static final int keyWidth=0x7f030094;
    /**
     * The X-coordinate of upper right corner of this key including horizontal gap, in the
     * proportion of keyboard width.
     * If the value is negative, the origin is the right edge of the keyboard.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyXPos=0x7f030095;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyboardBottomPadding=0x7f030096;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyboardLayout=0x7f030097;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int keyboardLayoutSet=0x7f030098;
    /**
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alphabet</td><td>0</td><td></td></tr>
     * <tr><td>alphabetAutomaticShifted</td><td>2</td><td></td></tr>
     * <tr><td>alphabetManualShifted</td><td>1</td><td></td></tr>
     * <tr><td>alphabetShiftLockShifted</td><td>4</td><td></td></tr>
     * <tr><td>alphabetShiftLocked</td><td>3</td><td></td></tr>
     * <tr><td>emojiCategory1</td><td>b</td><td></td></tr>
     * <tr><td>emojiCategory10</td><td>14</td><td></td></tr>
     * <tr><td>emojiCategory11</td><td>15</td><td></td></tr>
     * <tr><td>emojiCategory12</td><td>16</td><td></td></tr>
     * <tr><td>emojiCategory13</td><td>17</td><td></td></tr>
     * <tr><td>emojiCategory14</td><td>18</td><td></td></tr>
     * <tr><td>emojiCategory15</td><td>19</td><td></td></tr>
     * <tr><td>emojiCategory16</td><td>1a</td><td></td></tr>
     * <tr><td>emojiCategory2</td><td>c</td><td></td></tr>
     * <tr><td>emojiCategory3</td><td>d</td><td></td></tr>
     * <tr><td>emojiCategory4</td><td>e</td><td></td></tr>
     * <tr><td>emojiCategory5</td><td>f</td><td></td></tr>
     * <tr><td>emojiCategory6</td><td>10</td><td></td></tr>
     * <tr><td>emojiCategory7</td><td>11</td><td></td></tr>
     * <tr><td>emojiCategory8</td><td>12</td><td></td></tr>
     * <tr><td>emojiCategory9</td><td>13</td><td></td></tr>
     * <tr><td>emojiRecents</td><td>a</td><td></td></tr>
     * <tr><td>number</td><td>9</td><td></td></tr>
     * <tr><td>phone</td><td>7</td><td></td></tr>
     * <tr><td>phoneSymbols</td><td>8</td><td></td></tr>
     * <tr><td>symbols</td><td>5</td><td></td></tr>
     * <tr><td>symbolsShifted</td><td>6</td><td></td></tr>
     * </table>
     */
    public static final int keyboardLayoutSetElement=0x7f030099;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyboardLeftPadding=0x7f03009a;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyboardRightPadding=0x7f03009b;
    /**
     * Keyboard style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyboardStyle=0x7f03009c;
    /**
     * This should be aligned with Keyboard.themeId and
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ICS</td><td>0</td><td></td></tr>
     * <tr><td>KLP</td><td>2</td><td></td></tr>
     * <tr><td>LXXDark</td><td>4</td><td></td></tr>
     * <tr><td>LXXLight</td><td>3</td><td></td></tr>
     * </table>
     */
    public static final int keyboardTheme=0x7f03009d;
    /**
     * Keyboard top, bottom, left, right edges paddings, in propotion of keyboard height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keyboardTopPadding=0x7f03009e;
    /**
     * KeyboardView style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyboardViewStyle=0x7f03009f;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int languageCode=0x7f0300a0;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int languageOnSpacebarFadeoutAnimator=0x7f0300a1;
    /**
     * Fadeout animator for spacebar language label.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int languageOnSpacebarFinalAlpha=0x7f0300a2;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int languageOnSpacebarTextColor=0x7f0300a3;
    /**
     * Size of the text for spacebar language label, in the proportion of key height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int languageOnSpacebarTextRatio=0x7f0300a4;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int languageOnSpacebarTextShadowColor=0x7f0300a5;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int languageOnSpacebarTextShadowRadius=0x7f0300a6;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int languageSwitchKeyEnabled=0x7f0300a7;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int localeCode=0x7f0300a8;
    /**
     * Long press timeout of shift key to shift lock in millisecond.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int longPressShiftLockTimeout=0x7f0300a9;
    /**
     * MainKeyboardView style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int mainKeyboardViewStyle=0x7f0300aa;
    /**
     * Maximum column of more keys keyboard
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxMoreKeysColumn=0x7f0300ab;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxMoreSuggestionsRow=0x7f0300ac;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxValue=0x7f0300ad;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int minMoreSuggestionsWidth=0x7f0300ae;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minValue=0x7f0300af;
    /**
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#MODE_TEXT} etc.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>email</td><td>2</td><td></td></tr>
     * <tr><td>im</td><td>3</td><td></td></tr>
     * <tr><td>number</td><td>5</td><td></td></tr>
     * <tr><td>phone</td><td>4</td><td></td></tr>
     * <tr><td>text</td><td>0</td><td></td></tr>
     * <tr><td>url</td><td>1</td><td></td></tr>
     * </table>
     */
    public static final int mode=0x7f0300b0;
    /**
     * The keys to display in the more keys keyboard.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int moreKeys=0x7f0300b1;
    /**
     * Layout resource for more keys keyboard of action key
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysKeyboardForActionLayout=0x7f0300b2;
    /**
     * Layout resource for more keys keyboard
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysKeyboardLayout=0x7f0300b3;
    /**
     * MoreKeysKeyboard style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysKeyboardStyle=0x7f0300b4;
    /**
     * MoreKeysKeyboardView style for action key
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysKeyboardViewForActionStyle=0x7f0300b5;
    /**
     * MoreKeysKeyboardView style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysKeyboardViewStyle=0x7f0300b6;
    /**
     * More keys keyboard layout template
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreKeysTemplate=0x7f0300b7;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int navigateNext=0x7f0300b8;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int navigatePrevious=0x7f0300b9;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int parentStyle=0x7f0300ba;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int passwordInput=0x7f0300bb;
    /**
     * Default height of a row (key height + vertical gap), in pixels or in the proportion of
     * keyboard height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int rowHeight=0x7f0300bc;
    /**
     * More keys keyboard will shown at touched point.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showMoreKeysKeyboardAtTouchedPoint=0x7f0300bd;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int slidingKeyInputPreviewBodyRatio=0x7f0300be;
    /**
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int slidingKeyInputPreviewColor=0x7f0300bf;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int slidingKeyInputPreviewShadowRatio=0x7f0300c0;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int slidingKeyInputPreviewWidth=0x7f0300c1;
    /**
     * Background image for the spacebar.  This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible
     * states: normal, pressed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int spacebarBackground=0x7f0300c2;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int spacebarIconWidthRatio=0x7f0300c3;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_has_morekeys=0x7f0300c4;
    /**
     * Key preview background states
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_left_edge=0x7f0300c5;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_right_edge=0x7f0300c6;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int stepValue=0x7f0300c7;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int styleName=0x7f0300c8;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>autoCorrectBold</td><td>1</td><td>This should be aligned with
     * {@link com.android.inputmethod.latin.suggestions.SuggestionStripLayoutHelper.AUTO_CORRECT_BOLD} etc.</td></tr>
     * <tr><td>autoCorrectUnderline</td><td>2</td><td></td></tr>
     * <tr><td>validTypedWordBold</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int suggestionStripOptions=0x7f0300c9;
    /**
     * Suggestions strip style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int suggestionStripViewStyle=0x7f0300ca;
    /**
     * Suggestion word style
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int suggestionWordStyle=0x7f0300cb;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int suggestionsCountInStrip=0x7f0300cc;
    /**
     * This should be aligned with
     * {@link com.android.inputmethod.latin.utils.ScriptUtils#SCRIPT_ARABIC} etc.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>arabic</td><td>0</td><td></td></tr>
     * <tr><td>armenian</td><td>1</td><td></td></tr>
     * <tr><td>bengali</td><td>2</td><td></td></tr>
     * <tr><td>cyrillic</td><td>3</td><td></td></tr>
     * <tr><td>devanagari</td><td>4</td><td></td></tr>
     * <tr><td>georgian</td><td>5</td><td></td></tr>
     * <tr><td>greek</td><td>6</td><td></td></tr>
     * <tr><td>hebrew</td><td>7</td><td></td></tr>
     * <tr><td>kannada</td><td>8</td><td></td></tr>
     * <tr><td>khmer</td><td>9</td><td></td></tr>
     * <tr><td>lao</td><td>a</td><td></td></tr>
     * <tr><td>latin</td><td>b</td><td></td></tr>
     * <tr><td>malayalam</td><td>c</td><td></td></tr>
     * <tr><td>sinhala</td><td>e</td><td>Myanmar is disabled. <enum name="myanmar" value="13" /></td></tr>
     * <tr><td>tamil</td><td>f</td><td></td></tr>
     * <tr><td>telugu</td><td>10</td><td></td></tr>
     * <tr><td>thai</td><td>11</td><td></td></tr>
     * </table>
     */
    public static final int supportedScript=0x7f0300cd;
    /**
     * Indicates if the keyboard layout supports being split or not. false by default
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsSplitLayout=0x7f0300ce;
    /**
     * Suppress showing key preview duration after batch input in millisecond
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int suppressKeyPreviewAfterBatchInputDuration=0x7f0300cf;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textsArray=0x7f0300d0;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ICS</td><td>0</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.</td></tr>
     * <tr><td>KLP</td><td>2</td><td></td></tr>
     * <tr><td>LXXDark</td><td>4</td><td></td></tr>
     * <tr><td>LXXLight</td><td>3</td><td></td></tr>
     * </table>
     */
    public static final int themeId=0x7f0300d1;
    /**
     * Touch noise threshold distance in millimeter
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int touchNoiseThresholdDistance=0x7f0300d2;
    /**
     * Touch noise threshold time in millisecond
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int touchNoiseThresholdTime=0x7f0300d3;
    /**
     * Touch position correction
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int touchPositionCorrectionData=0x7f0300d4;
    /**
     * Amount to offset the touch Y coordinate by, for bias correction.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int verticalCorrection=0x7f0300d5;
    /**
     * Default vertical gap between rows of keys, in the proportion of keyboard height.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int verticalGap=0x7f0300d6;
    /**
     * Visual insets, in the proportion of keyboard width.
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int visualInsetsLeft=0x7f0300d7;
    /**
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int visualInsetsRight=0x7f0300d8;
  }
  public static final class bool {
    /**
     * Settings for the dictionary pack
     */
    public static final int allow_over_metered=0x7f040000;
    public static final int allow_over_roaming=0x7f040001;
    public static final int config_block_potentially_offensive=0x7f040002;
    /**
     * Whether or not Popup on key press is enabled by default
     * Whether or not Popup on key press is enabled by default
     */
    public static final int config_default_key_preview_popup=0x7f040003;
    /**
     * Default value for next word prediction: after entering a word and a space only, should we
     * look at input history to suggest a hopefully helpful suggestions for the next word?
     */
    public static final int config_default_next_word_prediction=0x7f040004;
    /**
     * Whether phrase gestures are enabled by default
     */
    public static final int config_default_phrase_gesture_enabled=0x7f040005;
    public static final int config_default_sound_enabled=0x7f040006;
    public static final int config_default_vibration_enabled=0x7f040007;
    public static final int config_enable_show_key_preview_popup_option=0x7f040008;
    public static final int config_enable_show_voice_key_option=0x7f040009;
    public static final int config_gesture_input_enabled_by_build_config=0x7f04000a;
    public static final int config_key_selection_by_dragging_finger=0x7f04000b;
    /**
     * Showing more keys keyboard, just above the touched point if true, aligned to the key if
     * false
     * Showing more keys keyboard, just above the touched point if true, aligned to the key if
     * false
     */
    public static final int config_show_more_keys_keyboard_at_touched_point=0x7f04000c;
    public static final int config_use_fullscreen_mode=0x7f04000d;
    /**
     * Whether this language uses spaces between words
     * Whether this language uses spaces between words
     * Whether this language uses spaces between words
     * Whether this language uses spaces between words
     */
    public static final int current_language_has_spaces=0x7f04000e;
    public static final int dict_downloads_visible_in_download_UI=0x7f04000f;
    public static final int display_notification_for_auto_update=0x7f040010;
    public static final int display_notification_for_user_requested_update=0x7f040011;
    /**
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     * Whether this input method should be used as the default for a locale. Override it
     * for supported languages.
     */
    public static final int im_is_default=0x7f040012;
    public static final int metadata_downloads_visible_in_download_UI=0x7f040013;
  }
  public static final class color {
    public static final int auto_correct_color_lxx_dark=0x7f050000;
    public static final int auto_correct_color_lxx_light=0x7f050001;
    public static final int emoji_tab_page_indicator_background_holo=0x7f050002;
    public static final int emoji_tab_page_indicator_background_lxx_dark=0x7f050003;
    public static final int emoji_tab_page_indicator_background_lxx_light=0x7f050004;
    public static final int gesture_floating_preview_color_holo=0x7f050005;
    public static final int gesture_floating_preview_color_lxx_dark=0x7f050006;
    public static final int gesture_floating_preview_color_lxx_light=0x7f050007;
    public static final int gesture_trail_color_lxx_dark=0x7f050008;
    public static final int gesture_trail_color_lxx_light=0x7f050009;
    /**
     * android:color/holo_blue_light value is #FF33B5E5
     */
    public static final int highlight_color_ics=0x7f05000a;
    /**
     * Color resources for KLP theme. Base color = F0F0F0
     */
    public static final int highlight_color_klp=0x7f05000b;
    public static final int highlight_color_lxx_dark=0x7f05000c;
    public static final int highlight_color_lxx_light=0x7f05000d;
    public static final int highlight_translucent_color_ics=0x7f05000e;
    public static final int highlight_translucent_color_klp=0x7f05000f;
    public static final int key_background_lxx_dark=0x7f050010;
    public static final int key_background_lxx_light=0x7f050011;
    public static final int key_background_pressed_lxx_dark=0x7f050012;
    public static final int key_background_pressed_lxx_light=0x7f050013;
    public static final int key_functional_text_color_lxx_dark=0x7f050014;
    public static final int key_functional_text_color_lxx_light=0x7f050015;
    public static final int key_hint_label_color_holo=0x7f050016;
    public static final int key_hint_letter_color_holo=0x7f050017;
    public static final int key_hint_letter_color_lxx_dark=0x7f050018;
    public static final int key_hint_letter_color_lxx_light=0x7f050019;
    public static final int key_shifted_letter_hint_activated_color_holo=0x7f05001a;
    public static final int key_shifted_letter_hint_inactivated_color_holo=0x7f05001b;
    public static final int key_text_color_holo=0x7f05001c;
    /**
     * Color resources for LXX_Dark theme.
     * 10%:0x19 50%:0x80 70%:0xB3 75%:0xC0 80%:0xCC 85%:0xD9 90%:0xE6
     */
    public static final int key_text_color_lxx_dark=0x7f05001d;
    /**
     * Color resources for LXX_Light theme.
     * 15%:0x26 70%:0xB3 75%:0xC0 80%:0xCC 85%:0xD9 90%:0xE6
     */
    public static final int key_text_color_lxx_light=0x7f05001e;
    public static final int key_text_inactivated_color_holo=0x7f05001f;
    public static final int key_text_inactive_color_lxx_dark=0x7f050020;
    public static final int key_text_inactive_color_lxx_light=0x7f050021;
    public static final int language_on_spacebar_text_color_lxx_dark=0x7f050022;
    public static final int language_on_spacebar_text_color_lxx_light=0x7f050023;
    /**
     * Accent color for the notification. We need to match this to the OS build
     */
    public static final int notification_accent_color=0x7f050024;
    /**
     * Color resources for setup wizard and tutorial
     */
    public static final int setup_background=0x7f050025;
    public static final int setup_step_action_background=0x7f050026;
    public static final int setup_step_action_color=0x7f050027;
    public static final int setup_step_background=0x7f050028;
    public static final int setup_text_action=0x7f050029;
    public static final int setup_text_dark=0x7f05002a;
    public static final int setup_welcome_video_margin_color=0x7f05002b;
    public static final int sliding_key_input_preview_color_lxx_dark=0x7f05002c;
    public static final int sliding_key_input_preview_color_lxx_light=0x7f05002d;
    public static final int spacebar_text_color_holo=0x7f05002e;
    public static final int spacebar_text_shadow_color_holo=0x7f05002f;
    public static final int suggested_word_background_selected_lxx_dark=0x7f050030;
    public static final int suggested_word_background_selected_lxx_light=0x7f050031;
    public static final int suggested_word_color_ics=0x7f050032;
    public static final int suggested_word_color_klp=0x7f050033;
    public static final int suggested_word_color_lxx_dark=0x7f050034;
    public static final int suggested_word_color_lxx_light=0x7f050035;
    public static final int typed_word_color_ics=0x7f050036;
    public static final int typed_word_color_klp=0x7f050037;
    public static final int typed_word_color_lxx_dark=0x7f050038;
    public static final int typed_word_color_lxx_light=0x7f050039;
  }
  public static final class dimen {
    /**
     * Inset used in Accessibility mode to avoid accidental key presses when a finger slides off the screen.
     */
    public static final int config_accessibility_edge_slop=0x7f060000;
    /**
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     * This config_default_keyboard_height value should match with keyboard-heights.xml
     */
    public static final int config_default_keyboard_height=0x7f060001;
    /**
     * Common configuration of Emoji keyboard
     */
    public static final int config_emoji_category_page_id_height=0x7f060002;
    public static final int config_gesture_floating_preview_horizontal_padding=0x7f060003;
    public static final int config_gesture_floating_preview_round_radius=0x7f060004;
    public static final int config_gesture_floating_preview_text_offset=0x7f060005;
    /**
     * Gesture floating preview text parameters
     * Gesture floating preview text parameters
     * Gesture floating preview text parameters
     * Gesture floating preview text parameters
     * Gesture floating preview text parameters
     * Gesture floating preview text parameters
     */
    public static final int config_gesture_floating_preview_text_size=0x7f060006;
    public static final int config_gesture_floating_preview_vertical_padding=0x7f060007;
    public static final int config_gesture_trail_end_width=0x7f060008;
    /**
     * Maximum distance threshold between gesture trails interpolation segments.
     */
    public static final int config_gesture_trail_max_interpolation_distance_threshold=0x7f060009;
    /**
     * Minimum distance between gesture trail sampling points.
     */
    public static final int config_gesture_trail_min_sampling_distance=0x7f06000a;
    public static final int config_gesture_trail_start_width=0x7f06000b;
    public static final int config_key_hint_letter_padding=0x7f06000c;
    public static final int config_key_hysteresis_distance=0x7f06000d;
    public static final int config_key_hysteresis_distance_for_sliding_modifier=0x7f06000e;
    /**
     * Common key top visual configuration.
     */
    public static final int config_key_popup_hint_letter_padding=0x7f06000f;
    public static final int config_key_preview_height_holo=0x7f060010;
    public static final int config_key_preview_height_lxx=0x7f060011;
    public static final int config_key_preview_offset_holo=0x7f060012;
    public static final int config_key_preview_offset_lxx=0x7f060013;
    public static final int config_key_shifted_letter_hint_padding=0x7f060014;
    public static final int config_keyboard_vertical_correction=0x7f060015;
    public static final int config_language_on_spacebar_horizontal_margin=0x7f060016;
    /**
     * key_height + key_bottom_gap = config_more_keys_keyboard_key_height
     */
    public static final int config_more_keys_keyboard_key_height=0x7f060017;
    public static final int config_more_keys_keyboard_key_horizontal_padding=0x7f060018;
    /**
     * config_more_keys_keyboard_key_height x 1.2
     * config_more_keys_keyboard_key_height x 1.2
     * config_more_keys_keyboard_key_height x 1.2
     * config_more_keys_keyboard_key_height x 1.2
     */
    public static final int config_more_keys_keyboard_slide_allowance=0x7f060019;
    /**
     * config_more_keys_keyboard_key_height x -0.5
     * config_more_keys_keyboard_key_height x -0.5
     * config_more_keys_keyboard_key_height x -0.5
     * config_more_keys_keyboard_key_height x -0.5
     */
    public static final int config_more_keys_keyboard_vertical_correction_holo=0x7f06001a;
    public static final int config_more_suggestions_bottom_gap=0x7f06001b;
    public static final int config_more_suggestions_hint_text_size=0x7f06001c;
    /**
     * Common more suggestions configuraion.
     */
    public static final int config_more_suggestions_key_horizontal_padding=0x7f06001d;
    public static final int config_more_suggestions_modal_tolerance=0x7f06001e;
    public static final int config_more_suggestions_row_height=0x7f06001f;
    /**
     * Sliding key input preview parameters
     */
    public static final int config_sliding_key_input_preview_width=0x7f060020;
    public static final int config_suggestion_min_width=0x7f060021;
    public static final int config_suggestion_text_horizontal_padding=0x7f060022;
    public static final int config_suggestion_text_size=0x7f060023;
    public static final int config_suggestions_strip_edge_key_width=0x7f060024;
    public static final int config_suggestions_strip_height=0x7f060025;
    public static final int config_suggestions_strip_horizontal_margin=0x7f060026;
    public static final int config_touch_noise_threshold_distance=0x7f060027;
    public static final int setup_horizontal_padding=0x7f060028;
    public static final int setup_step_action_height=0x7f060029;
    public static final int setup_step_action_text_size=0x7f06002a;
    public static final int setup_step_bullet_text_size=0x7f06002b;
    public static final int setup_step_horizontal_line_height=0x7f06002c;
    public static final int setup_step_horizontal_padding=0x7f06002d;
    public static final int setup_step_horizontal_padding_half=0x7f06002e;
    public static final int setup_step_instruction_text_size=0x7f06002f;
    public static final int setup_step_title_text_size=0x7f060030;
    public static final int setup_step_triangle_indicator_height=0x7f060031;
    public static final int setup_step_vertical_padding=0x7f060032;
    public static final int setup_title_end_margin=0x7f060033;
    /**
     * Setup wizard dimensions for small-phone/portrait.
     * Setup wizard dimensions for large-phone/portrait.
     * Setup wizard dimensions for small-tablet/portrait.
     * Setup wizard dimensions for large-tablet/portrait.
     * Setup wizard dimensions for small-phone/landscape.
     * Setup wizard dimensions for large-phone/landscape.
     * Setup wizard dimensions for small-tablet/landscape.
     * Setup wizard dimensions for large-tablet/landscape.
     */
    public static final int setup_title_text_size=0x7f060034;
    public static final int setup_vertical_padding=0x7f060035;
    public static final int setup_welcome_description_text_size=0x7f060036;
    public static final int setup_welcome_description_top_margin=0x7f060037;
    public static final int setup_welcome_video_bottom_padding=0x7f060038;
    public static final int setup_welcome_video_top_padding=0x7f060039;
  }
  public static final class drawable {
    public static final int btn_keyboard_key_active_ics_dark=0x7f070000;
    public static final int btn_keyboard_key_active_klp_dark=0x7f070001;
    public static final int btn_keyboard_key_active_lxx_dark=0x7f070002;
    public static final int btn_keyboard_key_active_lxx_light=0x7f070003;
    public static final int btn_keyboard_key_active_pressed_lxx_dark=0x7f070004;
    public static final int btn_keyboard_key_active_pressed_lxx_light=0x7f070005;
    public static final int btn_keyboard_key_functional_ics=0x7f070006;
    public static final int btn_keyboard_key_functional_klp=0x7f070007;
    public static final int btn_keyboard_key_functional_lxx_dark=0x7f070008;
    public static final int btn_keyboard_key_functional_lxx_light=0x7f070009;
    public static final int btn_keyboard_key_ics=0x7f07000a;
    public static final int btn_keyboard_key_klp=0x7f07000b;
    public static final int btn_keyboard_key_lxx_dark=0x7f07000c;
    public static final int btn_keyboard_key_lxx_light=0x7f07000d;
    public static final int btn_keyboard_key_normal_holo_dark=0x7f07000e;
    public static final int btn_keyboard_key_normal_holo_light=0x7f07000f;
    public static final int btn_keyboard_key_normal_off_holo_dark=0x7f070010;
    public static final int btn_keyboard_key_normal_off_lxx_dark=0x7f070011;
    public static final int btn_keyboard_key_normal_off_lxx_light=0x7f070012;
    public static final int btn_keyboard_key_normal_on_ics_dark=0x7f070013;
    public static final int btn_keyboard_key_normal_on_klp_dark=0x7f070014;
    public static final int btn_keyboard_key_normal_on_lxx_dark=0x7f070015;
    public static final int btn_keyboard_key_normal_on_lxx_light=0x7f070016;
    public static final int btn_keyboard_key_popup_action_lxx_dark=0x7f070017;
    public static final int btn_keyboard_key_popup_action_lxx_light=0x7f070018;
    public static final int btn_keyboard_key_popup_ics=0x7f070019;
    public static final int btn_keyboard_key_popup_klp=0x7f07001a;
    public static final int btn_keyboard_key_popup_lxx_dark=0x7f07001b;
    public static final int btn_keyboard_key_popup_lxx_light=0x7f07001c;
    public static final int btn_keyboard_key_popup_selected_ics=0x7f07001d;
    public static final int btn_keyboard_key_popup_selected_klp=0x7f07001e;
    public static final int btn_keyboard_key_popup_selected_lxx_dark=0x7f07001f;
    public static final int btn_keyboard_key_popup_selected_lxx_light=0x7f070020;
    public static final int btn_keyboard_key_pressed_ics_dark=0x7f070021;
    public static final int btn_keyboard_key_pressed_ics_light=0x7f070022;
    public static final int btn_keyboard_key_pressed_klp_dark=0x7f070023;
    public static final int btn_keyboard_key_pressed_klp_light=0x7f070024;
    public static final int btn_keyboard_key_pressed_off_ics_dark=0x7f070025;
    public static final int btn_keyboard_key_pressed_off_klp_dark=0x7f070026;
    public static final int btn_keyboard_key_pressed_off_lxx_dark=0x7f070027;
    public static final int btn_keyboard_key_pressed_off_lxx_light=0x7f070028;
    public static final int btn_keyboard_key_pressed_on_ics_dark=0x7f070029;
    public static final int btn_keyboard_key_pressed_on_klp_dark=0x7f07002a;
    public static final int btn_keyboard_key_pressed_on_lxx_dark=0x7f07002b;
    public static final int btn_keyboard_key_pressed_on_lxx_light=0x7f07002c;
    public static final int btn_keyboard_spacebar_ics=0x7f07002d;
    public static final int btn_keyboard_spacebar_klp=0x7f07002e;
    public static final int btn_keyboard_spacebar_lxx_dark=0x7f07002f;
    public static final int btn_keyboard_spacebar_lxx_light=0x7f070030;
    public static final int btn_keyboard_spacebar_normal_lxx_dark=0x7f070031;
    public static final int btn_keyboard_spacebar_normal_lxx_light=0x7f070032;
    public static final int btn_keyboard_spacebar_pressed_lxx_dark=0x7f070033;
    public static final int btn_keyboard_spacebar_pressed_lxx_light=0x7f070034;
    public static final int btn_suggestion_ics=0x7f070035;
    public static final int btn_suggestion_klp=0x7f070036;
    public static final int btn_suggestion_lxx_dark=0x7f070037;
    public static final int btn_suggestion_lxx_light=0x7f070038;
    public static final int emoji_category_tab_selected_ics=0x7f070039;
    public static final int emoji_category_tab_selected_klp=0x7f07003a;
    public static final int emoji_category_tab_unselected_holo_dark=0x7f07003b;
    public static final int ic_add_circle_white_24dp=0x7f07003c;
    public static final int ic_emoji_activity_activated_holo_dark=0x7f07003d;
    public static final int ic_emoji_activity_activated_lxx_dark=0x7f07003e;
    public static final int ic_emoji_activity_activated_lxx_light=0x7f07003f;
    public static final int ic_emoji_activity_holo_dark=0x7f070040;
    public static final int ic_emoji_activity_lxx_dark=0x7f070041;
    public static final int ic_emoji_activity_lxx_light=0x7f070042;
    public static final int ic_emoji_activity_normal_holo_dark=0x7f070043;
    public static final int ic_emoji_activity_normal_lxx_dark=0x7f070044;
    public static final int ic_emoji_activity_normal_lxx_light=0x7f070045;
    public static final int ic_emoji_emoticons_activated_holo_dark=0x7f070046;
    public static final int ic_emoji_emoticons_activated_lxx_dark=0x7f070047;
    public static final int ic_emoji_emoticons_activated_lxx_light=0x7f070048;
    public static final int ic_emoji_emoticons_holo_dark=0x7f070049;
    public static final int ic_emoji_emoticons_lxx_dark=0x7f07004a;
    public static final int ic_emoji_emoticons_lxx_light=0x7f07004b;
    public static final int ic_emoji_emoticons_normal_holo_dark=0x7f07004c;
    public static final int ic_emoji_emoticons_normal_lxx_dark=0x7f07004d;
    public static final int ic_emoji_emoticons_normal_lxx_light=0x7f07004e;
    public static final int ic_emoji_flag_activated_holo_dark=0x7f07004f;
    public static final int ic_emoji_flag_activated_lxx_dark=0x7f070050;
    public static final int ic_emoji_flag_activated_lxx_light=0x7f070051;
    public static final int ic_emoji_flag_holo_dark=0x7f070052;
    public static final int ic_emoji_flag_lxx_dark=0x7f070053;
    public static final int ic_emoji_flag_lxx_light=0x7f070054;
    public static final int ic_emoji_flag_normal_holo_dark=0x7f070055;
    public static final int ic_emoji_flag_normal_lxx_dark=0x7f070056;
    public static final int ic_emoji_flag_normal_lxx_light=0x7f070057;
    public static final int ic_emoji_food_activated_holo_dark=0x7f070058;
    public static final int ic_emoji_food_activated_lxx_dark=0x7f070059;
    public static final int ic_emoji_food_activated_lxx_light=0x7f07005a;
    public static final int ic_emoji_food_holo_dark=0x7f07005b;
    public static final int ic_emoji_food_lxx_dark=0x7f07005c;
    public static final int ic_emoji_food_lxx_light=0x7f07005d;
    public static final int ic_emoji_food_normal_holo_dark=0x7f07005e;
    public static final int ic_emoji_food_normal_lxx_dark=0x7f07005f;
    public static final int ic_emoji_food_normal_lxx_light=0x7f070060;
    public static final int ic_emoji_nature_activated_holo_dark=0x7f070061;
    public static final int ic_emoji_nature_activated_lxx_dark=0x7f070062;
    public static final int ic_emoji_nature_activated_lxx_light=0x7f070063;
    public static final int ic_emoji_nature_holo_dark=0x7f070064;
    public static final int ic_emoji_nature_lxx_dark=0x7f070065;
    public static final int ic_emoji_nature_lxx_light=0x7f070066;
    public static final int ic_emoji_nature_normal_holo_dark=0x7f070067;
    public static final int ic_emoji_nature_normal_lxx_dark=0x7f070068;
    public static final int ic_emoji_nature_normal_lxx_light=0x7f070069;
    public static final int ic_emoji_objects_activated_holo_dark=0x7f07006a;
    public static final int ic_emoji_objects_activated_lxx_dark=0x7f07006b;
    public static final int ic_emoji_objects_activated_lxx_light=0x7f07006c;
    public static final int ic_emoji_objects_holo_dark=0x7f07006d;
    public static final int ic_emoji_objects_lxx_dark=0x7f07006e;
    public static final int ic_emoji_objects_lxx_light=0x7f07006f;
    public static final int ic_emoji_objects_normal_holo_dark=0x7f070070;
    public static final int ic_emoji_objects_normal_lxx_dark=0x7f070071;
    public static final int ic_emoji_objects_normal_lxx_light=0x7f070072;
    public static final int ic_emoji_people_activated_holo_dark=0x7f070073;
    public static final int ic_emoji_people_activated_lxx_dark=0x7f070074;
    public static final int ic_emoji_people_activated_lxx_light=0x7f070075;
    public static final int ic_emoji_people_holo_dark=0x7f070076;
    public static final int ic_emoji_people_lxx_dark=0x7f070077;
    public static final int ic_emoji_people_lxx_light=0x7f070078;
    public static final int ic_emoji_people_normal_holo_dark=0x7f070079;
    public static final int ic_emoji_people_normal_lxx_dark=0x7f07007a;
    public static final int ic_emoji_people_normal_lxx_light=0x7f07007b;
    public static final int ic_emoji_places_activated_holo_dark=0x7f07007c;
    public static final int ic_emoji_places_activated_lxx_dark=0x7f07007d;
    public static final int ic_emoji_places_activated_lxx_light=0x7f07007e;
    public static final int ic_emoji_places_holo_dark=0x7f07007f;
    public static final int ic_emoji_places_lxx_dark=0x7f070080;
    public static final int ic_emoji_places_lxx_light=0x7f070081;
    public static final int ic_emoji_places_normal_holo_dark=0x7f070082;
    public static final int ic_emoji_places_normal_lxx_dark=0x7f070083;
    public static final int ic_emoji_places_normal_lxx_light=0x7f070084;
    public static final int ic_emoji_recents_activated_holo_dark=0x7f070085;
    public static final int ic_emoji_recents_activated_lxx_dark=0x7f070086;
    public static final int ic_emoji_recents_activated_lxx_light=0x7f070087;
    public static final int ic_emoji_recents_holo_dark=0x7f070088;
    public static final int ic_emoji_recents_lxx_dark=0x7f070089;
    public static final int ic_emoji_recents_lxx_light=0x7f07008a;
    public static final int ic_emoji_recents_normal_holo_dark=0x7f07008b;
    public static final int ic_emoji_recents_normal_lxx_dark=0x7f07008c;
    public static final int ic_emoji_recents_normal_lxx_light=0x7f07008d;
    public static final int ic_emoji_symbols_activated_holo_dark=0x7f07008e;
    public static final int ic_emoji_symbols_activated_lxx_dark=0x7f07008f;
    public static final int ic_emoji_symbols_activated_lxx_light=0x7f070090;
    public static final int ic_emoji_symbols_holo_dark=0x7f070091;
    public static final int ic_emoji_symbols_lxx_dark=0x7f070092;
    public static final int ic_emoji_symbols_lxx_light=0x7f070093;
    public static final int ic_emoji_symbols_normal_holo_dark=0x7f070094;
    public static final int ic_emoji_symbols_normal_lxx_dark=0x7f070095;
    public static final int ic_emoji_symbols_normal_lxx_light=0x7f070096;
    public static final int ic_ime_switcher_dark=0x7f070097;
    public static final int ic_launcher_keyboard=0x7f070098;
    public static final int ic_menu_add=0x7f070099;
    public static final int ic_notify_dictionary=0x7f07009a;
    public static final int ic_setup_finish=0x7f07009b;
    public static final int ic_setup_step1=0x7f07009c;
    public static final int ic_setup_step2=0x7f07009d;
    public static final int ic_setup_step3=0x7f07009e;
    public static final int keyboard_background_holo=0x7f07009f;
    public static final int keyboard_background_lxx_dark=0x7f0700a0;
    public static final int keyboard_background_lxx_light=0x7f0700a1;
    public static final int keyboard_key_feedback_background=0x7f0700a2;
    public static final int keyboard_key_feedback_background_ics=0x7f0700a3;
    public static final int keyboard_key_feedback_background_klp=0x7f0700a4;
    public static final int keyboard_key_feedback_background_lxx_dark=0x7f0700a5;
    public static final int keyboard_key_feedback_background_lxx_light=0x7f0700a6;
    public static final int keyboard_key_feedback_ics=0x7f0700a7;
    public static final int keyboard_key_feedback_klp=0x7f0700a8;
    public static final int keyboard_key_feedback_left_background_ics=0x7f0700a9;
    public static final int keyboard_key_feedback_left_background_klp=0x7f0700aa;
    public static final int keyboard_key_feedback_left_more_background_ics=0x7f0700ab;
    public static final int keyboard_key_feedback_left_more_background_klp=0x7f0700ac;
    public static final int keyboard_key_feedback_lxx_dark=0x7f0700ad;
    public static final int keyboard_key_feedback_lxx_light=0x7f0700ae;
    public static final int keyboard_key_feedback_more_background=0x7f0700af;
    public static final int keyboard_key_feedback_more_background_ics=0x7f0700b0;
    public static final int keyboard_key_feedback_more_background_klp=0x7f0700b1;
    public static final int keyboard_key_feedback_more_background_lxx_dark=0x7f0700b2;
    public static final int keyboard_key_feedback_more_background_lxx_light=0x7f0700b3;
    public static final int keyboard_key_feedback_right_background_ics=0x7f0700b4;
    public static final int keyboard_key_feedback_right_background_klp=0x7f0700b5;
    public static final int keyboard_key_feedback_right_more_background_ics=0x7f0700b6;
    public static final int keyboard_key_feedback_right_more_background_klp=0x7f0700b7;
    public static final int keyboard_popup_panel_background_ics=0x7f0700b8;
    public static final int keyboard_popup_panel_background_klp=0x7f0700b9;
    public static final int keyboard_popup_panel_background_lxx_dark=0x7f0700ba;
    public static final int keyboard_popup_panel_background_lxx_light=0x7f0700bb;
    public static final int keyboard_suggest_strip_holo=0x7f0700bc;
    public static final int keyboard_suggest_strip_lxx_dark=0x7f0700bd;
    public static final int keyboard_suggest_strip_lxx_light=0x7f0700be;
    public static final int more_keys_divider=0x7f0700bf;
    public static final int more_suggestions_divider=0x7f0700c0;
    public static final int setup_step_action_background=0x7f0700c1;
    public static final int suggestions_strip_divider_holo=0x7f0700c2;
    public static final int suggestions_strip_divider_lxx_dark=0x7f0700c3;
    public static final int suggestions_strip_divider_lxx_light=0x7f0700c4;
    public static final int sym_keyboard_delete_holo_dark=0x7f0700c5;
    public static final int sym_keyboard_delete_lxx_dark=0x7f0700c6;
    public static final int sym_keyboard_delete_lxx_light=0x7f0700c7;
    public static final int sym_keyboard_done_lxx_dark=0x7f0700c8;
    public static final int sym_keyboard_done_lxx_light=0x7f0700c9;
    public static final int sym_keyboard_go_lxx_dark=0x7f0700ca;
    public static final int sym_keyboard_go_lxx_light=0x7f0700cb;
    public static final int sym_keyboard_language_switch_dark=0x7f0700cc;
    public static final int sym_keyboard_language_switch_lxx_dark=0x7f0700cd;
    public static final int sym_keyboard_language_switch_lxx_light=0x7f0700ce;
    public static final int sym_keyboard_next_lxx_dark=0x7f0700cf;
    public static final int sym_keyboard_next_lxx_light=0x7f0700d0;
    public static final int sym_keyboard_previous_lxx_dark=0x7f0700d1;
    public static final int sym_keyboard_previous_lxx_light=0x7f0700d2;
    public static final int sym_keyboard_return_holo_dark=0x7f0700d3;
    public static final int sym_keyboard_return_lxx_dark=0x7f0700d4;
    public static final int sym_keyboard_return_lxx_light=0x7f0700d5;
    public static final int sym_keyboard_search_holo_dark=0x7f0700d6;
    public static final int sym_keyboard_search_lxx_dark=0x7f0700d7;
    public static final int sym_keyboard_search_lxx_light=0x7f0700d8;
    public static final int sym_keyboard_send_lxx_dark=0x7f0700d9;
    public static final int sym_keyboard_send_lxx_light=0x7f0700da;
    public static final int sym_keyboard_settings_holo_dark=0x7f0700db;
    public static final int sym_keyboard_settings_lxx_dark=0x7f0700dc;
    public static final int sym_keyboard_settings_lxx_light=0x7f0700dd;
    public static final int sym_keyboard_shift_holo_dark=0x7f0700de;
    public static final int sym_keyboard_shift_locked_holo_dark=0x7f0700df;
    public static final int sym_keyboard_shift_locked_lxx_dark=0x7f0700e0;
    public static final int sym_keyboard_shift_locked_lxx_light=0x7f0700e1;
    public static final int sym_keyboard_shift_lxx_dark=0x7f0700e2;
    public static final int sym_keyboard_shift_lxx_light=0x7f0700e3;
    public static final int sym_keyboard_smiley_holo_dark=0x7f0700e4;
    public static final int sym_keyboard_smiley_lxx_dark=0x7f0700e5;
    public static final int sym_keyboard_smiley_lxx_light=0x7f0700e6;
    public static final int sym_keyboard_space=0x7f0700e7;
    public static final int sym_keyboard_space_holo_dark=0x7f0700e8;
    public static final int sym_keyboard_space_lxx_dark=0x7f0700e9;
    public static final int sym_keyboard_space_lxx_light=0x7f0700ea;
    public static final int sym_keyboard_tab_holo_dark=0x7f0700eb;
    public static final int sym_keyboard_tab_lxx_dark=0x7f0700ec;
    public static final int sym_keyboard_tab_lxx_light=0x7f0700ed;
    public static final int sym_keyboard_voice_holo_dark=0x7f0700ee;
    public static final int sym_keyboard_voice_lxx_dark=0x7f0700ef;
    public static final int sym_keyboard_voice_lxx_light=0x7f0700f0;
    public static final int sym_keyboard_voice_off_holo_dark=0x7f0700f1;
    public static final int sym_keyboard_voice_off_lxx_dark=0x7f0700f2;
    public static final int sym_keyboard_voice_off_lxx_light=0x7f0700f3;
    public static final int sym_keyboard_zwj_holo_dark=0x7f0700f4;
    public static final int sym_keyboard_zwj_lxx_dark=0x7f0700f5;
    public static final int sym_keyboard_zwj_lxx_light=0x7f0700f6;
    public static final int sym_keyboard_zwnj_holo_dark=0x7f0700f7;
    public static final int sym_keyboard_zwnj_lxx_dark=0x7f0700f8;
    public static final int sym_keyboard_zwnj_lxx_light=0x7f0700f9;
    public static final int unbundled_check_01=0x7f0700fa;
    public static final int unbundled_check_02=0x7f0700fb;
    public static final int unbundled_earth_01=0x7f0700fc;
    public static final int unbundled_earth_02=0x7f0700fd;
    public static final int unbundled_key_01=0x7f0700fe;
    public static final int unbundled_key_02=0x7f0700ff;
    public static final int unbundled_select_01=0x7f070100;
    public static final int unbundled_select_02=0x7f070101;
  }
  public static final class fraction {
    public static final int config_center_suggestion_percentile=0x7f080000;
    public static final int config_emoji_keyboard_key_letter_size=0x7f080001;
    /**
     * Emoji keyboard
     * Emoji keyboard
     * Emoji keyboard
     * Emoji keyboard
     * Emoji keyboard
     * Emoji keyboard
     */
    public static final int config_emoji_keyboard_key_width=0x7f080002;
    public static final int config_emoji_keyboard_row_height=0x7f080003;
    /**
     * Static threshold for starting gesture detection (keyWidth%/sec)
     */
    public static final int config_gesture_detect_fast_move_speed_threshold=0x7f080004;
    /**
     * Distance based threshold values for gesture detection (keyWidth%/sec)
     */
    public static final int config_gesture_dynamic_distance_threshold_from=0x7f080005;
    public static final int config_gesture_dynamic_distance_threshold_to=0x7f080006;
    public static final int config_gesture_recognition_speed_threshold=0x7f080007;
    /**
     * Parameter for gesture sampling (keyWidth%/sec)
     */
    public static final int config_gesture_sampling_minimum_distance=0x7f080008;
    public static final int config_key_hint_label_ratio_holo=0x7f080009;
    public static final int config_key_hint_label_ratio_lxx=0x7f08000a;
    public static final int config_key_hint_letter_ratio_holo=0x7f08000b;
    public static final int config_key_hint_letter_ratio_lxx=0x7f08000c;
    public static final int config_key_horizontal_gap_holo=0x7f08000d;
    public static final int config_key_label_ratio_holo=0x7f08000e;
    public static final int config_key_label_ratio_lxx=0x7f08000f;
    public static final int config_key_large_letter_ratio_holo=0x7f080010;
    public static final int config_key_large_letter_ratio_lxx=0x7f080011;
    public static final int config_key_letter_ratio_5row=0x7f080012;
    public static final int config_key_letter_ratio_holo=0x7f080013;
    public static final int config_key_letter_ratio_lxx=0x7f080014;
    public static final int config_key_preview_dismiss_end_scale=0x7f080015;
    public static final int config_key_preview_show_up_start_scale=0x7f080016;
    public static final int config_key_preview_text_ratio=0x7f080017;
    public static final int config_key_shifted_letter_hint_ratio_5row=0x7f080018;
    public static final int config_key_shifted_letter_hint_ratio_holo=0x7f080019;
    public static final int config_key_shifted_letter_hint_ratio_lxx=0x7f08001a;
    /**
     * For 5-row keyboard
     * For 5-row keyboard
     * For 5-row keyboard
     * For 5-row keyboard
     * For 5-row keyboard
     */
    public static final int config_key_vertical_gap_5row=0x7f08001b;
    public static final int config_key_vertical_gap_holo=0x7f08001c;
    public static final int config_keyboard_bottom_padding_holo=0x7f08001d;
    /**
     * Common keyboard configuration.
     */
    public static final int config_keyboard_left_padding=0x7f08001e;
    public static final int config_keyboard_right_padding=0x7f08001f;
    public static final int config_keyboard_top_padding_holo=0x7f080020;
    public static final int config_language_on_spacebar_text_ratio=0x7f080021;
    public static final int config_max_keyboard_height=0x7f080022;
    public static final int config_min_keyboard_height=0x7f080023;
    public static final int config_min_more_suggestions_width=0x7f080024;
    public static final int config_more_suggestions_info_ratio=0x7f080025;
  }
  public static final class id {
    public static final int ICS=0x7f090000;
    public static final int KLP=0x7f090001;
    public static final int LXXDark=0x7f090002;
    public static final int LXXLight=0x7f090003;
    public static final int action=0x7f090004;
    public static final int actionCustomLabel=0x7f090005;
    public static final int actionDone=0x7f090006;
    public static final int actionGo=0x7f090007;
    public static final int actionNext=0x7f090008;
    public static final int actionNone=0x7f090009;
    public static final int actionPrevious=0x7f09000a;
    public static final int actionSearch=0x7f09000b;
    public static final int actionSend=0x7f09000c;
    public static final int actionUnspecified=0x7f09000d;
    public static final int action_add_style=0x7f09000e;
    public static final int alignHintLabelToBottom=0x7f09000f;
    public static final int alignIconToBottom=0x7f090010;
    public static final int alignLabelOffCenter=0x7f090011;
    public static final int allow_button=0x7f090012;
    public static final int alphabet=0x7f090013;
    public static final int alphabetAutomaticShifted=0x7f090014;
    public static final int alphabetManualShifted=0x7f090015;
    public static final int alphabetShiftLockShifted=0x7f090016;
    public static final int alphabetShiftLocked=0x7f090017;
    public static final int altCodeWhileTyping=0x7f090018;
    public static final int arabic=0x7f090019;
    public static final int armenian=0x7f09001a;
    public static final int autoCorrectBold=0x7f09001b;
    public static final int autoCorrectUnderline=0x7f09001c;
    public static final int autoScale=0x7f09001d;
    public static final int autoXScale=0x7f09001e;
    public static final int bengali=0x7f09001f;
    public static final int bold=0x7f090020;
    public static final int boldItalic=0x7f090021;
    public static final int buttons=0x7f090022;
    public static final int cyrillic=0x7f090023;
    public static final int deny_button=0x7f090024;
    public static final int devanagari=0x7f090025;
    public static final int dict_cancel_button=0x7f090026;
    public static final int dict_delete_button=0x7f090027;
    public static final int dict_install_button=0x7f090028;
    public static final int dictionary_line_progress_bar=0x7f090029;
    public static final int disableAdditionalMoreKeys=0x7f09002a;
    public static final int disableKeyHintLabel=0x7f09002b;
    public static final int download_over_metered_prompt=0x7f09002c;
    public static final int email=0x7f09002d;
    public static final int emojiCategory1=0x7f09002e;
    public static final int emojiCategory10=0x7f09002f;
    public static final int emojiCategory11=0x7f090030;
    public static final int emojiCategory12=0x7f090031;
    public static final int emojiCategory13=0x7f090032;
    public static final int emojiCategory14=0x7f090033;
    public static final int emojiCategory15=0x7f090034;
    public static final int emojiCategory16=0x7f090035;
    public static final int emojiCategory2=0x7f090036;
    public static final int emojiCategory3=0x7f090037;
    public static final int emojiCategory4=0x7f090038;
    public static final int emojiCategory5=0x7f090039;
    public static final int emojiCategory6=0x7f09003a;
    public static final int emojiCategory7=0x7f09003b;
    public static final int emojiCategory8=0x7f09003c;
    public static final int emojiCategory9=0x7f09003d;
    public static final int emojiRecents=0x7f09003e;
    public static final int emoji_action_bar=0x7f09003f;
    public static final int emoji_category_page_id_view=0x7f090040;
    public static final int emoji_category_tabhost=0x7f090041;
    public static final int emoji_keyboard_alphabet_left=0x7f090042;
    public static final int emoji_keyboard_alphabet_right=0x7f090043;
    public static final int emoji_keyboard_delete=0x7f090044;
    public static final int emoji_keyboard_dummy=0x7f090045;
    public static final int emoji_keyboard_page=0x7f090046;
    public static final int emoji_keyboard_pager=0x7f090047;
    public static final int emoji_keyboard_space=0x7f090048;
    public static final int emoji_keyboard_space_icon=0x7f090049;
    public static final int emoji_palettes_view=0x7f09004a;
    public static final int empty=0x7f09004b;
    public static final int enableLongPress=0x7f09004c;
    public static final int fillRight=0x7f09004d;
    public static final int followFunctionalTextColor=0x7f09004e;
    public static final int followKeyHintLabelRatio=0x7f09004f;
    public static final int followKeyLabelRatio=0x7f090050;
    public static final int followKeyLargeLetterRatio=0x7f090051;
    public static final int followKeyLetterRatio=0x7f090052;
    public static final int fontDefault=0x7f090053;
    public static final int fontMonoSpace=0x7f090054;
    public static final int fontNormal=0x7f090055;
    public static final int fromCustomActionLabel=0x7f090056;
    public static final int functional=0x7f090057;
    public static final int georgian=0x7f090058;
    public static final int greek=0x7f090059;
    public static final int hasHintLabel=0x7f09005a;
    public static final int hasPopupHint=0x7f09005b;
    public static final int hasShiftedLetterHint=0x7f09005c;
    public static final int hebrew=0x7f09005d;
    public static final int im=0x7f09005e;
    public static final int important_notice_strip=0x7f09005f;
    public static final int important_notice_title=0x7f090060;
    public static final int isRepeatable=0x7f090061;
    public static final int italic=0x7f090062;
    public static final int kannada=0x7f090063;
    public static final int keepBackgroundAspectRatio=0x7f090064;
    public static final int keyboard_layout_set_spinner=0x7f090065;
    public static final int keyboard_view=0x7f090066;
    public static final int khmer=0x7f090067;
    public static final int lao=0x7f090068;
    public static final int latin=0x7f090069;
    public static final int loading_container=0x7f09006a;
    public static final int loading_progress_bar=0x7f09006b;
    public static final int main_keyboard_frame=0x7f09006c;
    public static final int malayalam=0x7f09006d;
    public static final int more_keys_keyboard_view=0x7f09006e;
    public static final int more_suggestions_view=0x7f09006f;
    public static final int noKeyPreview=0x7f090070;
    public static final int normal=0x7f090071;
    public static final int number=0x7f090072;
    public static final int phone=0x7f090073;
    public static final int phoneSymbols=0x7f090074;
    public static final int preserveCase=0x7f090075;
    public static final int radio_button=0x7f090076;
    public static final int seek_bar_dialog_bar=0x7f090077;
    public static final int seek_bar_dialog_value=0x7f090078;
    public static final int setup_finish=0x7f090079;
    public static final int setup_next=0x7f09007a;
    public static final int setup_start_indicator=0x7f09007b;
    public static final int setup_start_label=0x7f09007c;
    public static final int setup_step1=0x7f09007d;
    public static final int setup_step1_bullet=0x7f09007e;
    public static final int setup_step2=0x7f09007f;
    public static final int setup_step2_bullet=0x7f090080;
    public static final int setup_step3=0x7f090081;
    public static final int setup_step3_bullet=0x7f090082;
    public static final int setup_step_action_label=0x7f090083;
    public static final int setup_step_bullets=0x7f090084;
    public static final int setup_step_indicator=0x7f090085;
    public static final int setup_step_instruction=0x7f090086;
    public static final int setup_step_title=0x7f090087;
    public static final int setup_steps_pane=0x7f090088;
    public static final int setup_steps_screen=0x7f090089;
    public static final int setup_title=0x7f09008a;
    public static final int setup_welcome_description=0x7f09008b;
    public static final int setup_welcome_image=0x7f09008c;
    public static final int setup_welcome_screen=0x7f09008d;
    public static final int setup_welcome_title=0x7f09008e;
    public static final int setup_welcome_video=0x7f09008f;
    public static final int setup_wizard=0x7f090090;
    public static final int shiftedLetterActivated=0x7f090091;
    public static final int sinhala=0x7f090092;
    public static final int spacebar=0x7f090093;
    public static final int stickyOff=0x7f090094;
    public static final int stickyOn=0x7f090095;
    public static final int subtype_locale_spinner=0x7f090096;
    public static final int suggestion_strip_view=0x7f090097;
    public static final int suggestions_strip=0x7f090098;
    public static final int suggestions_strip_voice_key=0x7f090099;
    public static final int symbols=0x7f09009a;
    public static final int symbolsShifted=0x7f09009b;
    public static final int tamil=0x7f09009c;
    public static final int telugu=0x7f09009d;
    public static final int text=0x7f09009e;
    public static final int thai=0x7f09009f;
    public static final int url=0x7f0900a0;
    public static final int user_dict_settings_add_dialog_top=0x7f0900a1;
    public static final int user_dictionary_add_locale=0x7f0900a2;
    public static final int user_dictionary_add_locale_label=0x7f0900a3;
    public static final int user_dictionary_add_shortcut=0x7f0900a4;
    public static final int user_dictionary_add_shortcut_label=0x7f0900a5;
    public static final int user_dictionary_add_word_grid=0x7f0900a6;
    public static final int user_dictionary_add_word_text=0x7f0900a7;
    public static final int validTypedWordBold=0x7f0900a8;
    public static final int wordlist_button_switcher=0x7f0900a9;
  }
  public static final class integer {
    /**
     * U+002E: "." FULL STOP   ; 2Eh = 46d
     */
    public static final int abbreviation_marker=0x7f0a0000;
    public static final int config_accessibility_long_press_key_timeout=0x7f0a0001;
    public static final int config_default_longpress_key_timeout=0x7f0a0002;
    public static final int config_delay_in_milliseconds_to_update_old_suggestions=0x7f0a0003;
    public static final int config_delay_in_milliseconds_to_update_shift_state=0x7f0a0004;
    public static final int config_delay_in_milliseconds_to_update_suggestions=0x7f0a0005;
    public static final int config_double_space_period_timeout=0x7f0a0006;
    public static final int config_emoji_keyboard_max_page_key_count=0x7f0a0007;
    /**
     * Dynamic threshold for gesture after fast typing (msec)
     */
    public static final int config_gesture_dynamic_threshold_decay_duration=0x7f0a0008;
    /**
     * Time based threshold values for gesture detection (msec)
     */
    public static final int config_gesture_dynamic_time_threshold_from=0x7f0a0009;
    public static final int config_gesture_dynamic_time_threshold_to=0x7f0a000a;
    public static final int config_gesture_floating_preview_text_linger_timeout=0x7f0a000b;
    /**
     * Parameters for gesture recognition (msec) and (keyWidth%/sec)
     */
    public static final int config_gesture_recognition_minimum_time=0x7f0a000c;
    public static final int config_gesture_recognition_update_time=0x7f0a000d;
    /**
     * Static threshold for gesture after fast typing (msec)
     */
    public static final int config_gesture_static_time_threshold_after_fast_typing=0x7f0a000e;
    /**
     * TODO: May use the shadow to alleviate rugged trail drawing.
     */
    public static final int config_gesture_trail_body_ratio=0x7f0a000f;
    public static final int config_gesture_trail_fadeout_duration=0x7f0a0010;
    public static final int config_gesture_trail_fadeout_start_delay=0x7f0a0011;
    /**
     * Maximum angular threshold between gesture trails interpolation segments in degree.
     */
    public static final int config_gesture_trail_max_interpolation_angular_threshold=0x7f0a0012;
    /**
     * Maximum number of gesture trail interpolation segments.
     */
    public static final int config_gesture_trail_max_interpolation_segments=0x7f0a0013;
    public static final int config_gesture_trail_shadow_ratio=0x7f0a0014;
    public static final int config_gesture_trail_update_interval=0x7f0a0015;
    public static final int config_ignore_alt_code_key_timeout=0x7f0a0016;
    public static final int config_key_preview_dismiss_duration=0x7f0a0017;
    /**
     * TODO: consolidate key preview linger timeout with the above animation parameters.
     */
    public static final int config_key_preview_linger_timeout=0x7f0a0018;
    public static final int config_key_preview_show_up_duration=0x7f0a0019;
    public static final int config_key_repeat_interval=0x7f0a001a;
    public static final int config_key_repeat_start_timeout=0x7f0a001b;
    public static final int config_keyboard_grid_height=0x7f0a001c;
    public static final int config_keyboard_grid_width=0x7f0a001d;
    public static final int config_language_on_spacebar_final_alpha=0x7f0a001e;
    /**
     * Long pressing shift will invoke caps-lock if > 0, never invoke caps-lock if == 0
     */
    public static final int config_longpress_shift_lock_timeout=0x7f0a001f;
    public static final int config_longpress_timeout_step=0x7f0a0020;
    public static final int config_max_longpress_timeout=0x7f0a0021;
    public static final int config_max_more_keys_column=0x7f0a0022;
    public static final int config_max_more_suggestions_row=0x7f0a0023;
    public static final int config_max_vibration_duration=0x7f0a0024;
    public static final int config_min_longpress_timeout=0x7f0a0025;
    public static final int config_more_keys_keyboard_fadein_anim_time=0x7f0a0026;
    public static final int config_more_keys_keyboard_fadeout_anim_time=0x7f0a0027;
    /**
     * -1 means periocical wipe of the personalization dict is disabled.
     */
    public static final int config_personalization_dict_wipe_interval_in_days=0x7f0a0028;
    /**
     * Must be aligned with {@link Constants#SCREEN_METRICS_SMALL_PHONE}.
     * Must be aligned with {@link Constants#SCREEN_METRICS_LARGE_PHONE}.
     * Must be aligned with {@link Constants#SCREEN_METRICS_SMALL_TABLET}.
     * Must be aligned with {@link Constants#SCREEN_METRICS_LARGE_TABLET}.
     */
    public static final int config_screen_metrics=0x7f0a0029;
    /**
     * TODO: May use the shadow to alleviate rugged trail drawing.
     */
    public static final int config_sliding_key_input_preview_body_ratio=0x7f0a002a;
    public static final int config_sliding_key_input_preview_shadow_ratio=0x7f0a002b;
    /**
     * Common suggestion strip configuration.
     */
    public static final int config_suggestions_count_in_strip=0x7f0a002c;
    /**
     * Suppress showing key preview duration after batch input in millisecond
     */
    public static final int config_suppress_key_preview_after_batch_input_duration=0x7f0a002d;
    public static final int config_touch_noise_threshold_time=0x7f0a002e;
    public static final int config_user_dictionary_max_word_length=0x7f0a002f;
    /**
     * U+002E: "." FULL STOP   ; 2Eh = 46d
     * U+007C: "|" VERTICAL LINE ; 7Ch = 124d
     * U+0589: "։" ARMENIAN FULL STOP   ; 589h = 1417d
     */
    public static final int sentence_separator=0x7f0a0030;
    public static final int setup_body_weight_in_screen=0x7f0a0031;
    public static final int setup_title_weight_in_screen=0x7f0a0032;
    public static final int setup_welcome_video_end_padding_weight_in_screen=0x7f0a0033;
    public static final int setup_welcome_video_weight_in_screen=0x7f0a0034;
  }
  public static final class layout {
    public static final int additional_subtype_dialog=0x7f0b0000;
    public static final int dictionary_line=0x7f0b0001;
    public static final int download_over_metered=0x7f0b0002;
    public static final int emoji_keyboard_page=0x7f0b0003;
    public static final int emoji_keyboard_tab_icon=0x7f0b0004;
    public static final int emoji_palettes_view=0x7f0b0005;
    public static final int input_view=0x7f0b0006;
    public static final int loading_page=0x7f0b0007;
    public static final int main_keyboard_frame=0x7f0b0008;
    public static final int more_keys_keyboard=0x7f0b0009;
    public static final int more_keys_keyboard_for_action_lxx=0x7f0b000a;
    public static final int more_suggestions=0x7f0b000b;
    public static final int radio_button_preference_widget=0x7f0b000c;
    public static final int seek_bar_dialog=0x7f0b000d;
    public static final int setup_start_indicator_label=0x7f0b000e;
    public static final int setup_step=0x7f0b000f;
    public static final int setup_steps_cards=0x7f0b0010;
    public static final int setup_steps_screen=0x7f0b0011;
    public static final int setup_steps_title=0x7f0b0012;
    public static final int setup_welcome_screen=0x7f0b0013;
    public static final int setup_welcome_title=0x7f0b0014;
    public static final int setup_welcome_video=0x7f0b0015;
    public static final int setup_wizard=0x7f0b0016;
    public static final int suggestion_divider=0x7f0b0017;
    public static final int suggestions_strip=0x7f0b0018;
    public static final int user_dictionary_add_word=0x7f0b0019;
    public static final int user_dictionary_add_word_fullscreen=0x7f0b001a;
    public static final int user_dictionary_item=0x7f0b001b;
    public static final int user_dictionary_preference_list_fragment=0x7f0b001c;
  }
  public static final class menu {
    public static final int add_style=0x7f0c0000;
  }
  public static final class raw {
    public static final int empty=0x7f0d0000;
    public static final int main=0x7f0d0001;
    public static final int main_de=0x7f0d0002;
    public static final int main_en=0x7f0d0003;
    public static final int main_es=0x7f0d0004;
    public static final int main_fr=0x7f0d0005;
    public static final int main_it=0x7f0d0006;
    public static final int main_pt_br=0x7f0d0007;
    public static final int main_ru=0x7f0d0008;
    public static final int setup_welcome_image=0x7f0d0009;
    public static final int setup_welcome_video=0x7f0d000a;
  }
  public static final class string {
    /**
     * Units abbreviation for the duration (milliseconds) [CHAR LIMIT=10]
     */
    public static final int abbreviation_unit_milliseconds=0x7f0e0000;
    /**
     * Negative text for selecting an account
     */
    public static final int account_select_cancel=0x7f0e0001;
    /**
     * Positive text for selecting an account
     */
    public static final int account_select_ok=0x7f0e0002;
    /**
     * Text for signing out of an account
     */
    public static final int account_select_sign_out=0x7f0e0003;
    /**
     * Title of the account picker dialog for selecting an account [CHAR LIMIT=40]
     */
    public static final int account_select_title=0x7f0e0004;
    /**
     * Summary of the preference item for switching accounts when an account
     * is selected [CHAR LIMIT=65]
     */
    public static final int account_selected=0x7f0e0005;
    /**
     * Title of the button to add custom style entry in the settings dialog [CHAR LIMIT=15]
     */
    public static final int add=0x7f0e0006;
    /**
     * Text to tell the user to add a Google account to the device to enable the cloud sync feature. [CHAR LIMIT=65]
     */
    public static final int add_account_to_enable_sync=0x7f0e0007;
    /**
     * Title of the option menu to add a new style entry in the preference settings [CHAR LIMIT=16]
     */
    public static final int add_style=0x7f0e0008;
    /**
     * Title for the spell checking service settings screen. AOSP(Android Open Source Project) should not be translated.
     * This resource should be copied from msgid="2970535894327288421"
     */
    public static final int android_spell_checker_settings=0x7f0e0009;
    /**
     * Spoken feedback when the keyboard is hidden.
     */
    public static final int announce_keyboard_hidden=0x7f0e000a;
    /**
     * Spoken feedback when the keyboard mode changes.
     */
    public static final int announce_keyboard_mode=0x7f0e000b;
    /**
     * The dictionary provider application name. Visible in Settings/Applications/Manage applications.
     */
    public static final int app_name=0x7f0e000c;
    public static final int authority=0x7f0e000d;
    /**
     * Option to enable auto capitalization of sentences
     */
    public static final int auto_cap=0x7f0e000e;
    /**
     * Description for option to enable auto capitalization of sentences
     */
    public static final int auto_cap_summary=0x7f0e000f;
    /**
     * Option to enable auto correction [CHAR LIMIT=20]
     */
    public static final int auto_correction=0x7f0e0010;
    /**
     * Description for auto correction [CHAR LIMIT=65 (two lines) or 30 (fits on one line, preferable)]
     */
    public static final int auto_correction_summary=0x7f0e0011;
    /**
     * Option to suggest auto correction suggestions aggressively. Auto-corrects to a word which has even large edit distance from typed word. [CHAR LIMIT=20]
     */
    public static final int auto_correction_threshold_mode_aggressive=0x7f0e0012;
    public static final int auto_correction_threshold_mode_index_aggressive=0x7f0e0013;
    public static final int auto_correction_threshold_mode_index_modest=0x7f0e0014;
    /**
     * The index of the auto correction threshold values array.
     */
    public static final int auto_correction_threshold_mode_index_off=0x7f0e0015;
    public static final int auto_correction_threshold_mode_index_very_aggressive=0x7f0e0016;
    /**
     * Option to suggest auto correction suggestions modestly. Auto-corrects only to a word which has small edit distance from typed word. [CHAR LIMIT=20]
     */
    public static final int auto_correction_threshold_mode_modest=0x7f0e0017;
    /**
     * Option to disable auto correction. [CHAR LIMIT=20]
     */
    public static final int auto_correction_threshold_mode_off=0x7f0e0018;
    /**
     * Option to suggest auto correction suggestions very aggressively. Auto-corrects to a word which has even large edit distance from typed word. [CHAR LIMIT=20]
     */
    public static final int auto_correction_threshold_mode_very_aggressive=0x7f0e0019;
    /**
     * Option to enable using next word suggestions. After the user types a space, with this option on, the keyboard will try to predict the next word.
     */
    public static final int bigram_prediction=0x7f0e001a;
    /**
     * Description for "next word suggestion" option. This displays suggestions even when there is no input, based on the previous word.
     */
    public static final int bigram_prediction_summary=0x7f0e001b;
    /**
     * Title of the button to revert to the default value of the device in the settings dialog [CHAR LIMIT=15]
     */
    public static final int button_default=0x7f0e001c;
    /**
     * Standard message to dismiss a dialog box
     */
    public static final int cancel=0x7f0e001d;
    /**
     * Action to cancel the ongoing download of a dictionary file [CHAR_LIMIT=25]
     */
    public static final int cancel_download_dict=0x7f0e001e;
    /**
     * Message to display in the dictionaries setting screen when some error prevented us to list installed dictionaries [CHAR LIMIT=20]
     */
    public static final int cannot_connect_to_dict_service=0x7f0e001f;
    /**
     * Title of the options to press to refresh the list (as in, check for updates now) [CHAR_LIMIT=50]
     */
    public static final int check_for_updates_now=0x7f0e0020;
    /**
     * Text for confirmation dialog box asking user to confirm deletion of cloud data. [CHAR LIMIT=65]
     */
    public static final int clear_sync_data_confirmation=0x7f0e0021;
    /**
     * Option to confirm deleting of user data from cloud [CHAR LIMIT=20]
     */
    public static final int clear_sync_data_ok=0x7f0e0022;
    /**
     * Option summary for letting user delete synced google keyboard data from Google servers. [CHAR LIMIT=65]
     */
    public static final int clear_sync_data_summary=0x7f0e0023;
    /**
     * Option title for letting user delete synced google keyboard data from Google servers.  [CHAR LIMIT=35]
     */
    public static final int clear_sync_data_title=0x7f0e0024;
    /**
     * Option to cancel the deletion of user data from cloud [CHAR LIMIT=20]
     */
    public static final int cloud_sync_cancel=0x7f0e0025;
    /**
     * Option to agree to terms and conditions for enabling cloud sync feature.
     */
    public static final int cloud_sync_opt_in_text=0x7f0e0026;
    /**
     * Option summary when cloud sync feature is enabled  [CHAR LIMIT=65]
     */
    public static final int cloud_sync_summary=0x7f0e0027;
    /**
     * Option summary when cloud sync feature is disabled  [CHAR LIMIT=65]
     */
    public static final int cloud_sync_summary_disabled=0x7f0e0028;
    /**
     * Text to tell the user that sync feature is disabled because they have Google Apps for Business account(s) on their device. [CHAR LIMIT=80]
     */
    public static final int cloud_sync_summary_disabled_work_profile=0x7f0e0029;
    /**
     * Option title for enabling cloud sync feature [CHAR LIMIT=33]
     */
    public static final int cloud_sync_title=0x7f0e002a;
    /**
     * Option to configure dictionaries
     */
    public static final int configure_dictionaries_title=0x7f0e002b;
    /**
     * Title for configuring input method settings [CHAR LIMIT=35]
     */
    public static final int configure_input_method=0x7f0e002c;
    /**
     * Toast text to describe the same input style already exists [CHAR LIMIT=64]
     */
    public static final int custom_input_style_already_exists=0x7f0e002d;
    /**
     * The message of the dialog to note that a custom input style needs to be enabled. [CHAR LIMIT=130]
     */
    public static final int custom_input_style_note_message=0x7f0e002e;
    /**
     * Title of the preference settings for custom input styles (language and keyboard layout pairs) [CHAR LIMIT=35]
     */
    public static final int custom_input_styles_title=0x7f0e002f;
    public static final int default_metadata_uri=0x7f0e0030;
    /**
     * Name for the "user dictionary" preference item when there is only one
     */
    public static final int default_user_dict_pref_name=0x7f0e0031;
    /**
     * Action to delete a dictionary file [CHAR_LIMIT=15]
     */
    public static final int delete_dict=0x7f0e0032;
    /**
     * The small subtext in the "dictionary available" notification.
     */
    public static final int dict_available_notification_description=0x7f0e0033;
    /**
     * The text of the "dictionary available" notification.
     */
    public static final int dict_available_notification_title=0x7f0e0034;
    /**
     * Message about some dictionary indicating it can be downloaded, but hasn't been yet
     */
    public static final int dictionary_available=0x7f0e0035;
    /**
     * Message about some dictionary indicating the file is installed, but the dictionary is disabled
     */
    public static final int dictionary_disabled=0x7f0e0036;
    /**
     * Message about some dictionary indicating it is downloading and should be available soon
     */
    public static final int dictionary_downloading=0x7f0e0037;
    /**
     * Title for the prompt dialog which informs the user that a dictionary is available for the current language and asks to decide whether to download it over 3g
     */
    public static final int dictionary_install_over_metered_network_prompt=0x7f0e0038;
    /**
     * Message about some dictionary indicating it is already installed
     */
    public static final int dictionary_installed=0x7f0e0039;
    public static final int dictionary_pack_client_id=0x7f0e003a;
    public static final int dictionary_pack_metadata_uri=0x7f0e003b;
    public static final int dictionary_pack_settings_activity=0x7f0e003c;
    /**
     * The dictionary provider ContentProvider name. Visible in Settings/Applications/Running services.
     */
    public static final int dictionary_provider_name=0x7f0e003d;
    /**
     * The dictionary provider Service name. Visible in Settings/Applications/Running services.
     */
    public static final int dictionary_service_name=0x7f0e003e;
    public static final int dictionary_settings_summary=0x7f0e003f;
    /**
     * Title and summary of the dictionary settings screen
     */
    public static final int dictionary_settings_title=0x7f0e0040;
    public static final int do_not_download_over_metered=0x7f0e0041;
    /**
     * Downloadable dictionaries will get update information through the network. This describes the associated download.
     */
    public static final int download_description=0x7f0e0042;
    /**
     * syntax error in translation for should_download_over_metered_prompt (6737084685073734292) org.xmlpull.v1.XmlPullParserException: expected: /string read: b (position:END_TAG </b>@1:781 in     <string name="should_download_over_metered_prompt" msgid="6737084685073734292">"Pasiekiamas mobiliajame įrenginyje pasirinktos kalbos žodynas.&lt;br/&gt; Rekomenduojame &lt;b&gt;atsisiųsti&lt;/b&gt; <xliff:g id="LANGUAGE_NAME">%1$s</xliff:g> žodyną, kad pagerintumėte savo teksto vedimo įgūdžius.&lt;br/&gt; &lt;br/&gt; Jei naudojamas 3G ryšys, atsisiuntimas truks kelias minutes. Jei neturite &lt;b&gt;neribotų duomenų plano&lt;/b&gt;, gali būti taikomi mokesčiai.&lt;br/&gt; Jei nežinote, kokį duomenų planą naudojate, rekomenduojame prisijungti prie „Wi-Fi“ ryšio, kad atsisiuntimas būtų pradėtas automatiškai.&lt;br/&gt; &lt;br/&gt; Patarimas: žodynus galite atsisiųsti ir pridėti mobiliajame įrenginyje nuėję į meniu <b>Nustatymai</b> skiltį &lt;b&gt;Kalbos ir įvestis</b>."</string>
     * )
     */
    public static final int download_over_metered=0x7f0e0043;
    /**
     * Option to edit personal dictionary. [CHAR_LIMIT=30]
     */
    public static final int edit_personal_dictionary=0x7f0e0044;
    /**
     * Title of the button to enable a custom input style entry in the settings dialog [CHAR LIMIT=15]
     */
    public static final int enable=0x7f0e0045;
    /**
     * Option to enable sending usage statistics
     */
    public static final int enable_metrics_logging=0x7f0e0046;
    /**
     * Description for option to enable sending usage statistics
     */
    public static final int enable_metrics_logging_summary=0x7f0e0047;
    /**
     * Option for enabling or disabling the split keyboard layout. [CHAR LIMIT=65]
     */
    public static final int enable_split_keyboard=0x7f0e0048;
    /**
     * Title for Android keyboard debug settings activity / dialog
     */
    public static final int english_ime_debug_settings=0x7f0e0049;
    /**
     * Title for Latin keyboard input options dialog [CHAR LIMIT=25]
     */
    public static final int english_ime_input_options=0x7f0e004a;
    /**
     * Application name for opensource Android keyboard. AOSP(Android Open Source Project) should not be translated.
     * This resource should be copied from msgid="8250992613616792321"
     */
    public static final int english_ime_name=0x7f0e004b;
    /**
     * Title for Android Keyboard settings screen. AOSP(Android Open Source Project) should not be translated.
     * This resource should be copied from msgid="423615877174850267"
     */
    public static final int english_ime_settings=0x7f0e004c;
    /**
     * Option to enable gesture floating text preview. The user can see a suggested word floating under the moving finger during a gesture input. [CHAR LIMIT=30]
     */
    public static final int gesture_floating_preview_text=0x7f0e004d;
    /**
     * Description for "gesture_floating_preview_text" option. The user can see a suggested word floating under the moving finger during a gesture input. [CHAR LIMIT=65]
     */
    public static final int gesture_floating_preview_text_summary=0x7f0e004e;
    /**
     * Option to enable gesture input. The user can input a word by tracing the letters of a word without releasing the finger from the screen. [CHAR LIMIT=30]
     */
    public static final int gesture_input=0x7f0e004f;
    /**
     * Description for "gesture_input" option. The user can input a word by tracing the letters of a word without releasing the finger from the screen. [CHAR LIMIT=65]
     */
    public static final int gesture_input_summary=0x7f0e0050;
    /**
     * Option to enable gesture trail preview. The user can see a trail of the gesture during gesture input. [CHAR LIMIT=30]
     */
    public static final int gesture_preview_trail=0x7f0e0051;
    /**
     * Option to enable space aware gesture input. The user can input multiple words by gliding through the space key during a gesture input. [CHAR LIMIT=30]
     */
    public static final int gesture_space_aware=0x7f0e0052;
    /**
     * Description for "gesture_space_aware" option. The user can input multiple words by gliding through the space key during a gesture input.[CHAR LIMIT=65]
     */
    public static final int gesture_space_aware_summary=0x7f0e0053;
    /**
     * Title of the button in a dialog box. The button takes the user to the keyboard settings. [CHAR LIMIT=15]
     */
    public static final int go_to_settings=0x7f0e0054;
    /**
     * Inform the user that a particular language has an available dictionary
     */
    public static final int has_dictionary=0x7f0e0055;
    /**
     * Title for the 'Help & feedback' settings fragment which shows a help page and has a button
     * for submitting feedback. [CHAR LIMIT=35]
     */
    public static final int help_and_feedback=0x7f0e0056;
    /**
     * Add to dictionary hint
     */
    public static final int hint_add_to_dictionary=0x7f0e0057;
    /**
     * Add to dictionary hint
     */
    public static final int hint_add_to_dictionary_without_word=0x7f0e0058;
    /**
     * The text shown on the suggestion bar to request the contacts permission info.
     */
    public static final int important_notice_suggest_contact_names=0x7f0e0059;
    /**
     * Option name for including other IMEs in the language switch list [CHAR LIMIT=30]
     */
    public static final int include_other_imes_in_language_switch_list=0x7f0e005a;
    /**
     * Option summary for including other IMEs in the language switch list [CHAR LIMIT=65]
     */
    public static final int include_other_imes_in_language_switch_list_summary=0x7f0e005b;
    /**
     * Action to download and install a dictionary [CHAR_LIMIT=15]
     */
    public static final int install_dict=0x7f0e005c;
    /**
     * Description for delay for dismissing a popup on screen: default value of the delay [CHAR LIMIT=15]
     */
    public static final int key_preview_popup_dismiss_default_delay=0x7f0e005d;
    /**
     * Option for the dismiss delay of the key popup [CHAR LIMIT=25]
     */
    public static final int key_preview_popup_dismiss_delay=0x7f0e005e;
    /**
     * Description for delay for dismissing a popup on keypress: no delay [CHAR LIMIT=15]
     */
    public static final int key_preview_popup_dismiss_no_delay=0x7f0e005f;
    /**
     * Title of the item to change the keyboard theme [CHAR LIMIT=20]
     */
    public static final int keyboard_layout=0x7f0e0060;
    /**
     * Title of the spinner for choosing a keyboard layout of custom style in the settings dialog [CHAR LIMIT=15]
     */
    public static final int keyboard_layout_set=0x7f0e0061;
    /**
     * Description of the keyboard mode for entering dates.
     */
    public static final int keyboard_mode_date=0x7f0e0062;
    /**
     * Description of the keyboard mode for entering dates and times.
     */
    public static final int keyboard_mode_date_time=0x7f0e0063;
    /**
     * Description of the keyboard mode for entering email addresses.
     */
    public static final int keyboard_mode_email=0x7f0e0064;
    /**
     * Description of the keyboard mode for entering text messages.
     */
    public static final int keyboard_mode_im=0x7f0e0065;
    /**
     * Description of the keyboard mode for entering numbers.
     */
    public static final int keyboard_mode_number=0x7f0e0066;
    /**
     * Description of the keyboard mode for entering phone numbers.
     */
    public static final int keyboard_mode_phone=0x7f0e0067;
    /**
     * Description of the keyboard mode for entering generic text.
     */
    public static final int keyboard_mode_text=0x7f0e0068;
    /**
     * Description of the keyboard mode for entering times.
     */
    public static final int keyboard_mode_time=0x7f0e0069;
    /**
     * Description of the keyboard mode for entering URLs.
     */
    public static final int keyboard_mode_url=0x7f0e006a;
    /**
     * Title of the preference settings for switching keyboard theme [CHAR LIMIT=35]
     */
    public static final int keyboard_theme=0x7f0e006b;
    /**
     * The keyboard theme name, Holo Blue. This is marked as translatable="false" because this is a proper name of system-wide UI Theme.
     */
    public static final int keyboard_theme_holo_blue=0x7f0e006c;
    /**
     * The keyboard theme name, Holo White. This is marked as translatable="false" because this is a proper name of system-wide UI Theme.
     */
    public static final int keyboard_theme_holo_white=0x7f0e006d;
    /**
     * The keyboard theme name, Material Dark. This is marked as translatable="false" because this is a proper name of system-wide UI Theme.
     */
    public static final int keyboard_theme_material_dark=0x7f0e006e;
    /**
     * The keyboard theme name, Material Light. This is marked as translatable="false" because this is a proper name of system-wide UI Theme.
     */
    public static final int keyboard_theme_material_light=0x7f0e006f;
    /**
     * Label for soft enter key when it performs DONE action.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_done_key=0x7f0e0070;
    /**
     * Label for soft enter key when it performs GO action.  Must be short to fit on key. 5 chars or less is preferable. [CHAR LIMIT=7]
     */
    public static final int label_go_key=0x7f0e0071;
    /**
     * Label for soft enter key when it performs NEXT action.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_next_key=0x7f0e0072;
    /**
     * Label for "Pause" key of phone number keyboard.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_pause_key=0x7f0e0073;
    /**
     * Label for soft enter key when it performs PREVIOUS action.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_previous_key=0x7f0e0074;
    /**
     * Label for soft enter key when it performs SEARCH action.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_search_key=0x7f0e0075;
    /**
     * Label for soft enter key when it performs SEND action.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_send_key=0x7f0e0076;
    /**
     * Label for "Wait" key of phone number keyboard.  Must be short to fit on key. 5 chars or less is preferable.  [CHAR LIMIT=7]
     */
    public static final int label_wait_key=0x7f0e0077;
    /**
     * Title for input language selection screen
     */
    public static final int language_selection_title=0x7f0e0078;
    /**
     * Hint to tell when the data was last updated. Usage : "Last updated [date]", may contain a : or so. [CHAR LIMIT=45]
     */
    public static final int last_update=0x7f0e0079;
    public static final int local_metadata_filename=0x7f0e007a;
    /**
     * String to explain this dictionary is the main dictionary for this language [CHAR_LIMIT=30]
     */
    public static final int main_dict_description=0x7f0e007b;
    /**
     * Name of the main dictionary, as opposed to auxiliary dictionaries (medical/entertainment/sports...)
     */
    public static final int main_dictionary=0x7f0e007c;
    /**
     * Message to display while the add-on dictionary list is updating [no space constraints on this, there is plenty of space but shorter is better because it's only on the screen for a second]
     */
    public static final int message_loading=0x7f0e007d;
    /**
     * Message to display in a dialog box while we are actively updating the word list [CHAR LIMIT=60]
     */
    public static final int message_updating=0x7f0e007e;
    /**
     * Summary of the preference item for switching accounts when no accounts
     * are selected [CHAR LIMIT=65]
     */
    public static final int no_accounts_selected=0x7f0e007f;
    /**
     * Message to display in the dictionaries setting screen when we found that no dictionaries are available [CHAR LIMIT=20]
     */
    public static final int no_dictionaries_available=0x7f0e0080;
    /**
     * Title of the button to postpone enabling a custom input style entry in the settings dialog [CHAR LIMIT=15]
     */
    public static final int not_now=0x7f0e0081;
    /**
     * Chosen to be slightly less than the "aggressive" threshold. This is the threshold for
     * a mildly plausible suggestion given the input; if no "plausible" suggestion is present
     * for a language, it's a strong indicator the user is not typing in this language, so we
     * may be more forgiving of whitelist entries in another language.
     */
    public static final int plausibility_threshold=0x7f0e0082;
    /**
     * Option to control whether or not to show a popup with a larger font on each key press.
     */
    public static final int popup_on_keypress=0x7f0e0083;
    /**
     * Summary for option to block potentially offensive words to be shown [CHAR_LIMIT=80 (two lines) or 40 (fits on one line, preferable)]
     */
    public static final int prefs_block_potentially_offensive_summary=0x7f0e0084;
    /**
     * Option to block potentially offensive words to be shown [CHAR_LIMIT=30]
     */
    public static final int prefs_block_potentially_offensive_title=0x7f0e0085;
    /**
     * Title of the settings for customize key popup animation parameters [CHAR LIMIT=35]
     */
    public static final int prefs_customize_key_preview_animation=0x7f0e0086;
    public static final int prefs_debug_mode=0x7f0e0087;
    /**
     * Title of the settings group for dumpping dictionary files that have been created on the device [CHAR LIMIT=35]
     */
    public static final int prefs_dump_dynamic_dicts=0x7f0e0088;
    /**
     * Title of the settings for enabling Emoji palette triggered by the Alt key on physical keyboards [CHAR LIMIT=35]
     */
    public static final int prefs_enable_emoji_alt_physical_key=0x7f0e0089;
    /**
     * Description of the settings for enabling Emoji palette triggered by the Alt key on physical keyboards [CHAR LIMIT=64]
     */
    public static final int prefs_enable_emoji_alt_physical_key_summary=0x7f0e008a;
    public static final int prefs_force_non_distinct_multitouch=0x7f0e008b;
    /**
     * Title of the settings for key long press delay [CHAR LIMIT=35]
     */
    public static final int prefs_key_longpress_timeout_settings=0x7f0e008c;
    /**
     * Title of the settings for key popup dismiss animation duration (in milliseconds) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_dismiss_duration_settings=0x7f0e008d;
    /**
     * Title of the settings for key popup dismiss animation end X-scale (in percentile) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_dismiss_end_x_scale_settings=0x7f0e008e;
    /**
     * Title of the settings for key popup dismiss animation end Y-scale (in percentile) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_dismiss_end_y_scale_settings=0x7f0e008f;
    /**
     * Title of the settings for key popup show up animation duration (in milliseconds) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_show_up_duration_settings=0x7f0e0090;
    /**
     * Title of the settings for key popup show up animation start X-scale (in percentile) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_show_up_start_x_scale_settings=0x7f0e0091;
    /**
     * Title of the settings for key popup show up animation start Y-scale (in percentile) [CHAR LIMIT=35]
     */
    public static final int prefs_key_popup_show_up_start_y_scale_settings=0x7f0e0092;
    /**
     * Title of the settings for setting keyboard height
     */
    public static final int prefs_keyboard_height_scale=0x7f0e0093;
    /**
     * Title of the settings for keypress sound volume [CHAR LIMIT=35]
     */
    public static final int prefs_keypress_sound_volume_settings=0x7f0e0094;
    /**
     * Title of the settings for keypress vibration duration [CHAR LIMIT=35]
     */
    public static final int prefs_keypress_vibration_duration_settings=0x7f0e0095;
    /**
     * Title of the settings to enable keyboard resizing
     */
    public static final int prefs_resize_keyboard=0x7f0e0096;
    public static final int prefs_should_show_lxx_suggestion_ui=0x7f0e0097;
    /**
     * Option to enable showing suggestions
     */
    public static final int prefs_show_suggestions=0x7f0e0098;
    /**
     * Description for show suggestions
     */
    public static final int prefs_show_suggestions_summary=0x7f0e0099;
    /**
     * Title of the button to remove a custom style entry in the settings dialog [CHAR LIMIT=15]
     */
    public static final int remove=0x7f0e009a;
    /**
     * Title of the button to save a custom style entry in the settings dialog [CHAR LIMIT=15]
     */
    public static final int save=0x7f0e009b;
    /**
     * Preference for input language selection
     */
    public static final int select_language=0x7f0e009c;
    /**
     * Settings screen title for accounts and privacy preferences [CHAR LIMIT=33]
     */
    public static final int settings_screen_accounts=0x7f0e009d;
    /**
     * Settings screen title for advanced settings [CHAR LIMIT=33]
     */
    public static final int settings_screen_advanced=0x7f0e009e;
    /**
     * Settings screen title for appearance & layouts preferences [CHAR LIMIT=33]
     */
    public static final int settings_screen_appearance=0x7f0e009f;
    /**
     * Settings screen title for text correction options [CHAR_LIMIT=33]
     */
    public static final int settings_screen_correction=0x7f0e00a0;
    /**
     * Settings screen title for gesture typing preferences [CHAR_LIMIT=33]
     */
    public static final int settings_screen_gesture=0x7f0e00a1;
    /**
     * Settings screen title for preferences [CHAR LIMIT=33]
     */
    public static final int settings_screen_preferences=0x7f0e00a2;
    /**
     * Settings screen title for keyboard theme settings [CHAR LIMIT=33]
     */
    public static final int settings_screen_theme=0x7f0e00a3;
    /**
     * The text that represents the current settings value is the system default [CHAR LIMIT=25]
     */
    public static final int settings_system_default=0x7f0e00a4;
    /**
     * The label of the button that finishes the setup wizard. [CHAR_LIMIT=64]
     */
    public static final int setup_finish_action=0x7f0e00a5;
    /**
     * The label of the button that navigates the user to the next step of the setup wizard. [CHAR_LIMIT=64]
     */
    public static final int setup_next_action=0x7f0e00a6;
    /**
     * The label of the button that starts the setup wizard. [CHAR_LIMIT=64]
     */
    public static final int setup_start_action=0x7f0e00a7;
    /**
     * The label of the button that triggers the Languages & input settings in order to enable the keyboard. [CHAR_LIMIT=64]
     */
    public static final int setup_step1_action=0x7f0e00a8;
    /**
     * Ordinal number of the 1st step in the setup wizard. [CHAR LIMIT=5]
     */
    public static final int setup_step1_bullet=0x7f0e00a9;
    /**
     * Detailed instruction of the already finished 1st step in the setup wizard. [CHAR LIMIT=120]
     */
    public static final int setup_step1_finished_instruction=0x7f0e00aa;
    /**
     * Detailed instruction of the 1st step in the setup wizard. [CHAR LIMIT=120]
     */
    public static final int setup_step1_instruction=0x7f0e00ab;
    /**
     * Title of the 1st step in the setup wizard. [CHAR LIMIT=64]
     */
    public static final int setup_step1_title=0x7f0e00ac;
    /**
     * The label of the button that triggers the choose input method dialog in order to select the keyboard. [CHAR_LIMIT=64]
     */
    public static final int setup_step2_action=0x7f0e00ad;
    /**
     * Ordinal number of the 2nd step in the setup wizard. [CHAR LIMIT=5]
     */
    public static final int setup_step2_bullet=0x7f0e00ae;
    /**
     * Detailed instruction of the 2nd step in the setup wizard. [CHAR LIMIT=120]
     */
    public static final int setup_step2_instruction=0x7f0e00af;
    /**
     * Title of the 2nd step in the setup wizard. [CHAR LIMIT=64]
     */
    public static final int setup_step2_title=0x7f0e00b0;
    /**
     * The label of the button that triggers the screen for configuaring additional languages of the keyboard. [CHAR_LIMIT=64]
     */
    public static final int setup_step3_action=0x7f0e00b1;
    /**
     * Ordinal number of the 3rd step in the setup wizard. [CHAR LIMIT=5]
     */
    public static final int setup_step3_bullet=0x7f0e00b2;
    /**
     * Detailed instruction of the 3rd step in the setup wizard. [CHAR LIMIT=120]
     */
    public static final int setup_step3_instruction=0x7f0e00b3;
    /**
     * Title of the 3rd step in the setup wizard. [CHAR LIMIT=64]
     */
    public static final int setup_step3_title=0x7f0e00b4;
    /**
     * Title of the setup wizard. [CHAR LIMT=40]
     */
    public static final int setup_steps_title=0x7f0e00b5;
    /**
     * Additional title of the setup wizard welcome screen, just below the setup_welcome_title. [CHAR_LIMIT=64]
     */
    public static final int setup_welcome_additional_description=0x7f0e00b6;
    /**
     * Title of the setup wizard welcome screen. [CHAR LIMT=40]
     */
    public static final int setup_welcome_title=0x7f0e00b7;
    /**
     * Message in the popup informing the user a dictionary is available for their language, and asking for a decision to download over their mobile data plan or not. The reason we ask for this is, the data is large and may be downloaded over a paid-per-megabyte connection but a dictionary is also essential to type comfortably, so we ask the user. This only pops in selected cases, when there is no dictionary at all currently, and the only available network seems to be metered. The "Languages & input" part should be set to the actual name of the option (message ID 5292716747264442359 in the translation console). [CHAR_LIMIT=700]
     */
    public static final int should_download_over_metered_prompt=0x7f0e00b8;
    /**
     * Option to show language switch key [CHAR LIMIT=30]
     */
    public static final int show_language_switch_key=0x7f0e00b9;
    /**
     * Option summary for showing language switch key [CHAR LIMIT=65]
     */
    public static final int show_language_switch_key_summary=0x7f0e00ba;
    /**
     * Option to show setup wizard icon. [CHAR LIMIT=30]
     */
    public static final int show_setup_wizard_icon=0x7f0e00bb;
    /**
     * Description for the option to show setup wizard application icon of this IME in the laucher. [CHAR_LIMIT=65]
     */
    public static final int show_setup_wizard_icon_summary=0x7f0e00bc;
    /**
     * Option to enable sliding key input indicator. The user can see a rubber band-like effect during sliding key input. [CHAR LIMIT=30]
     */
    public static final int sliding_key_input_preview=0x7f0e00bd;
    /**
     * Option summary to enable sliding key input indicator. The user can see a rubber band-like effect during sliding key input. [CHAR LIMIT=66]
     */
    public static final int sliding_key_input_preview_summary=0x7f0e00be;
    /**
     * Option to play back sound on keypress in soft keyboard
     */
    public static final int sound_on_keypress=0x7f0e00bf;
    /**
     * Name of Android spell checker service. AOSP(Android Open Source Project) should not be translated.
     * This resource should be copied from msgid="511950477199948048"
     */
    public static final int spell_checker_service_name=0x7f0e00c0;
    /**
     * Threshold of the normalized score of the best suggestion for the spell checker to declare
     * a word to be "recommended"
     */
    public static final int spellchecker_recommended_threshold_value=0x7f0e00c1;
    /**
     * Spoken description for Unicode code point U+00AA: "ª" FEMININE ORDINAL INDICATOR
     */
    public static final int spoken_accented_letter_00AA=0x7f0e00c2;
    /**
     * Spoken description for Unicode code point U+00B5: "µ" MICRO SIGN
     */
    public static final int spoken_accented_letter_00B5=0x7f0e00c3;
    /**
     * Spoken description for Unicode code point U+00BA: "º" MASCULINE ORDINAL INDICATOR
     */
    public static final int spoken_accented_letter_00BA=0x7f0e00c4;
    /**
     * Spoken description for Unicode code point U+00DF: "ß" LATIN SMALL LETTER SHARP S
     */
    public static final int spoken_accented_letter_00DF=0x7f0e00c5;
    /**
     * Spoken description for Unicode code point U+00E0: "à" LATIN SMALL LETTER A WITH GRAVE
     */
    public static final int spoken_accented_letter_00E0=0x7f0e00c6;
    /**
     * Spoken description for Unicode code point U+00E1: "á" LATIN SMALL LETTER A WITH ACUTE
     */
    public static final int spoken_accented_letter_00E1=0x7f0e00c7;
    /**
     * Spoken description for Unicode code point U+00E2: "â" LATIN SMALL LETTER A WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_00E2=0x7f0e00c8;
    /**
     * Spoken description for Unicode code point U+00E3: "ã" LATIN SMALL LETTER A WITH TILDE
     */
    public static final int spoken_accented_letter_00E3=0x7f0e00c9;
    /**
     * Spoken description for Unicode code point U+00E4: "ä" LATIN SMALL LETTER A WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00E4=0x7f0e00ca;
    /**
     * Spoken description for Unicode code point U+00E5: "å" LATIN SMALL LETTER A WITH RING ABOVE
     */
    public static final int spoken_accented_letter_00E5=0x7f0e00cb;
    /**
     * Spoken description for Unicode code point U+00E6: "æ" LATIN SMALL LETTER AE
     */
    public static final int spoken_accented_letter_00E6=0x7f0e00cc;
    /**
     * Spoken description for Unicode code point U+00E7: "ç" LATIN SMALL LETTER C WITH CEDILLA
     */
    public static final int spoken_accented_letter_00E7=0x7f0e00cd;
    /**
     * Spoken description for Unicode code point U+00E8: "è" LATIN SMALL LETTER E WITH GRAVE
     */
    public static final int spoken_accented_letter_00E8=0x7f0e00ce;
    /**
     * Spoken description for Unicode code point U+00E9: "é" LATIN SMALL LETTER E WITH ACUTE
     */
    public static final int spoken_accented_letter_00E9=0x7f0e00cf;
    /**
     * Spoken description for Unicode code point U+00EA: "ê" LATIN SMALL LETTER E WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_00EA=0x7f0e00d0;
    /**
     * Spoken description for Unicode code point U+00EB: "ë" LATIN SMALL LETTER E WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00EB=0x7f0e00d1;
    /**
     * Spoken description for Unicode code point U+00EC: "ì" LATIN SMALL LETTER I WITH GRAVE
     */
    public static final int spoken_accented_letter_00EC=0x7f0e00d2;
    /**
     * Spoken description for Unicode code point U+00ED: "í" LATIN SMALL LETTER I WITH ACUTE
     */
    public static final int spoken_accented_letter_00ED=0x7f0e00d3;
    /**
     * Spoken description for Unicode code point U+00EE: "î" LATIN SMALL LETTER I WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_00EE=0x7f0e00d4;
    /**
     * Spoken description for Unicode code point U+00EF: "ï" LATIN SMALL LETTER I WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00EF=0x7f0e00d5;
    /**
     * Spoken description for Unicode code point U+00F0: "ð" LATIN SMALL LETTER ETH
     */
    public static final int spoken_accented_letter_00F0=0x7f0e00d6;
    /**
     * Spoken description for Unicode code point U+00F1: "ñ" LATIN SMALL LETTER N WITH TILDE
     */
    public static final int spoken_accented_letter_00F1=0x7f0e00d7;
    /**
     * Spoken description for Unicode code point U+00F2: "ò" LATIN SMALL LETTER O WITH GRAVE
     */
    public static final int spoken_accented_letter_00F2=0x7f0e00d8;
    /**
     * Spoken description for Unicode code point U+00F3: "ó" LATIN SMALL LETTER O WITH ACUTE
     */
    public static final int spoken_accented_letter_00F3=0x7f0e00d9;
    /**
     * Spoken description for Unicode code point U+00F4: "ô" LATIN SMALL LETTER O WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_00F4=0x7f0e00da;
    /**
     * Spoken description for Unicode code point U+00F5: "õ" LATIN SMALL LETTER O WITH TILDE
     */
    public static final int spoken_accented_letter_00F5=0x7f0e00db;
    /**
     * Spoken description for Unicode code point U+00F6: "ö" LATIN SMALL LETTER O WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00F6=0x7f0e00dc;
    /**
     * Spoken description for Unicode code point U+00F8: "ø" LATIN SMALL LETTER O WITH STROKE
     */
    public static final int spoken_accented_letter_00F8=0x7f0e00dd;
    /**
     * Spoken description for Unicode code point U+00F9: "ù" LATIN SMALL LETTER U WITH GRAVE
     */
    public static final int spoken_accented_letter_00F9=0x7f0e00de;
    /**
     * Spoken description for Unicode code point U+00FA: "ú" LATIN SMALL LETTER U WITH ACUTE
     */
    public static final int spoken_accented_letter_00FA=0x7f0e00df;
    /**
     * Spoken description for Unicode code point U+00FB: "û" LATIN SMALL LETTER U WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_00FB=0x7f0e00e0;
    /**
     * Spoken description for Unicode code point U+00FC: "ü" LATIN SMALL LETTER U WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00FC=0x7f0e00e1;
    /**
     * Spoken description for Unicode code point U+00FD: "ý" LATIN SMALL LETTER Y WITH ACUTE
     */
    public static final int spoken_accented_letter_00FD=0x7f0e00e2;
    /**
     * Spoken description for Unicode code point U+00FE: "þ" LATIN SMALL LETTER THORN
     */
    public static final int spoken_accented_letter_00FE=0x7f0e00e3;
    /**
     * Spoken description for Unicode code point U+00FF: "ÿ" LATIN SMALL LETTER Y WITH DIAERESIS
     */
    public static final int spoken_accented_letter_00FF=0x7f0e00e4;
    /**
     * Spoken description for Unicode code point U+0101: "ā" LATIN SMALL LETTER A WITH MACRON
     */
    public static final int spoken_accented_letter_0101=0x7f0e00e5;
    /**
     * Spoken description for Unicode code point U+0103: "ă" LATIN SMALL LETTER A WITH BREVE
     */
    public static final int spoken_accented_letter_0103=0x7f0e00e6;
    /**
     * Spoken description for Unicode code point U+0105: "ą" LATIN SMALL LETTER A WITH OGONEK
     */
    public static final int spoken_accented_letter_0105=0x7f0e00e7;
    /**
     * Spoken description for Unicode code point U+0107: "ć" LATIN SMALL LETTER C WITH ACUTE
     */
    public static final int spoken_accented_letter_0107=0x7f0e00e8;
    /**
     * Spoken description for Unicode code point U+0109: "ĉ" LATIN SMALL LETTER C WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_0109=0x7f0e00e9;
    /**
     * Spoken description for Unicode code point U+010B: "ċ" LATIN SMALL LETTER C WITH DOT ABOVE
     */
    public static final int spoken_accented_letter_010B=0x7f0e00ea;
    /**
     * Spoken description for Unicode code point U+010D: "č" LATIN SMALL LETTER C WITH CARON
     */
    public static final int spoken_accented_letter_010D=0x7f0e00eb;
    /**
     * Spoken description for Unicode code point U+010F: "ď" LATIN SMALL LETTER D WITH CARON
     */
    public static final int spoken_accented_letter_010F=0x7f0e00ec;
    /**
     * Spoken description for Unicode code point U+0111: "đ" LATIN SMALL LETTER D WITH STROKE
     */
    public static final int spoken_accented_letter_0111=0x7f0e00ed;
    /**
     * Spoken description for Unicode code point U+0113: "ē" LATIN SMALL LETTER E WITH MACRON
     */
    public static final int spoken_accented_letter_0113=0x7f0e00ee;
    /**
     * Spoken description for Unicode code point U+0115: "ĕ" LATIN SMALL LETTER E WITH BREVE
     */
    public static final int spoken_accented_letter_0115=0x7f0e00ef;
    /**
     * Spoken description for Unicode code point U+0117: "ė" LATIN SMALL LETTER E WITH DOT ABOVE
     */
    public static final int spoken_accented_letter_0117=0x7f0e00f0;
    /**
     * Spoken description for Unicode code point U+0119: "ę" LATIN SMALL LETTER E WITH OGONEK
     */
    public static final int spoken_accented_letter_0119=0x7f0e00f1;
    /**
     * Spoken description for Unicode code point U+011B: "ě" LATIN SMALL LETTER E WITH CARON
     */
    public static final int spoken_accented_letter_011B=0x7f0e00f2;
    /**
     * Spoken description for Unicode code point U+011D: "ĝ" LATIN SMALL LETTER G WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_011D=0x7f0e00f3;
    /**
     * Spoken description for Unicode code point U+011F: "ğ" LATIN SMALL LETTER G WITH BREVE
     */
    public static final int spoken_accented_letter_011F=0x7f0e00f4;
    /**
     * Spoken description for Unicode code point U+0121: "ġ" LATIN SMALL LETTER G WITH DOT ABOVE
     */
    public static final int spoken_accented_letter_0121=0x7f0e00f5;
    /**
     * Spoken description for Unicode code point U+0123: "ģ" LATIN SMALL LETTER G WITH CEDILLA
     */
    public static final int spoken_accented_letter_0123=0x7f0e00f6;
    /**
     * Spoken description for Unicode code point U+0125: "ĥ" LATIN SMALL LETTER H WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_0125=0x7f0e00f7;
    /**
     * Spoken description for Unicode code point U+0127: "ħ" LATIN SMALL LETTER H WITH STROKE
     */
    public static final int spoken_accented_letter_0127=0x7f0e00f8;
    /**
     * Spoken description for Unicode code point U+0129: "ĩ" LATIN SMALL LETTER I WITH TILDE
     */
    public static final int spoken_accented_letter_0129=0x7f0e00f9;
    /**
     * Spoken description for Unicode code point U+012B: "ī" LATIN SMALL LETTER I WITH MACRON
     */
    public static final int spoken_accented_letter_012B=0x7f0e00fa;
    /**
     * Spoken description for Unicode code point U+012D: "ĭ" LATIN SMALL LETTER I WITH BREVE
     */
    public static final int spoken_accented_letter_012D=0x7f0e00fb;
    /**
     * Spoken description for Unicode code point U+012F: "į" LATIN SMALL LETTER I WITH OGONEK
     */
    public static final int spoken_accented_letter_012F=0x7f0e00fc;
    /**
     * Spoken description for Unicode code point U+0131: "ı" LATIN SMALL LETTER DOTLESS I
     */
    public static final int spoken_accented_letter_0131=0x7f0e00fd;
    /**
     * Spoken description for Unicode code point U+0133: "ĳ" LATIN SMALL LIGATURE IJ
     */
    public static final int spoken_accented_letter_0133=0x7f0e00fe;
    /**
     * Spoken description for Unicode code point U+0135: "ĵ" LATIN SMALL LETTER J WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_0135=0x7f0e00ff;
    /**
     * Spoken description for Unicode code point U+0137: "ķ" LATIN SMALL LETTER K WITH CEDILLA
     */
    public static final int spoken_accented_letter_0137=0x7f0e0100;
    /**
     * Spoken description for Unicode code point U+0138: "ĸ" LATIN SMALL LETTER KRA
     */
    public static final int spoken_accented_letter_0138=0x7f0e0101;
    /**
     * Spoken description for Unicode code point U+013A: "ĺ" LATIN SMALL LETTER L WITH ACUTE
     */
    public static final int spoken_accented_letter_013A=0x7f0e0102;
    /**
     * Spoken description for Unicode code point U+013C: "ļ" LATIN SMALL LETTER L WITH CEDILLA
     */
    public static final int spoken_accented_letter_013C=0x7f0e0103;
    /**
     * Spoken description for Unicode code point U+013E: "ľ" LATIN SMALL LETTER L WITH CARON
     */
    public static final int spoken_accented_letter_013E=0x7f0e0104;
    /**
     * Spoken description for Unicode code point U+0140: "ŀ" LATIN SMALL LETTER L WITH MIDDLE DOT
     */
    public static final int spoken_accented_letter_0140=0x7f0e0105;
    /**
     * Spoken description for Unicode code point U+0142: "ł" LATIN SMALL LETTER L WITH STROKE
     */
    public static final int spoken_accented_letter_0142=0x7f0e0106;
    /**
     * Spoken description for Unicode code point U+0144: "ń" LATIN SMALL LETTER N WITH ACUTE
     */
    public static final int spoken_accented_letter_0144=0x7f0e0107;
    /**
     * Spoken description for Unicode code point U+0146: "ņ" LATIN SMALL LETTER N WITH CEDILLA
     */
    public static final int spoken_accented_letter_0146=0x7f0e0108;
    /**
     * Spoken description for Unicode code point U+0148: "ň" LATIN SMALL LETTER N WITH CARON
     */
    public static final int spoken_accented_letter_0148=0x7f0e0109;
    /**
     * Spoken description for Unicode code point U+0149: "ŉ" LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
     */
    public static final int spoken_accented_letter_0149=0x7f0e010a;
    /**
     * Spoken description for Unicode code point U+014B: "ŋ" LATIN SMALL LETTER ENG
     */
    public static final int spoken_accented_letter_014B=0x7f0e010b;
    /**
     * Spoken description for Unicode code point U+014D: "ō" LATIN SMALL LETTER O WITH MACRON
     */
    public static final int spoken_accented_letter_014D=0x7f0e010c;
    /**
     * Spoken description for Unicode code point U+014F: "ŏ" LATIN SMALL LETTER O WITH BREVE
     */
    public static final int spoken_accented_letter_014F=0x7f0e010d;
    /**
     * Spoken description for Unicode code point U+0151: "ő" LATIN SMALL LETTER O WITH DOUBLE ACUTE
     */
    public static final int spoken_accented_letter_0151=0x7f0e010e;
    /**
     * Spoken description for Unicode code point U+0153: "œ" LATIN SMALL LIGATURE OE
     */
    public static final int spoken_accented_letter_0153=0x7f0e010f;
    /**
     * Spoken description for Unicode code point U+0155: "ŕ" LATIN SMALL LETTER R WITH ACUTE
     */
    public static final int spoken_accented_letter_0155=0x7f0e0110;
    /**
     * Spoken description for Unicode code point U+0157: "ŗ" LATIN SMALL LETTER R WITH CEDILLA
     */
    public static final int spoken_accented_letter_0157=0x7f0e0111;
    /**
     * Spoken description for Unicode code point U+0159: "ř" LATIN SMALL LETTER R WITH CARON
     */
    public static final int spoken_accented_letter_0159=0x7f0e0112;
    /**
     * Spoken description for Unicode code point U+015B: "ś" LATIN SMALL LETTER S WITH ACUTE
     */
    public static final int spoken_accented_letter_015B=0x7f0e0113;
    /**
     * Spoken description for Unicode code point U+015D: "ŝ" LATIN SMALL LETTER S WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_015D=0x7f0e0114;
    /**
     * Spoken description for Unicode code point U+015F: "ş" LATIN SMALL LETTER S WITH CEDILLA
     */
    public static final int spoken_accented_letter_015F=0x7f0e0115;
    /**
     * Spoken description for Unicode code point U+0161: "š" LATIN SMALL LETTER S WITH CARON
     */
    public static final int spoken_accented_letter_0161=0x7f0e0116;
    /**
     * Spoken description for Unicode code point U+0163: "ţ" LATIN SMALL LETTER T WITH CEDILLA
     */
    public static final int spoken_accented_letter_0163=0x7f0e0117;
    /**
     * Spoken description for Unicode code point U+0165: "ť" LATIN SMALL LETTER T WITH CARON
     */
    public static final int spoken_accented_letter_0165=0x7f0e0118;
    /**
     * Spoken description for Unicode code point U+0167: "ŧ" LATIN SMALL LETTER T WITH STROKE
     */
    public static final int spoken_accented_letter_0167=0x7f0e0119;
    /**
     * Spoken description for Unicode code point U+0169: "ũ" LATIN SMALL LETTER U WITH TILDE
     */
    public static final int spoken_accented_letter_0169=0x7f0e011a;
    /**
     * Spoken description for Unicode code point U+016B: "ū" LATIN SMALL LETTER U WITH MACRON
     */
    public static final int spoken_accented_letter_016B=0x7f0e011b;
    /**
     * Spoken description for Unicode code point U+016D: "ŭ" LATIN SMALL LETTER U WITH BREVE
     */
    public static final int spoken_accented_letter_016D=0x7f0e011c;
    /**
     * Spoken description for Unicode code point U+016F: "ů" LATIN SMALL LETTER U WITH RING ABOVE
     */
    public static final int spoken_accented_letter_016F=0x7f0e011d;
    /**
     * Spoken description for Unicode code point U+0171: "ű" LATIN SMALL LETTER U WITH DOUBLE ACUTE
     */
    public static final int spoken_accented_letter_0171=0x7f0e011e;
    /**
     * Spoken description for Unicode code point U+0173: "ų" LATIN SMALL LETTER U WITH OGONEK
     */
    public static final int spoken_accented_letter_0173=0x7f0e011f;
    /**
     * Spoken description for Unicode code point U+0175: "ŵ" LATIN SMALL LETTER W WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_0175=0x7f0e0120;
    /**
     * Spoken description for Unicode code point U+0177: "ŷ" LATIN SMALL LETTER Y WITH CIRCUMFLEX
     */
    public static final int spoken_accented_letter_0177=0x7f0e0121;
    /**
     * Spoken description for Unicode code point U+017A: "ź" LATIN SMALL LETTER Z WITH ACUTE
     */
    public static final int spoken_accented_letter_017A=0x7f0e0122;
    /**
     * Spoken description for Unicode code point U+017C: "ż" LATIN SMALL LETTER Z WITH DOT ABOVE
     */
    public static final int spoken_accented_letter_017C=0x7f0e0123;
    /**
     * Spoken description for Unicode code point U+017E: "ž" LATIN SMALL LETTER Z WITH CARON
     */
    public static final int spoken_accented_letter_017E=0x7f0e0124;
    /**
     * Spoken description for Unicode code point U+017F: "ſ" LATIN SMALL LETTER LONG S
     */
    public static final int spoken_accented_letter_017F=0x7f0e0125;
    /**
     * Spoken description for Unicode code point U+01A1: "ơ" LATIN SMALL LETTER O WITH HORN
     */
    public static final int spoken_accented_letter_01A1=0x7f0e0126;
    /**
     * Spoken description for Unicode code point U+01B0: "ư" LATIN SMALL LETTER U WITH HORN
     */
    public static final int spoken_accented_letter_01B0=0x7f0e0127;
    /**
     * Spoken description for Unicode code point U+0219: "ș" LATIN SMALL LETTER S WITH COMMA BELOW
     */
    public static final int spoken_accented_letter_0219=0x7f0e0128;
    /**
     * Spoken description for Unicode code point U+021B: "ț" LATIN SMALL LETTER T WITH COMMA BELOW
     */
    public static final int spoken_accented_letter_021B=0x7f0e0129;
    /**
     * Spoken description for Unicode code point U+0259: "ə" LATIN SMALL LETTER SCHWA
     */
    public static final int spoken_accented_letter_0259=0x7f0e012a;
    /**
     * Spoken description for Unicode code point U+1EA1: "ạ" LATIN SMALL LETTER A WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1EA1=0x7f0e012b;
    /**
     * Spoken description for Unicode code point U+1EA3: "ả" LATIN SMALL LETTER A WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EA3=0x7f0e012c;
    /**
     * Spoken description for Unicode code point U+1EA5: "ấ" LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE
     */
    public static final int spoken_accented_letter_1EA5=0x7f0e012d;
    /**
     * Spoken description for Unicode code point U+1EA7: "ầ" LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE
     */
    public static final int spoken_accented_letter_1EA7=0x7f0e012e;
    /**
     * Spoken description for Unicode code point U+1EA9: "ẩ" LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EA9=0x7f0e012f;
    /**
     * Spoken description for Unicode code point U+1EAB: "ẫ" LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE
     */
    public static final int spoken_accented_letter_1EAB=0x7f0e0130;
    /**
     * Spoken description for Unicode code point U+1EAD: "ậ" LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW
     */
    public static final int spoken_accented_letter_1EAD=0x7f0e0131;
    /**
     * Spoken description for Unicode code point U+1EAF: "ắ" LATIN SMALL LETTER A WITH BREVE AND ACUTE
     */
    public static final int spoken_accented_letter_1EAF=0x7f0e0132;
    /**
     * Spoken description for Unicode code point U+1EB1: "ằ" LATIN SMALL LETTER A WITH BREVE AND GRAVE
     */
    public static final int spoken_accented_letter_1EB1=0x7f0e0133;
    /**
     * Spoken description for Unicode code point U+1EB3: "ẳ" LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EB3=0x7f0e0134;
    /**
     * Spoken description for Unicode code point U+1EB5: "ẵ" LATIN SMALL LETTER A WITH BREVE AND TILDE
     */
    public static final int spoken_accented_letter_1EB5=0x7f0e0135;
    /**
     * Spoken description for Unicode code point U+1EB7: "ặ" LATIN SMALL LETTER A WITH BREVE AND DOT BELOW
     */
    public static final int spoken_accented_letter_1EB7=0x7f0e0136;
    /**
     * Spoken description for Unicode code point U+1EB9: "ẹ" LATIN SMALL LETTER E WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1EB9=0x7f0e0137;
    /**
     * Spoken description for Unicode code point U+1EBB: "ẻ" LATIN SMALL LETTER E WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EBB=0x7f0e0138;
    /**
     * Spoken description for Unicode code point U+1EBD: "ẽ" LATIN SMALL LETTER E WITH TILDE
     */
    public static final int spoken_accented_letter_1EBD=0x7f0e0139;
    /**
     * Spoken description for Unicode code point U+1EBF: "ế" LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE
     */
    public static final int spoken_accented_letter_1EBF=0x7f0e013a;
    /**
     * Spoken description for Unicode code point U+1EC1: "ề" LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE
     */
    public static final int spoken_accented_letter_1EC1=0x7f0e013b;
    /**
     * Spoken description for Unicode code point U+1EC3: "ể" LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EC3=0x7f0e013c;
    /**
     * Spoken description for Unicode code point U+1EC5: "ễ" LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE
     */
    public static final int spoken_accented_letter_1EC5=0x7f0e013d;
    /**
     * Spoken description for Unicode code point U+1EC7: "ệ" LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW
     */
    public static final int spoken_accented_letter_1EC7=0x7f0e013e;
    /**
     * Spoken description for Unicode code point U+1EC9: "ỉ" LATIN SMALL LETTER I WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EC9=0x7f0e013f;
    /**
     * Spoken description for Unicode code point U+1ECB: "ị" LATIN SMALL LETTER I WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1ECB=0x7f0e0140;
    /**
     * Spoken description for Unicode code point U+1ECD: "ọ" LATIN SMALL LETTER O WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1ECD=0x7f0e0141;
    /**
     * Spoken description for Unicode code point U+1ECF: "ỏ" LATIN SMALL LETTER O WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1ECF=0x7f0e0142;
    /**
     * Spoken description for Unicode code point U+1ED1: "ố" LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE
     */
    public static final int spoken_accented_letter_1ED1=0x7f0e0143;
    /**
     * Spoken description for Unicode code point U+1ED3: "ồ" LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE
     */
    public static final int spoken_accented_letter_1ED3=0x7f0e0144;
    /**
     * Spoken description for Unicode code point U+1ED5: "ổ" LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1ED5=0x7f0e0145;
    /**
     * Spoken description for Unicode code point U+1ED7: "ỗ" LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE
     */
    public static final int spoken_accented_letter_1ED7=0x7f0e0146;
    /**
     * Spoken description for Unicode code point U+1ED9: "ộ" LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW
     */
    public static final int spoken_accented_letter_1ED9=0x7f0e0147;
    /**
     * Spoken description for Unicode code point U+1EDB: "ớ" LATIN SMALL LETTER O WITH HORN AND ACUTE
     */
    public static final int spoken_accented_letter_1EDB=0x7f0e0148;
    /**
     * Spoken description for Unicode code point U+1EDD: "ờ" LATIN SMALL LETTER O WITH HORN AND GRAVE
     */
    public static final int spoken_accented_letter_1EDD=0x7f0e0149;
    /**
     * Spoken description for Unicode code point U+1EDF: "ở" LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EDF=0x7f0e014a;
    /**
     * Spoken description for Unicode code point U+1EE1: "ỡ" LATIN SMALL LETTER O WITH HORN AND TILDE
     */
    public static final int spoken_accented_letter_1EE1=0x7f0e014b;
    /**
     * Spoken description for Unicode code point U+1EE3: "ợ" LATIN SMALL LETTER O WITH HORN AND DOT BELOW
     */
    public static final int spoken_accented_letter_1EE3=0x7f0e014c;
    /**
     * Spoken description for Unicode code point U+1EE5: "ụ" LATIN SMALL LETTER U WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1EE5=0x7f0e014d;
    /**
     * Spoken description for Unicode code point U+1EE7: "ủ" LATIN SMALL LETTER U WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EE7=0x7f0e014e;
    /**
     * Spoken description for Unicode code point U+1EE9: "ứ" LATIN SMALL LETTER U WITH HORN AND ACUTE
     */
    public static final int spoken_accented_letter_1EE9=0x7f0e014f;
    /**
     * Spoken description for Unicode code point U+1EEB: "ừ" LATIN SMALL LETTER U WITH HORN AND GRAVE
     */
    public static final int spoken_accented_letter_1EEB=0x7f0e0150;
    /**
     * Spoken description for Unicode code point U+1EED: "ử" LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EED=0x7f0e0151;
    /**
     * Spoken description for Unicode code point U+1EEF: "ữ" LATIN SMALL LETTER U WITH HORN AND TILDE
     */
    public static final int spoken_accented_letter_1EEF=0x7f0e0152;
    /**
     * Spoken description for Unicode code point U+1EF1: "ự" LATIN SMALL LETTER U WITH HORN AND DOT BELOW
     */
    public static final int spoken_accented_letter_1EF1=0x7f0e0153;
    /**
     * Spoken description for Unicode code point U+1EF3: "ỳ" LATIN SMALL LETTER Y WITH GRAVE
     */
    public static final int spoken_accented_letter_1EF3=0x7f0e0154;
    /**
     * Spoken description for Unicode code point U+1EF5: "ỵ" LATIN SMALL LETTER Y WITH DOT BELOW
     */
    public static final int spoken_accented_letter_1EF5=0x7f0e0155;
    /**
     * Spoken description for Unicode code point U+1EF7: "ỷ" LATIN SMALL LETTER Y WITH HOOK ABOVE
     */
    public static final int spoken_accented_letter_1EF7=0x7f0e0156;
    /**
     * Spoken description for Unicode code point U+1EF9: "ỹ" LATIN SMALL LETTER Y WITH TILDE
     */
    public static final int spoken_accented_letter_1EF9=0x7f0e0157;
    /**
     * Spoken description to let the user know what auto-correction will be performed when a key is pressed. An auto-correction replaces a single word with one or more words.
     */
    public static final int spoken_auto_correct=0x7f0e0158;
    /**
     * Spoken description used during obscured (e.g. password) entry to let the user know that auto-correction will be performed when a key is pressed.
     */
    public static final int spoken_auto_correct_obscured=0x7f0e0159;
    /**
     * Spoken descriptions when closing a more keys keyboard that has alternative characters.
     */
    public static final int spoken_close_more_keys_keyboard=0x7f0e015a;
    /**
     * Spoken descriptions when closing a more suggestions panel that has alternative suggested words.
     */
    public static final int spoken_close_more_suggestions=0x7f0e015b;
    /**
     * Spoken description for the currently entered text
     */
    public static final int spoken_current_text_is=0x7f0e015c;
    /**
     * Spoken description for the "Next" action keyboard key.
     */
    public static final int spoken_description_action_next=0x7f0e015d;
    /**
     * Spoken description for the "Previous" action keyboard key.
     */
    public static final int spoken_description_action_previous=0x7f0e015e;
    /**
     * Spoken description for the "Shift" keyboard key when "Caps lock" is on.
     */
    public static final int spoken_description_caps_lock=0x7f0e015f;
    /**
     * Spoken description for the "Delete" keyboard key.
     */
    public static final int spoken_description_delete=0x7f0e0160;
    /**
     * Spoken description for the "U+2022" (BULLET) keyboard key.
     */
    public static final int spoken_description_dot=0x7f0e0161;
    /**
     * Spoken description for the "Emoji" keyboard key.
     */
    public static final int spoken_description_emoji=0x7f0e0162;
    /**
     * Spoken description for the "Switch language" keyboard key.
     */
    public static final int spoken_description_language_switch=0x7f0e0163;
    /**
     * Spoken description for the "Mic" keyboard key.
     */
    public static final int spoken_description_mic=0x7f0e0164;
    /**
     * Spoken feedback after changing to the alphanumeric keyboard.
     */
    public static final int spoken_description_mode_alpha=0x7f0e0165;
    /**
     * Spoken feedback after changing to the phone dialer keyboard.
     */
    public static final int spoken_description_mode_phone=0x7f0e0166;
    /**
     * Spoken feedback after changing to the shifted phone dialer (symbols) keyboard.
     */
    public static final int spoken_description_mode_phone_shift=0x7f0e0167;
    /**
     * Spoken feedback after changing to the symbols keyboard.
     */
    public static final int spoken_description_mode_symbol=0x7f0e0168;
    /**
     * Spoken feedback after changing to the 2nd symbols (a.k.a. symbols shift) keyboard.
     */
    public static final int spoken_description_mode_symbol_shift=0x7f0e0169;
    /**
     * Spoken description for the "Return" keyboard key.
     */
    public static final int spoken_description_return=0x7f0e016a;
    /**
     * Spoken description for the "Search" keyboard key.
     */
    public static final int spoken_description_search=0x7f0e016b;
    /**
     * Spoken description for the "Settings" keyboard key.
     */
    public static final int spoken_description_settings=0x7f0e016c;
    /**
     * Spoken description for the "Shift" keyboard key when "Shift" is off.
     */
    public static final int spoken_description_shift=0x7f0e016d;
    /**
     * Spoken description for the "Shift" keyboard key when "Shift" is on.
     */
    public static final int spoken_description_shift_shifted=0x7f0e016e;
    /**
     * Spoken feedback after turning "Caps lock" mode on.
     */
    public static final int spoken_description_shiftmode_locked=0x7f0e016f;
    /**
     * Spoken feedback after turning "Shift" mode on.
     */
    public static final int spoken_description_shiftmode_on=0x7f0e0170;
    /**
     * Spoken description for the "Space" keyboard key.
     */
    public static final int spoken_description_space=0x7f0e0171;
    /**
     * Spoken description for the "Shift" keyboard key in symbols mode.
     */
    public static final int spoken_description_symbols_shift=0x7f0e0172;
    /**
     * Spoken description for the "Shift" keyboard key in 2nd symbols (a.k.a. symbols shift) mode.
     */
    public static final int spoken_description_symbols_shift_shifted=0x7f0e0173;
    /**
     * Spoken description for the "Tab" keyboard key.
     */
    public static final int spoken_description_tab=0x7f0e0174;
    /**
     * Spoken description for the "To Alpha" keyboard key.
     */
    public static final int spoken_description_to_alpha=0x7f0e0175;
    /**
     * Spoken description for the "To Numbers" keyboard key.
     */
    public static final int spoken_description_to_numeric=0x7f0e0176;
    /**
     * Spoken description for the "To Symbol" keyboard key.
     */
    public static final int spoken_description_to_symbol=0x7f0e0177;
    /**
     * Spoken description for unknown keyboard keys.
     */
    public static final int spoken_description_unknown=0x7f0e0178;
    /**
     * Description of an upper case letter of LOWER_LETTER.
     */
    public static final int spoken_description_upper_case=0x7f0e0179;
    /**
     * Description of the emoji category icon of Activity.
     */
    public static final int spoken_descrption_emoji_category_eight_activity=0x7f0e017a;
    /**
     * Description of the emoji category icon of Animals & Nature.
     */
    public static final int spoken_descrption_emoji_category_eight_animals_nature=0x7f0e017b;
    /**
     * Description of the emoji category icon of Food & Drink.
     */
    public static final int spoken_descrption_emoji_category_eight_food_drink=0x7f0e017c;
    /**
     * Description of the emoji category icon of Smiley & People.
     */
    public static final int spoken_descrption_emoji_category_eight_smiley_people=0x7f0e017d;
    /**
     * Description of the emoji category icon of Travel & Places.
     */
    public static final int spoken_descrption_emoji_category_eight_travel_places=0x7f0e017e;
    /**
     * Description of the emoji category icon of Emoticons.
     */
    public static final int spoken_descrption_emoji_category_emoticons=0x7f0e017f;
    /**
     * Description of the emoji category icon of Flags.
     */
    public static final int spoken_descrption_emoji_category_flags=0x7f0e0180;
    /**
     * Description of the emoji category icon of Nature.
     */
    public static final int spoken_descrption_emoji_category_nature=0x7f0e0181;
    /**
     * Description of the emoji category icon of Objects.
     */
    public static final int spoken_descrption_emoji_category_objects=0x7f0e0182;
    /**
     * Description of the emoji category icon of People.
     */
    public static final int spoken_descrption_emoji_category_people=0x7f0e0183;
    /**
     * Description of the emoji category icon of Places.
     */
    public static final int spoken_descrption_emoji_category_places=0x7f0e0184;
    /**
     * Description of the emoji category icon of Recents.
     */
    public static final int spoken_descrption_emoji_category_recents=0x7f0e0185;
    /**
     * Description of the emoji category icon of Symbols.
     */
    public static final int spoken_descrption_emoji_category_symbols=0x7f0e0186;
    /**
     * Spoken description for Unicode code point sequence U+0023 U+20E3: "#⃣" KEYCAP NUMBER SIGN
     */
    public static final int spoken_emoji_0023_20E3=0x7f0e0187;
    /**
     * Spoken description for Unicode code point sequence U+002A U+20E3: "*⃣" KEYCAP ASTERISK
     */
    public static final int spoken_emoji_002A_20E3=0x7f0e0188;
    /**
     * Spoken description for Unicode code point sequence U+0030 U+20E3: "0⃣" KEYCAP DIGIT ZERO
     */
    public static final int spoken_emoji_0030_20E3=0x7f0e0189;
    /**
     * Spoken description for Unicode code point sequence U+0031 U+20E3: "1⃣" KEYCAP DIGIT ONE
     */
    public static final int spoken_emoji_0031_20E3=0x7f0e018a;
    /**
     * Spoken description for Unicode code point sequence U+0032 U+20E3: "2⃣" KEYCAP DIGIT TWO
     */
    public static final int spoken_emoji_0032_20E3=0x7f0e018b;
    /**
     * Spoken description for Unicode code point sequence U+0033 U+20E3: "3⃣" KEYCAP DIGIT THREE
     */
    public static final int spoken_emoji_0033_20E3=0x7f0e018c;
    /**
     * Spoken description for Unicode code point sequence U+0034 U+20E3: "4⃣" KEYCAP DIGIT FOUR
     */
    public static final int spoken_emoji_0034_20E3=0x7f0e018d;
    /**
     * Spoken description for Unicode code point sequence U+0035 U+20E3: "5⃣" KEYCAP DIGIT FIVE
     */
    public static final int spoken_emoji_0035_20E3=0x7f0e018e;
    /**
     * Spoken description for Unicode code point sequence U+0036 U+20E3: "6⃣" KEYCAP DIGIT SIX
     */
    public static final int spoken_emoji_0036_20E3=0x7f0e018f;
    /**
     * Spoken description for Unicode code point sequence U+0037 U+20E3: "7⃣" KEYCAP DIGIT SEVEN
     */
    public static final int spoken_emoji_0037_20E3=0x7f0e0190;
    /**
     * Spoken description for Unicode code point sequence U+0038 U+20E3: "8⃣" KEYCAP DIGIT EIGHT
     */
    public static final int spoken_emoji_0038_20E3=0x7f0e0191;
    /**
     * Spoken description for Unicode code point sequence U+0039 U+20E3: "9⃣" KEYCAP DIGIT NINE
     */
    public static final int spoken_emoji_0039_20E3=0x7f0e0192;
    /**
     * Spoken description for Unicode code point U+00A9: "©" COPYRIGHT SIGN
     */
    public static final int spoken_emoji_00A9=0x7f0e0193;
    /**
     * Spoken description for Unicode code point U+00AE: "®" REGISTERED SIGN
     */
    public static final int spoken_emoji_00AE=0x7f0e0194;
    /**
     * Spoken description for Unicode code point U+1F004: "🀄" MAHJONG TILE RED DRAGON
     */
    public static final int spoken_emoji_1F004=0x7f0e0195;
    /**
     * Spoken description for Unicode code point U+1F0CF: "🃏" PLAYING CARD BLACK JOKER
     */
    public static final int spoken_emoji_1F0CF=0x7f0e0196;
    /**
     * Spoken description for Unicode code point U+1F170: "🅰" NEGATIVE SQUARED LATIN CAPITAL LETTER A
     */
    public static final int spoken_emoji_1F170=0x7f0e0197;
    /**
     * Spoken description for Unicode code point U+1F171: "🅱" NEGATIVE SQUARED LATIN CAPITAL LETTER B
     */
    public static final int spoken_emoji_1F171=0x7f0e0198;
    /**
     * Spoken description for Unicode code point U+1F17E: "🅾" NEGATIVE SQUARED LATIN CAPITAL LETTER O
     */
    public static final int spoken_emoji_1F17E=0x7f0e0199;
    /**
     * Spoken description for Unicode code point U+1F17F: "🅿" NEGATIVE SQUARED LATIN CAPITAL LETTER P
     */
    public static final int spoken_emoji_1F17F=0x7f0e019a;
    /**
     * Spoken description for Unicode code point U+1F18E: "🆎" NEGATIVE SQUARED AB
     */
    public static final int spoken_emoji_1F18E=0x7f0e019b;
    /**
     * Spoken description for Unicode code point U+1F191: "🆑" SQUARED CL
     */
    public static final int spoken_emoji_1F191=0x7f0e019c;
    /**
     * Spoken description for Unicode code point U+1F192: "🆒" SQUARED COOL
     */
    public static final int spoken_emoji_1F192=0x7f0e019d;
    /**
     * Spoken description for Unicode code point U+1F193: "🆓" SQUARED FREE
     */
    public static final int spoken_emoji_1F193=0x7f0e019e;
    /**
     * Spoken description for Unicode code point U+1F194: "🆔" SQUARED ID
     */
    public static final int spoken_emoji_1F194=0x7f0e019f;
    /**
     * Spoken description for Unicode code point U+1F195: "🆕" SQUARED NEW
     */
    public static final int spoken_emoji_1F195=0x7f0e01a0;
    /**
     * Spoken description for Unicode code point U+1F196: "🆖" SQUARED NG
     */
    public static final int spoken_emoji_1F196=0x7f0e01a1;
    /**
     * Spoken description for Unicode code point U+1F197: "🆗" SQUARED OK
     */
    public static final int spoken_emoji_1F197=0x7f0e01a2;
    /**
     * Spoken description for Unicode code point U+1F198: "🆘" SQUARED SOS
     */
    public static final int spoken_emoji_1F198=0x7f0e01a3;
    /**
     * Spoken description for Unicode code point U+1F199: "🆙" SQUARED UP WITH EXCLAMATION MARK
     */
    public static final int spoken_emoji_1F199=0x7f0e01a4;
    /**
     * Spoken description for Unicode code point U+1F19A: "🆚" SQUARED VS
     */
    public static final int spoken_emoji_1F19A=0x7f0e01a5;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1E8: "🇦🇨" FLAG FOR ASCENSION ISLAND
     */
    public static final int spoken_emoji_1F1E6_1F1E8=0x7f0e01a6;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1E9: "🇦🇩" FLAG FOR ANDORRA
     */
    public static final int spoken_emoji_1F1E6_1F1E9=0x7f0e01a7;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1EA: "🇦🇪" FLAG FOR UNITED ARAB EMIRATES
     */
    public static final int spoken_emoji_1F1E6_1F1EA=0x7f0e01a8;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1EB: "🇦🇫" FLAG FOR AFGHANISTAN
     */
    public static final int spoken_emoji_1F1E6_1F1EB=0x7f0e01a9;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1EC: "🇦🇬" FLAG FOR ANTIGUA & BARBUDA
     */
    public static final int spoken_emoji_1F1E6_1F1EC=0x7f0e01aa;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1EE: "🇦🇮" FLAG FOR ANGUILLA
     */
    public static final int spoken_emoji_1F1E6_1F1EE=0x7f0e01ab;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F1: "🇦🇱" FLAG FOR ALBANIA
     */
    public static final int spoken_emoji_1F1E6_1F1F1=0x7f0e01ac;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F2: "🇦🇲" FLAG FOR ARMENIA
     */
    public static final int spoken_emoji_1F1E6_1F1F2=0x7f0e01ad;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F4: "🇦🇴" FLAG FOR ANGOLA
     */
    public static final int spoken_emoji_1F1E6_1F1F4=0x7f0e01ae;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F6: "🇦🇶" FLAG FOR ANTARCTICA
     */
    public static final int spoken_emoji_1F1E6_1F1F6=0x7f0e01af;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F7: "🇦🇷" FLAG FOR ARGENTINA
     */
    public static final int spoken_emoji_1F1E6_1F1F7=0x7f0e01b0;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F8: "🇦🇸" FLAG FOR AMERICAN SAMOA
     */
    public static final int spoken_emoji_1F1E6_1F1F8=0x7f0e01b1;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1F9: "🇦🇹" FLAG FOR AUSTRIA
     */
    public static final int spoken_emoji_1F1E6_1F1F9=0x7f0e01b2;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1FA: "🇦🇺" FLAG FOR AUSTRALIA
     */
    public static final int spoken_emoji_1F1E6_1F1FA=0x7f0e01b3;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1FC: "🇦🇼" FLAG FOR ARUBA
     */
    public static final int spoken_emoji_1F1E6_1F1FC=0x7f0e01b4;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1FD: "🇦🇽" FLAG FOR ÅLAND ISLANDS
     */
    public static final int spoken_emoji_1F1E6_1F1FD=0x7f0e01b5;
    /**
     * Spoken description for Unicode code point sequence U+1F1E6 U+1F1FF: "🇦🇿" FLAG FOR AZERBAIJAN
     */
    public static final int spoken_emoji_1F1E6_1F1FF=0x7f0e01b6;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1E6: "🇧🇦" FLAG FOR BOSNIA & HERZEGOVINA
     */
    public static final int spoken_emoji_1F1E7_1F1E6=0x7f0e01b7;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1E7: "🇧🇧" FLAG FOR BARBADOS
     */
    public static final int spoken_emoji_1F1E7_1F1E7=0x7f0e01b8;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1E9: "🇧🇩" FLAG FOR BANGLADESH
     */
    public static final int spoken_emoji_1F1E7_1F1E9=0x7f0e01b9;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1EA: "🇧🇪" FLAG FOR BELGIUM
     */
    public static final int spoken_emoji_1F1E7_1F1EA=0x7f0e01ba;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1EB: "🇧🇫" FLAG FOR BURKINA FASO
     */
    public static final int spoken_emoji_1F1E7_1F1EB=0x7f0e01bb;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1EC: "🇧🇬" FLAG FOR BULGARIA
     */
    public static final int spoken_emoji_1F1E7_1F1EC=0x7f0e01bc;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1ED: "🇧🇭" FLAG FOR BAHRAIN
     */
    public static final int spoken_emoji_1F1E7_1F1ED=0x7f0e01bd;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1EE: "🇧🇮" FLAG FOR BURUNDI
     */
    public static final int spoken_emoji_1F1E7_1F1EE=0x7f0e01be;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1EF: "🇧🇯" FLAG FOR BENIN
     */
    public static final int spoken_emoji_1F1E7_1F1EF=0x7f0e01bf;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F1: "🇧🇱" FLAG FOR ST. BARTHÉLEMY
     */
    public static final int spoken_emoji_1F1E7_1F1F1=0x7f0e01c0;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F2: "🇧🇲" FLAG FOR BERMUDA
     */
    public static final int spoken_emoji_1F1E7_1F1F2=0x7f0e01c1;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F3: "🇧🇳" FLAG FOR BRUNEI
     */
    public static final int spoken_emoji_1F1E7_1F1F3=0x7f0e01c2;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F4: "🇧🇴" FLAG FOR BOLIVIA
     */
    public static final int spoken_emoji_1F1E7_1F1F4=0x7f0e01c3;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F6: "🇧🇶" FLAG FOR CARIBBEAN NETHERLANDS
     */
    public static final int spoken_emoji_1F1E7_1F1F6=0x7f0e01c4;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F7: "🇧🇷" FLAG FOR BRAZIL
     */
    public static final int spoken_emoji_1F1E7_1F1F7=0x7f0e01c5;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F8: "🇧🇸" FLAG FOR BAHAMAS
     */
    public static final int spoken_emoji_1F1E7_1F1F8=0x7f0e01c6;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1F9: "🇧🇹" FLAG FOR BHUTAN
     */
    public static final int spoken_emoji_1F1E7_1F1F9=0x7f0e01c7;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1FB: "🇧🇻" FLAG FOR BOUVET ISLAND
     */
    public static final int spoken_emoji_1F1E7_1F1FB=0x7f0e01c8;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1FC: "🇧🇼" FLAG FOR BOTSWANA
     */
    public static final int spoken_emoji_1F1E7_1F1FC=0x7f0e01c9;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1FE: "🇧🇾" FLAG FOR BELARUS
     */
    public static final int spoken_emoji_1F1E7_1F1FE=0x7f0e01ca;
    /**
     * Spoken description for Unicode code point sequence U+1F1E7 U+1F1FF: "🇧🇿" FLAG FOR BELIZE
     */
    public static final int spoken_emoji_1F1E7_1F1FF=0x7f0e01cb;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1E6: "🇨🇦" FLAG FOR CANADA
     */
    public static final int spoken_emoji_1F1E8_1F1E6=0x7f0e01cc;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1E8: "🇨🇨" FLAG FOR COCOS ISLANDS
     */
    public static final int spoken_emoji_1F1E8_1F1E8=0x7f0e01cd;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1E9: "🇨🇩" FLAG FOR CONGO - KINSHASA
     */
    public static final int spoken_emoji_1F1E8_1F1E9=0x7f0e01ce;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1EB: "🇨🇫" FLAG FOR CENTRAL AFRICAN REPUBLIC
     */
    public static final int spoken_emoji_1F1E8_1F1EB=0x7f0e01cf;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1EC: "🇨🇬" FLAG FOR CONGO - BRAZZAVILLE
     */
    public static final int spoken_emoji_1F1E8_1F1EC=0x7f0e01d0;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1ED: "🇨🇭" FLAG FOR SWITZERLAND
     */
    public static final int spoken_emoji_1F1E8_1F1ED=0x7f0e01d1;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1EE: "🇨🇮" FLAG FOR CÔTE D'IVOIRE
     */
    public static final int spoken_emoji_1F1E8_1F1EE=0x7f0e01d2;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F0: "🇨🇰" FLAG FOR COOK ISLANDS
     */
    public static final int spoken_emoji_1F1E8_1F1F0=0x7f0e01d3;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F1: "🇨🇱" FLAG FOR CHILE
     */
    public static final int spoken_emoji_1F1E8_1F1F1=0x7f0e01d4;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F2: "🇨🇲" FLAG FOR CAMEROON
     */
    public static final int spoken_emoji_1F1E8_1F1F2=0x7f0e01d5;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F3: "🇨🇳" FLAG FOR CHINA
     */
    public static final int spoken_emoji_1F1E8_1F1F3=0x7f0e01d6;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F4: "🇨🇴" FLAG FOR COLOMBIA
     */
    public static final int spoken_emoji_1F1E8_1F1F4=0x7f0e01d7;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F5: "🇨🇵" FLAG FOR CLIPPERTON ISLAND
     */
    public static final int spoken_emoji_1F1E8_1F1F5=0x7f0e01d8;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1F7: "🇨🇷" FLAG FOR COSTA RICA
     */
    public static final int spoken_emoji_1F1E8_1F1F7=0x7f0e01d9;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FA: "🇨🇺" FLAG FOR CUBA
     */
    public static final int spoken_emoji_1F1E8_1F1FA=0x7f0e01da;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FB: "🇨🇻" FLAG FOR CAPE VERDE
     */
    public static final int spoken_emoji_1F1E8_1F1FB=0x7f0e01db;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FC: "🇨🇼" FLAG FOR CURAÇAO
     */
    public static final int spoken_emoji_1F1E8_1F1FC=0x7f0e01dc;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FD: "🇨🇽" FLAG FOR CHRISTMAS ISLAND
     */
    public static final int spoken_emoji_1F1E8_1F1FD=0x7f0e01dd;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FE: "🇨🇾" FLAG FOR CYPRUS
     */
    public static final int spoken_emoji_1F1E8_1F1FE=0x7f0e01de;
    /**
     * Spoken description for Unicode code point sequence U+1F1E8 U+1F1FF: "🇨🇿" FLAG FOR CZECH REPUBLIC
     */
    public static final int spoken_emoji_1F1E8_1F1FF=0x7f0e01df;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1EA: "🇩🇪" FLAG FOR GERMANY
     */
    public static final int spoken_emoji_1F1E9_1F1EA=0x7f0e01e0;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1EC: "🇩🇬" FLAG FOR DIEGO GARCIA
     */
    public static final int spoken_emoji_1F1E9_1F1EC=0x7f0e01e1;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1EF: "🇩🇯" FLAG FOR DJIBOUTI
     */
    public static final int spoken_emoji_1F1E9_1F1EF=0x7f0e01e2;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1F0: "🇩🇰" FLAG FOR DENMARK
     */
    public static final int spoken_emoji_1F1E9_1F1F0=0x7f0e01e3;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1F2: "🇩🇲" FLAG FOR DOMINICA
     */
    public static final int spoken_emoji_1F1E9_1F1F2=0x7f0e01e4;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1F4: "🇩🇴" FLAG FOR DOMINICAN REPUBLIC
     */
    public static final int spoken_emoji_1F1E9_1F1F4=0x7f0e01e5;
    /**
     * Spoken description for Unicode code point sequence U+1F1E9 U+1F1FF: "🇩🇿" FLAG FOR ALGERIA
     */
    public static final int spoken_emoji_1F1E9_1F1FF=0x7f0e01e6;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1E6: "🇪🇦" FLAG FOR CEUTA & MELILLA
     */
    public static final int spoken_emoji_1F1EA_1F1E6=0x7f0e01e7;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1E8: "🇪🇨" FLAG FOR ECUADOR
     */
    public static final int spoken_emoji_1F1EA_1F1E8=0x7f0e01e8;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1EA: "🇪🇪" FLAG FOR ESTONIA
     */
    public static final int spoken_emoji_1F1EA_1F1EA=0x7f0e01e9;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1EC: "🇪🇬" FLAG FOR EGYPT
     */
    public static final int spoken_emoji_1F1EA_1F1EC=0x7f0e01ea;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1ED: "🇪🇭" FLAG FOR WESTERN SAHARA
     */
    public static final int spoken_emoji_1F1EA_1F1ED=0x7f0e01eb;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1F7: "🇪🇷" FLAG FOR ERITREA
     */
    public static final int spoken_emoji_1F1EA_1F1F7=0x7f0e01ec;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1F8: "🇪🇸" FLAG FOR SPAIN
     */
    public static final int spoken_emoji_1F1EA_1F1F8=0x7f0e01ed;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1F9: "🇪🇹" FLAG FOR ETHIOPIA
     */
    public static final int spoken_emoji_1F1EA_1F1F9=0x7f0e01ee;
    /**
     * Spoken description for Unicode code point sequence U+1F1EA U+1F1FA: "🇪🇺" FLAG FOR EUROPEAN UNION
     */
    public static final int spoken_emoji_1F1EA_1F1FA=0x7f0e01ef;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1EE: "🇫🇮" FLAG FOR FINLAND
     */
    public static final int spoken_emoji_1F1EB_1F1EE=0x7f0e01f0;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1EF: "🇫🇯" FLAG FOR FIJI
     */
    public static final int spoken_emoji_1F1EB_1F1EF=0x7f0e01f1;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1F0: "🇫🇰" FLAG FOR FALKLAND ISLANDS
     */
    public static final int spoken_emoji_1F1EB_1F1F0=0x7f0e01f2;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1F2: "🇫🇲" FLAG FOR MICRONESIA
     */
    public static final int spoken_emoji_1F1EB_1F1F2=0x7f0e01f3;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1F4: "🇫🇴" FLAG FOR FAROE ISLANDS
     */
    public static final int spoken_emoji_1F1EB_1F1F4=0x7f0e01f4;
    /**
     * Spoken description for Unicode code point sequence U+1F1EB U+1F1F7: "🇫🇷" FLAG FOR FRANCE
     */
    public static final int spoken_emoji_1F1EB_1F1F7=0x7f0e01f5;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1E6: "🇬🇦" FLAG FOR GABON
     */
    public static final int spoken_emoji_1F1EC_1F1E6=0x7f0e01f6;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1E7: "🇬🇧" FLAG FOR UNITED KINGDOM
     */
    public static final int spoken_emoji_1F1EC_1F1E7=0x7f0e01f7;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1E9: "🇬🇩" FLAG FOR GRENADA
     */
    public static final int spoken_emoji_1F1EC_1F1E9=0x7f0e01f8;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1EA: "🇬🇪" FLAG FOR GEORGIA
     */
    public static final int spoken_emoji_1F1EC_1F1EA=0x7f0e01f9;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1EB: "🇬🇫" FLAG FOR FRENCH GUIANA
     */
    public static final int spoken_emoji_1F1EC_1F1EB=0x7f0e01fa;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1EC: "🇬🇬" FLAG FOR GUERNSEY
     */
    public static final int spoken_emoji_1F1EC_1F1EC=0x7f0e01fb;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1ED: "🇬🇭" FLAG FOR GHANA
     */
    public static final int spoken_emoji_1F1EC_1F1ED=0x7f0e01fc;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1EE: "🇬🇮" FLAG FOR GIBRALTAR
     */
    public static final int spoken_emoji_1F1EC_1F1EE=0x7f0e01fd;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F1: "🇬🇱" FLAG FOR GREENLAND
     */
    public static final int spoken_emoji_1F1EC_1F1F1=0x7f0e01fe;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F2: "🇬🇲" FLAG FOR GAMBIA
     */
    public static final int spoken_emoji_1F1EC_1F1F2=0x7f0e01ff;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F3: "🇬🇳" FLAG FOR GUINEA
     */
    public static final int spoken_emoji_1F1EC_1F1F3=0x7f0e0200;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F5: "🇬🇵" FLAG FOR GUADELOUPE
     */
    public static final int spoken_emoji_1F1EC_1F1F5=0x7f0e0201;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F6: "🇬🇶" FLAG FOR EQUATORIAL GUINEA
     */
    public static final int spoken_emoji_1F1EC_1F1F6=0x7f0e0202;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F7: "🇬🇷" FLAG FOR GREECE
     */
    public static final int spoken_emoji_1F1EC_1F1F7=0x7f0e0203;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F8: "🇬🇸" FLAG FOR SOUTH GEORGIA & SOUTH SANDWICH ISLANDS
     */
    public static final int spoken_emoji_1F1EC_1F1F8=0x7f0e0204;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1F9: "🇬🇹" FLAG FOR GUATEMALA
     */
    public static final int spoken_emoji_1F1EC_1F1F9=0x7f0e0205;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1FA: "🇬🇺" FLAG FOR GUAM
     */
    public static final int spoken_emoji_1F1EC_1F1FA=0x7f0e0206;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1FC: "🇬🇼" FLAG FOR GUINEA-BISSAU
     */
    public static final int spoken_emoji_1F1EC_1F1FC=0x7f0e0207;
    /**
     * Spoken description for Unicode code point sequence U+1F1EC U+1F1FE: "🇬🇾" FLAG FOR GUYANA
     */
    public static final int spoken_emoji_1F1EC_1F1FE=0x7f0e0208;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1F0: "🇭🇰" FLAG FOR HONG KONG
     */
    public static final int spoken_emoji_1F1ED_1F1F0=0x7f0e0209;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1F2: "🇭🇲" FLAG FOR HEARD & MCDONALD ISLANDS
     */
    public static final int spoken_emoji_1F1ED_1F1F2=0x7f0e020a;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1F3: "🇭🇳" FLAG FOR HONDURAS
     */
    public static final int spoken_emoji_1F1ED_1F1F3=0x7f0e020b;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1F7: "🇭🇷" FLAG FOR CROATIA
     */
    public static final int spoken_emoji_1F1ED_1F1F7=0x7f0e020c;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1F9: "🇭🇹" FLAG FOR HAITI
     */
    public static final int spoken_emoji_1F1ED_1F1F9=0x7f0e020d;
    /**
     * Spoken description for Unicode code point sequence U+1F1ED U+1F1FA: "🇭🇺" FLAG FOR HUNGARY
     */
    public static final int spoken_emoji_1F1ED_1F1FA=0x7f0e020e;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1E8: "🇮🇨" FLAG FOR CANARY ISLANDS
     */
    public static final int spoken_emoji_1F1EE_1F1E8=0x7f0e020f;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1E9: "🇮🇩" FLAG FOR INDONESIA
     */
    public static final int spoken_emoji_1F1EE_1F1E9=0x7f0e0210;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1EA: "🇮🇪" FLAG FOR IRELAND
     */
    public static final int spoken_emoji_1F1EE_1F1EA=0x7f0e0211;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F1: "🇮🇱" FLAG FOR ISRAEL
     */
    public static final int spoken_emoji_1F1EE_1F1F1=0x7f0e0212;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F2: "🇮🇲" FLAG FOR ISLE OF MAN
     */
    public static final int spoken_emoji_1F1EE_1F1F2=0x7f0e0213;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F3: "🇮🇳" FLAG FOR INDIA
     */
    public static final int spoken_emoji_1F1EE_1F1F3=0x7f0e0214;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F4: "🇮🇴" FLAG FOR BRITISH INDIAN OCEAN TERRITORY
     */
    public static final int spoken_emoji_1F1EE_1F1F4=0x7f0e0215;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F6: "🇮🇶" FLAG FOR IRAQ
     */
    public static final int spoken_emoji_1F1EE_1F1F6=0x7f0e0216;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F7: "🇮🇷" FLAG FOR IRAN
     */
    public static final int spoken_emoji_1F1EE_1F1F7=0x7f0e0217;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F8: "🇮🇸" FLAG FOR ICELAND
     */
    public static final int spoken_emoji_1F1EE_1F1F8=0x7f0e0218;
    /**
     * Spoken description for Unicode code point sequence U+1F1EE U+1F1F9: "🇮🇹" FLAG FOR ITALY
     */
    public static final int spoken_emoji_1F1EE_1F1F9=0x7f0e0219;
    /**
     * Spoken description for Unicode code point sequence U+1F1EF U+1F1EA: "🇯🇪" FLAG FOR JERSEY
     */
    public static final int spoken_emoji_1F1EF_1F1EA=0x7f0e021a;
    /**
     * Spoken description for Unicode code point sequence U+1F1EF U+1F1F2: "🇯🇲" FLAG FOR JAMAICA
     */
    public static final int spoken_emoji_1F1EF_1F1F2=0x7f0e021b;
    /**
     * Spoken description for Unicode code point sequence U+1F1EF U+1F1F4: "🇯🇴" FLAG FOR JORDAN
     */
    public static final int spoken_emoji_1F1EF_1F1F4=0x7f0e021c;
    /**
     * Spoken description for Unicode code point sequence U+1F1EF U+1F1F5: "🇯🇵" FLAG FOR JAPAN
     */
    public static final int spoken_emoji_1F1EF_1F1F5=0x7f0e021d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1EA: "🇰🇪" FLAG FOR KENYA
     */
    public static final int spoken_emoji_1F1F0_1F1EA=0x7f0e021e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1EC: "🇰🇬" FLAG FOR KYRGYZSTAN
     */
    public static final int spoken_emoji_1F1F0_1F1EC=0x7f0e021f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1ED: "🇰🇭" FLAG FOR CAMBODIA
     */
    public static final int spoken_emoji_1F1F0_1F1ED=0x7f0e0220;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1EE: "🇰🇮" FLAG FOR KIRIBATI
     */
    public static final int spoken_emoji_1F1F0_1F1EE=0x7f0e0221;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1F2: "🇰🇲" FLAG FOR COMOROS
     */
    public static final int spoken_emoji_1F1F0_1F1F2=0x7f0e0222;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1F3: "🇰🇳" FLAG FOR ST. KITTS & NEVIS
     */
    public static final int spoken_emoji_1F1F0_1F1F3=0x7f0e0223;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1F5: "🇰🇵" FLAG FOR NORTH KOREA
     */
    public static final int spoken_emoji_1F1F0_1F1F5=0x7f0e0224;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1F7: "🇰🇷" FLAG FOR SOUTH KOREA
     */
    public static final int spoken_emoji_1F1F0_1F1F7=0x7f0e0225;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1FC: "🇰🇼" FLAG FOR KUWAIT
     */
    public static final int spoken_emoji_1F1F0_1F1FC=0x7f0e0226;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1FE: "🇰🇾" FLAG FOR CAYMAN ISLANDS
     */
    public static final int spoken_emoji_1F1F0_1F1FE=0x7f0e0227;
    /**
     * Spoken description for Unicode code point sequence U+1F1F0 U+1F1FF: "🇰🇿" FLAG FOR KAZAKHSTAN
     */
    public static final int spoken_emoji_1F1F0_1F1FF=0x7f0e0228;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1E6: "🇱🇦" FLAG FOR LAOS
     */
    public static final int spoken_emoji_1F1F1_1F1E6=0x7f0e0229;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1E7: "🇱🇧" FLAG FOR LEBANON
     */
    public static final int spoken_emoji_1F1F1_1F1E7=0x7f0e022a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1E8: "🇱🇨" FLAG FOR ST. LUCIA
     */
    public static final int spoken_emoji_1F1F1_1F1E8=0x7f0e022b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1EE: "🇱🇮" FLAG FOR LIECHTENSTEIN
     */
    public static final int spoken_emoji_1F1F1_1F1EE=0x7f0e022c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1F0: "🇱🇰" FLAG FOR SRI LANKA
     */
    public static final int spoken_emoji_1F1F1_1F1F0=0x7f0e022d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1F7: "🇱🇷" FLAG FOR LIBERIA
     */
    public static final int spoken_emoji_1F1F1_1F1F7=0x7f0e022e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1F8: "🇱🇸" FLAG FOR LESOTHO
     */
    public static final int spoken_emoji_1F1F1_1F1F8=0x7f0e022f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1F9: "🇱🇹" FLAG FOR LITHUANIA
     */
    public static final int spoken_emoji_1F1F1_1F1F9=0x7f0e0230;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1FA: "🇱🇺" FLAG FOR LUXEMBOURG
     */
    public static final int spoken_emoji_1F1F1_1F1FA=0x7f0e0231;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1FB: "🇱🇻" FLAG FOR LATVIA
     */
    public static final int spoken_emoji_1F1F1_1F1FB=0x7f0e0232;
    /**
     * Spoken description for Unicode code point sequence U+1F1F1 U+1F1FE: "🇱🇾" FLAG FOR LIBYA
     */
    public static final int spoken_emoji_1F1F1_1F1FE=0x7f0e0233;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1E6: "🇲🇦" FLAG FOR MOROCCO
     */
    public static final int spoken_emoji_1F1F2_1F1E6=0x7f0e0234;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1E8: "🇲🇨" FLAG FOR MONACO
     */
    public static final int spoken_emoji_1F1F2_1F1E8=0x7f0e0235;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1E9: "🇲🇩" FLAG FOR MOLDOVA
     */
    public static final int spoken_emoji_1F1F2_1F1E9=0x7f0e0236;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1EA: "🇲🇪" FLAG FOR MONTENEGRO
     */
    public static final int spoken_emoji_1F1F2_1F1EA=0x7f0e0237;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1EB: "🇲🇫" FLAG FOR ST. MARTIN
     */
    public static final int spoken_emoji_1F1F2_1F1EB=0x7f0e0238;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1EC: "🇲🇬" FLAG FOR MADAGASCAR
     */
    public static final int spoken_emoji_1F1F2_1F1EC=0x7f0e0239;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1ED: "🇲🇭" FLAG FOR MARSHALL ISLANDS
     */
    public static final int spoken_emoji_1F1F2_1F1ED=0x7f0e023a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F0: "🇲🇰" FLAG FOR MACEDONIA
     */
    public static final int spoken_emoji_1F1F2_1F1F0=0x7f0e023b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F1: "🇲🇱" FLAG FOR MALI
     */
    public static final int spoken_emoji_1F1F2_1F1F1=0x7f0e023c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F2: "🇲🇲" FLAG FOR MYANMAR
     */
    public static final int spoken_emoji_1F1F2_1F1F2=0x7f0e023d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F3: "🇲🇳" FLAG FOR MONGOLIA
     */
    public static final int spoken_emoji_1F1F2_1F1F3=0x7f0e023e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F4: "🇲🇴" FLAG FOR MACAU
     */
    public static final int spoken_emoji_1F1F2_1F1F4=0x7f0e023f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F5: "🇲🇵" FLAG FOR NORTHERN MARIANA ISLANDS
     */
    public static final int spoken_emoji_1F1F2_1F1F5=0x7f0e0240;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F6: "🇲🇶" FLAG FOR MARTINIQUE
     */
    public static final int spoken_emoji_1F1F2_1F1F6=0x7f0e0241;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F7: "🇲🇷" FLAG FOR MAURITANIA
     */
    public static final int spoken_emoji_1F1F2_1F1F7=0x7f0e0242;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F8: "🇲🇸" FLAG FOR MONTSERRAT
     */
    public static final int spoken_emoji_1F1F2_1F1F8=0x7f0e0243;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1F9: "🇲🇹" FLAG FOR MALTA
     */
    public static final int spoken_emoji_1F1F2_1F1F9=0x7f0e0244;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FA: "🇲🇺" FLAG FOR MAURITIUS
     */
    public static final int spoken_emoji_1F1F2_1F1FA=0x7f0e0245;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FB: "🇲🇻" FLAG FOR MALDIVES
     */
    public static final int spoken_emoji_1F1F2_1F1FB=0x7f0e0246;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FC: "🇲🇼" FLAG FOR MALAWI
     */
    public static final int spoken_emoji_1F1F2_1F1FC=0x7f0e0247;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FD: "🇲🇽" FLAG FOR MEXICO
     */
    public static final int spoken_emoji_1F1F2_1F1FD=0x7f0e0248;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FE: "🇲🇾" FLAG FOR MALAYSIA
     */
    public static final int spoken_emoji_1F1F2_1F1FE=0x7f0e0249;
    /**
     * Spoken description for Unicode code point sequence U+1F1F2 U+1F1FF: "🇲🇿" FLAG FOR MOZAMBIQUE
     */
    public static final int spoken_emoji_1F1F2_1F1FF=0x7f0e024a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1E6: "🇳🇦" FLAG FOR NAMIBIA
     */
    public static final int spoken_emoji_1F1F3_1F1E6=0x7f0e024b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1E8: "🇳🇨" FLAG FOR NEW CALEDONIA
     */
    public static final int spoken_emoji_1F1F3_1F1E8=0x7f0e024c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1EA: "🇳🇪" FLAG FOR NIGER
     */
    public static final int spoken_emoji_1F1F3_1F1EA=0x7f0e024d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1EB: "🇳🇫" FLAG FOR NORFOLK ISLAND
     */
    public static final int spoken_emoji_1F1F3_1F1EB=0x7f0e024e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1EC: "🇳🇬" FLAG FOR NIGERIA
     */
    public static final int spoken_emoji_1F1F3_1F1EC=0x7f0e024f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1EE: "🇳🇮" FLAG FOR NICARAGUA
     */
    public static final int spoken_emoji_1F1F3_1F1EE=0x7f0e0250;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1F1: "🇳🇱" FLAG FOR NETHERLANDS
     */
    public static final int spoken_emoji_1F1F3_1F1F1=0x7f0e0251;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1F4: "🇳🇴" FLAG FOR NORWAY
     */
    public static final int spoken_emoji_1F1F3_1F1F4=0x7f0e0252;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1F5: "🇳🇵" FLAG FOR NEPAL
     */
    public static final int spoken_emoji_1F1F3_1F1F5=0x7f0e0253;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1F7: "🇳🇷" FLAG FOR NAURU
     */
    public static final int spoken_emoji_1F1F3_1F1F7=0x7f0e0254;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1FA: "🇳🇺" FLAG FOR NIUE
     */
    public static final int spoken_emoji_1F1F3_1F1FA=0x7f0e0255;
    /**
     * Spoken description for Unicode code point sequence U+1F1F3 U+1F1FF: "🇳🇿" FLAG FOR NEW ZEALAND
     */
    public static final int spoken_emoji_1F1F3_1F1FF=0x7f0e0256;
    /**
     * Spoken description for Unicode code point sequence U+1F1F4 U+1F1F2: "🇴🇲" FLAG FOR OMAN
     */
    public static final int spoken_emoji_1F1F4_1F1F2=0x7f0e0257;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1E6: "🇵🇦" FLAG FOR PANAMA
     */
    public static final int spoken_emoji_1F1F5_1F1E6=0x7f0e0258;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1EA: "🇵🇪" FLAG FOR PERU
     */
    public static final int spoken_emoji_1F1F5_1F1EA=0x7f0e0259;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1EB: "🇵🇫" FLAG FOR FRENCH POLYNESIA
     */
    public static final int spoken_emoji_1F1F5_1F1EB=0x7f0e025a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1EC: "🇵🇬" FLAG FOR PAPUA NEW GUINEA
     */
    public static final int spoken_emoji_1F1F5_1F1EC=0x7f0e025b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1ED: "🇵🇭" FLAG FOR PHILIPPINES
     */
    public static final int spoken_emoji_1F1F5_1F1ED=0x7f0e025c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F0: "🇵🇰" FLAG FOR PAKISTAN
     */
    public static final int spoken_emoji_1F1F5_1F1F0=0x7f0e025d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F1: "🇵🇱" FLAG FOR POLAND
     */
    public static final int spoken_emoji_1F1F5_1F1F1=0x7f0e025e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F2: "🇵🇲" FLAG FOR ST. PIERRE & MIQUELON
     */
    public static final int spoken_emoji_1F1F5_1F1F2=0x7f0e025f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F3: "🇵🇳" FLAG FOR PITCAIRN ISLANDS
     */
    public static final int spoken_emoji_1F1F5_1F1F3=0x7f0e0260;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F7: "🇵🇷" FLAG FOR PUERTO RICO
     */
    public static final int spoken_emoji_1F1F5_1F1F7=0x7f0e0261;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F8: "🇵🇸" FLAG FOR PALESTINIAN TERRITORIES
     */
    public static final int spoken_emoji_1F1F5_1F1F8=0x7f0e0262;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1F9: "🇵🇹" FLAG FOR PORTUGAL
     */
    public static final int spoken_emoji_1F1F5_1F1F9=0x7f0e0263;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1FC: "🇵🇼" FLAG FOR PALAU
     */
    public static final int spoken_emoji_1F1F5_1F1FC=0x7f0e0264;
    /**
     * Spoken description for Unicode code point sequence U+1F1F5 U+1F1FE: "🇵🇾" FLAG FOR PARAGUAY
     */
    public static final int spoken_emoji_1F1F5_1F1FE=0x7f0e0265;
    /**
     * Spoken description for Unicode code point sequence U+1F1F6 U+1F1E6: "🇶🇦" FLAG FOR QATAR
     */
    public static final int spoken_emoji_1F1F6_1F1E6=0x7f0e0266;
    /**
     * Spoken description for Unicode code point sequence U+1F1F7 U+1F1EA: "🇷🇪" FLAG FOR RÉUNION
     */
    public static final int spoken_emoji_1F1F7_1F1EA=0x7f0e0267;
    /**
     * Spoken description for Unicode code point sequence U+1F1F7 U+1F1F4: "🇷🇴" FLAG FOR ROMANIA
     */
    public static final int spoken_emoji_1F1F7_1F1F4=0x7f0e0268;
    /**
     * Spoken description for Unicode code point sequence U+1F1F7 U+1F1F8: "🇷🇸" FLAG FOR SERBIA
     */
    public static final int spoken_emoji_1F1F7_1F1F8=0x7f0e0269;
    /**
     * Spoken description for Unicode code point sequence U+1F1F7 U+1F1FA: "🇷🇺" FLAG FOR RUSSIA
     */
    public static final int spoken_emoji_1F1F7_1F1FA=0x7f0e026a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F7 U+1F1FC: "🇷🇼" FLAG FOR RWANDA
     */
    public static final int spoken_emoji_1F1F7_1F1FC=0x7f0e026b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1E6: "🇸🇦" FLAG FOR SAUDI ARABIA
     */
    public static final int spoken_emoji_1F1F8_1F1E6=0x7f0e026c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1E7: "🇸🇧" FLAG FOR SOLOMON ISLANDS
     */
    public static final int spoken_emoji_1F1F8_1F1E7=0x7f0e026d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1E8: "🇸🇨" FLAG FOR SEYCHELLES
     */
    public static final int spoken_emoji_1F1F8_1F1E8=0x7f0e026e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1E9: "🇸🇩" FLAG FOR SUDAN
     */
    public static final int spoken_emoji_1F1F8_1F1E9=0x7f0e026f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1EA: "🇸🇪" FLAG FOR SWEDEN
     */
    public static final int spoken_emoji_1F1F8_1F1EA=0x7f0e0270;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1EC: "🇸🇬" FLAG FOR SINGAPORE
     */
    public static final int spoken_emoji_1F1F8_1F1EC=0x7f0e0271;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1ED: "🇸🇭" FLAG FOR ST. HELENA
     */
    public static final int spoken_emoji_1F1F8_1F1ED=0x7f0e0272;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1EE: "🇸🇮" FLAG FOR SLOVENIA
     */
    public static final int spoken_emoji_1F1F8_1F1EE=0x7f0e0273;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1EF: "🇸🇯" FLAG FOR SVALBARD & JAN MAYEN
     */
    public static final int spoken_emoji_1F1F8_1F1EF=0x7f0e0274;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F0: "🇸🇰" FLAG FOR SLOVAKIA
     */
    public static final int spoken_emoji_1F1F8_1F1F0=0x7f0e0275;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F1: "🇸🇱" FLAG FOR SIERRA LEONE
     */
    public static final int spoken_emoji_1F1F8_1F1F1=0x7f0e0276;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F2: "🇸🇲" FLAG FOR SAN MARINO
     */
    public static final int spoken_emoji_1F1F8_1F1F2=0x7f0e0277;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F3: "🇸🇳" FLAG FOR SENEGAL
     */
    public static final int spoken_emoji_1F1F8_1F1F3=0x7f0e0278;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F4: "🇸🇴" FLAG FOR SOMALIA
     */
    public static final int spoken_emoji_1F1F8_1F1F4=0x7f0e0279;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F7: "🇸🇷" FLAG FOR SURINAME
     */
    public static final int spoken_emoji_1F1F8_1F1F7=0x7f0e027a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F8: "🇸🇸" FLAG FOR SOUTH SUDAN
     */
    public static final int spoken_emoji_1F1F8_1F1F8=0x7f0e027b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1F9: "🇸🇹" FLAG FOR SÃO TOMÉ & PRÍNCIPE
     */
    public static final int spoken_emoji_1F1F8_1F1F9=0x7f0e027c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1FB: "🇸🇻" FLAG FOR EL SALVADOR
     */
    public static final int spoken_emoji_1F1F8_1F1FB=0x7f0e027d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1FD: "🇸🇽" FLAG FOR SINT MAARTEN
     */
    public static final int spoken_emoji_1F1F8_1F1FD=0x7f0e027e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1FE: "🇸🇾" FLAG FOR SYRIA
     */
    public static final int spoken_emoji_1F1F8_1F1FE=0x7f0e027f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F8 U+1F1FF: "🇸🇿" FLAG FOR SWAZILAND
     */
    public static final int spoken_emoji_1F1F8_1F1FF=0x7f0e0280;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1E6: "🇹🇦" FLAG FOR TRISTAN DA CUNHA
     */
    public static final int spoken_emoji_1F1F9_1F1E6=0x7f0e0281;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1E8: "🇹🇨" FLAG FOR TURKS & CAICOS ISLANDS
     */
    public static final int spoken_emoji_1F1F9_1F1E8=0x7f0e0282;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1E9: "🇹🇩" FLAG FOR CHAD
     */
    public static final int spoken_emoji_1F1F9_1F1E9=0x7f0e0283;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1EB: "🇹🇫" FLAG FOR FRENCH SOUTHERN TERRITORIES
     */
    public static final int spoken_emoji_1F1F9_1F1EB=0x7f0e0284;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1EC: "🇹🇬" FLAG FOR TOGO
     */
    public static final int spoken_emoji_1F1F9_1F1EC=0x7f0e0285;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1ED: "🇹🇭" FLAG FOR THAILAND
     */
    public static final int spoken_emoji_1F1F9_1F1ED=0x7f0e0286;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1EF: "🇹🇯" FLAG FOR TAJIKISTAN
     */
    public static final int spoken_emoji_1F1F9_1F1EF=0x7f0e0287;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F0: "🇹🇰" FLAG FOR TOKELAU
     */
    public static final int spoken_emoji_1F1F9_1F1F0=0x7f0e0288;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F1: "🇹🇱" FLAG FOR TIMOR-LESTE
     */
    public static final int spoken_emoji_1F1F9_1F1F1=0x7f0e0289;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F2: "🇹🇲" FLAG FOR TURKMENISTAN
     */
    public static final int spoken_emoji_1F1F9_1F1F2=0x7f0e028a;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F3: "🇹🇳" FLAG FOR TUNISIA
     */
    public static final int spoken_emoji_1F1F9_1F1F3=0x7f0e028b;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F4: "🇹🇴" FLAG FOR TONGA
     */
    public static final int spoken_emoji_1F1F9_1F1F4=0x7f0e028c;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F7: "🇹🇷" FLAG FOR TURKEY
     */
    public static final int spoken_emoji_1F1F9_1F1F7=0x7f0e028d;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1F9: "🇹🇹" FLAG FOR TRINIDAD & TOBAGO
     */
    public static final int spoken_emoji_1F1F9_1F1F9=0x7f0e028e;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1FB: "🇹🇻" FLAG FOR TUVALU
     */
    public static final int spoken_emoji_1F1F9_1F1FB=0x7f0e028f;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1FC: "🇹🇼" FLAG FOR TAIWAN
     */
    public static final int spoken_emoji_1F1F9_1F1FC=0x7f0e0290;
    /**
     * Spoken description for Unicode code point sequence U+1F1F9 U+1F1FF: "🇹🇿" FLAG FOR TANZANIA
     */
    public static final int spoken_emoji_1F1F9_1F1FF=0x7f0e0291;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1E6: "🇺🇦" FLAG FOR UKRAINE
     */
    public static final int spoken_emoji_1F1FA_1F1E6=0x7f0e0292;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1EC: "🇺🇬" FLAG FOR UGANDA
     */
    public static final int spoken_emoji_1F1FA_1F1EC=0x7f0e0293;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1F2: "🇺🇲" FLAG FOR U.S. OUTLYING ISLANDS
     */
    public static final int spoken_emoji_1F1FA_1F1F2=0x7f0e0294;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1F8: "🇺🇸" FLAG FOR UNITED STATES
     */
    public static final int spoken_emoji_1F1FA_1F1F8=0x7f0e0295;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1FE: "🇺🇾" FLAG FOR URUGUAY
     */
    public static final int spoken_emoji_1F1FA_1F1FE=0x7f0e0296;
    /**
     * Spoken description for Unicode code point sequence U+1F1FA U+1F1FF: "🇺🇿" FLAG FOR UZBEKISTAN
     */
    public static final int spoken_emoji_1F1FA_1F1FF=0x7f0e0297;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1E6: "🇻🇦" FLAG FOR VATICAN CITY
     */
    public static final int spoken_emoji_1F1FB_1F1E6=0x7f0e0298;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1E8: "🇻🇨" FLAG FOR ST. VINCENT & GRENADINES
     */
    public static final int spoken_emoji_1F1FB_1F1E8=0x7f0e0299;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1EA: "🇻🇪" FLAG FOR VENEZUELA
     */
    public static final int spoken_emoji_1F1FB_1F1EA=0x7f0e029a;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1EC: "🇻🇬" FLAG FOR BRITISH VIRGIN ISLANDS
     */
    public static final int spoken_emoji_1F1FB_1F1EC=0x7f0e029b;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1EE: "🇻🇮" FLAG FOR U.S. VIRGIN ISLANDS
     */
    public static final int spoken_emoji_1F1FB_1F1EE=0x7f0e029c;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1F3: "🇻🇳" FLAG FOR VIETNAM
     */
    public static final int spoken_emoji_1F1FB_1F1F3=0x7f0e029d;
    /**
     * Spoken description for Unicode code point sequence U+1F1FB U+1F1FA: "🇻🇺" FLAG FOR VANUATU
     */
    public static final int spoken_emoji_1F1FB_1F1FA=0x7f0e029e;
    /**
     * Spoken description for Unicode code point sequence U+1F1FC U+1F1EB: "🇼🇫" FLAG FOR WALLIS & FUTUNA
     */
    public static final int spoken_emoji_1F1FC_1F1EB=0x7f0e029f;
    /**
     * Spoken description for Unicode code point sequence U+1F1FC U+1F1F8: "🇼🇸" FLAG FOR SAMOA
     */
    public static final int spoken_emoji_1F1FC_1F1F8=0x7f0e02a0;
    /**
     * Spoken description for Unicode code point sequence U+1F1FD U+1F1F0: "🇽🇰" FLAG FOR KOSOVO
     */
    public static final int spoken_emoji_1F1FD_1F1F0=0x7f0e02a1;
    /**
     * Spoken description for Unicode code point sequence U+1F1FE U+1F1EA: "🇾🇪" FLAG FOR YEMEN
     */
    public static final int spoken_emoji_1F1FE_1F1EA=0x7f0e02a2;
    /**
     * Spoken description for Unicode code point sequence U+1F1FE U+1F1F9: "🇾🇹" FLAG FOR MAYOTTE
     */
    public static final int spoken_emoji_1F1FE_1F1F9=0x7f0e02a3;
    /**
     * Spoken description for Unicode code point sequence U+1F1FF U+1F1E6: "🇿🇦" FLAG FOR SOUTH AFRICA
     */
    public static final int spoken_emoji_1F1FF_1F1E6=0x7f0e02a4;
    /**
     * Spoken description for Unicode code point sequence U+1F1FF U+1F1F2: "🇿🇲" FLAG FOR ZAMBIA
     */
    public static final int spoken_emoji_1F1FF_1F1F2=0x7f0e02a5;
    /**
     * Spoken description for Unicode code point sequence U+1F1FF U+1F1FC: "🇿🇼" FLAG FOR ZIMBABWE
     */
    public static final int spoken_emoji_1F1FF_1F1FC=0x7f0e02a6;
    /**
     * Spoken description for Unicode code point U+1F201: "🈁" SQUARED KATAKANA KOKO
     */
    public static final int spoken_emoji_1F201=0x7f0e02a7;
    /**
     * Spoken description for Unicode code point U+1F202: "🈂" SQUARED KATAKANA SA
     */
    public static final int spoken_emoji_1F202=0x7f0e02a8;
    /**
     * Spoken description for Unicode code point U+1F21A: "🈚" SQUARED CJK UNIFIED IDEOGRAPH-7121
     */
    public static final int spoken_emoji_1F21A=0x7f0e02a9;
    /**
     * Spoken description for Unicode code point U+1F22F: "🈯" SQUARED CJK UNIFIED IDEOGRAPH-6307
     */
    public static final int spoken_emoji_1F22F=0x7f0e02aa;
    /**
     * Spoken description for Unicode code point U+1F232: "🈲" SQUARED CJK UNIFIED IDEOGRAPH-7981
     */
    public static final int spoken_emoji_1F232=0x7f0e02ab;
    /**
     * Spoken description for Unicode code point U+1F233: "🈳" SQUARED CJK UNIFIED IDEOGRAPH-7A7A
     */
    public static final int spoken_emoji_1F233=0x7f0e02ac;
    /**
     * Spoken description for Unicode code point U+1F234: "🈴" SQUARED CJK UNIFIED IDEOGRAPH-5408
     */
    public static final int spoken_emoji_1F234=0x7f0e02ad;
    /**
     * Spoken description for Unicode code point U+1F235: "🈵" SQUARED CJK UNIFIED IDEOGRAPH-6E80
     */
    public static final int spoken_emoji_1F235=0x7f0e02ae;
    /**
     * Spoken description for Unicode code point U+1F236: "🈶" SQUARED CJK UNIFIED IDEOGRAPH-6709
     */
    public static final int spoken_emoji_1F236=0x7f0e02af;
    /**
     * Spoken description for Unicode code point U+1F237: "🈷" SQUARED CJK UNIFIED IDEOGRAPH-6708
     */
    public static final int spoken_emoji_1F237=0x7f0e02b0;
    /**
     * Spoken description for Unicode code point U+1F238: "🈸" SQUARED CJK UNIFIED IDEOGRAPH-7533
     */
    public static final int spoken_emoji_1F238=0x7f0e02b1;
    /**
     * Spoken description for Unicode code point U+1F239: "🈹" SQUARED CJK UNIFIED IDEOGRAPH-5272
     */
    public static final int spoken_emoji_1F239=0x7f0e02b2;
    /**
     * Spoken description for Unicode code point U+1F23A: "🈺" SQUARED CJK UNIFIED IDEOGRAPH-55B6
     */
    public static final int spoken_emoji_1F23A=0x7f0e02b3;
    /**
     * Spoken description for Unicode code point U+1F250: "🉐" CIRCLED IDEOGRAPH ADVANTAGE
     */
    public static final int spoken_emoji_1F250=0x7f0e02b4;
    /**
     * Spoken description for Unicode code point U+1F251: "🉑" CIRCLED IDEOGRAPH ACCEPT
     */
    public static final int spoken_emoji_1F251=0x7f0e02b5;
    /**
     * Spoken description for Unicode code point U+1F300: "🌀" CYCLONE
     */
    public static final int spoken_emoji_1F300=0x7f0e02b6;
    /**
     * Spoken description for Unicode code point U+1F301: "🌁" FOGGY
     */
    public static final int spoken_emoji_1F301=0x7f0e02b7;
    /**
     * Spoken description for Unicode code point U+1F302: "🌂" CLOSED UMBRELLA
     */
    public static final int spoken_emoji_1F302=0x7f0e02b8;
    /**
     * Spoken description for Unicode code point U+1F303: "🌃" NIGHT WITH STARS
     */
    public static final int spoken_emoji_1F303=0x7f0e02b9;
    /**
     * Spoken description for Unicode code point U+1F304: "🌄" SUNRISE OVER MOUNTAINS
     */
    public static final int spoken_emoji_1F304=0x7f0e02ba;
    /**
     * Spoken description for Unicode code point U+1F305: "🌅" SUNRISE
     */
    public static final int spoken_emoji_1F305=0x7f0e02bb;
    /**
     * Spoken description for Unicode code point U+1F306: "🌆" CITYSCAPE AT DUSK
     */
    public static final int spoken_emoji_1F306=0x7f0e02bc;
    /**
     * Spoken description for Unicode code point U+1F307: "🌇" SUNSET OVER BUILDINGS
     */
    public static final int spoken_emoji_1F307=0x7f0e02bd;
    /**
     * Spoken description for Unicode code point U+1F308: "🌈" RAINBOW
     */
    public static final int spoken_emoji_1F308=0x7f0e02be;
    /**
     * Spoken description for Unicode code point U+1F309: "🌉" BRIDGE AT NIGHT
     */
    public static final int spoken_emoji_1F309=0x7f0e02bf;
    /**
     * Spoken description for Unicode code point U+1F30A: "🌊" WATER WAVE
     */
    public static final int spoken_emoji_1F30A=0x7f0e02c0;
    /**
     * Spoken description for Unicode code point U+1F30B: "🌋" VOLCANO
     */
    public static final int spoken_emoji_1F30B=0x7f0e02c1;
    /**
     * Spoken description for Unicode code point U+1F30C: "🌌" MILKY WAY
     */
    public static final int spoken_emoji_1F30C=0x7f0e02c2;
    /**
     * Spoken description for Unicode code point U+1F30D: "🌍" EARTH GLOBE EUROPE-AFRICA
     */
    public static final int spoken_emoji_1F30D=0x7f0e02c3;
    /**
     * Spoken description for Unicode code point U+1F30E: "🌎" EARTH GLOBE AMERICAS
     */
    public static final int spoken_emoji_1F30E=0x7f0e02c4;
    /**
     * Spoken description for Unicode code point U+1F30F: "🌏" EARTH GLOBE ASIA-AUSTRALIA
     */
    public static final int spoken_emoji_1F30F=0x7f0e02c5;
    /**
     * Spoken description for Unicode code point U+1F310: "🌐" GLOBE WITH MERIDIANS
     */
    public static final int spoken_emoji_1F310=0x7f0e02c6;
    /**
     * Spoken description for Unicode code point U+1F311: "🌑" NEW MOON SYMBOL
     */
    public static final int spoken_emoji_1F311=0x7f0e02c7;
    /**
     * Spoken description for Unicode code point U+1F312: "🌒" WAXING CRESCENT MOON SYMBOL
     */
    public static final int spoken_emoji_1F312=0x7f0e02c8;
    /**
     * Spoken description for Unicode code point U+1F313: "🌓" FIRST QUARTER MOON SYMBOL
     */
    public static final int spoken_emoji_1F313=0x7f0e02c9;
    /**
     * Spoken description for Unicode code point U+1F314: "🌔" WAXING GIBBOUS MOON SYMBOL
     */
    public static final int spoken_emoji_1F314=0x7f0e02ca;
    /**
     * Spoken description for Unicode code point U+1F315: "🌕" FULL MOON SYMBOL
     */
    public static final int spoken_emoji_1F315=0x7f0e02cb;
    /**
     * Spoken description for Unicode code point U+1F316: "🌖" WANING GIBBOUS MOON SYMBOL
     */
    public static final int spoken_emoji_1F316=0x7f0e02cc;
    /**
     * Spoken description for Unicode code point U+1F317: "🌗" LAST QUARTER MOON SYMBOL
     */
    public static final int spoken_emoji_1F317=0x7f0e02cd;
    /**
     * Spoken description for Unicode code point U+1F318: "🌘" WANING CRESCENT MOON SYMBOL
     */
    public static final int spoken_emoji_1F318=0x7f0e02ce;
    /**
     * Spoken description for Unicode code point U+1F319: "🌙" CRESCENT MOON
     */
    public static final int spoken_emoji_1F319=0x7f0e02cf;
    /**
     * Spoken description for Unicode code point U+1F31A: "🌚" NEW MOON WITH FACE
     */
    public static final int spoken_emoji_1F31A=0x7f0e02d0;
    /**
     * Spoken description for Unicode code point U+1F31B: "🌛" FIRST QUARTER MOON WITH FACE
     */
    public static final int spoken_emoji_1F31B=0x7f0e02d1;
    /**
     * Spoken description for Unicode code point U+1F31C: "🌜" LAST QUARTER MOON WITH FACE
     */
    public static final int spoken_emoji_1F31C=0x7f0e02d2;
    /**
     * Spoken description for Unicode code point U+1F31D: "🌝" FULL MOON WITH FACE
     */
    public static final int spoken_emoji_1F31D=0x7f0e02d3;
    /**
     * Spoken description for Unicode code point U+1F31E: "🌞" SUN WITH FACE
     */
    public static final int spoken_emoji_1F31E=0x7f0e02d4;
    /**
     * Spoken description for Unicode code point U+1F31F: "🌟" GLOWING STAR
     */
    public static final int spoken_emoji_1F31F=0x7f0e02d5;
    /**
     * Spoken description for Unicode code point U+1F320: "🌠" SHOOTING STAR
     */
    public static final int spoken_emoji_1F320=0x7f0e02d6;
    /**
     * Spoken description for Unicode code point U+1F321: "🌡" THERMOMETER
     */
    public static final int spoken_emoji_1F321=0x7f0e02d7;
    /**
     * Spoken description for Unicode code point U+1F324: "🌤" WHITE SUN WITH SMALL CLOUD
     */
    public static final int spoken_emoji_1F324=0x7f0e02d8;
    /**
     * Spoken description for Unicode code point U+1F325: "🌥" WHITE SUN BEHIND CLOUD
     */
    public static final int spoken_emoji_1F325=0x7f0e02d9;
    /**
     * Spoken description for Unicode code point U+1F326: "🌦" WHITE SUN BEHIND CLOUD WITH RAIN
     */
    public static final int spoken_emoji_1F326=0x7f0e02da;
    /**
     * Spoken description for Unicode code point U+1F327: "🌧" CLOUD WITH RAIN
     */
    public static final int spoken_emoji_1F327=0x7f0e02db;
    /**
     * Spoken description for Unicode code point U+1F328: "🌨" CLOUD WITH SNOW
     */
    public static final int spoken_emoji_1F328=0x7f0e02dc;
    /**
     * Spoken description for Unicode code point U+1F329: "🌩" CLOUD WITH LIGHTNING
     */
    public static final int spoken_emoji_1F329=0x7f0e02dd;
    /**
     * Spoken description for Unicode code point U+1F32A: "🌪" CLOUD WITH TORNADO
     */
    public static final int spoken_emoji_1F32A=0x7f0e02de;
    /**
     * Spoken description for Unicode code point U+1F32B: "🌫" FOG
     */
    public static final int spoken_emoji_1F32B=0x7f0e02df;
    /**
     * Spoken description for Unicode code point U+1F32C: "🌬" WIND BLOWING FACE
     */
    public static final int spoken_emoji_1F32C=0x7f0e02e0;
    /**
     * Spoken description for Unicode code point U+1F32D: "🌭" HOT DOG
     */
    public static final int spoken_emoji_1F32D=0x7f0e02e1;
    /**
     * Spoken description for Unicode code point U+1F32E: "🌮" TACO
     */
    public static final int spoken_emoji_1F32E=0x7f0e02e2;
    /**
     * Spoken description for Unicode code point U+1F32F: "🌯" BURRITO
     */
    public static final int spoken_emoji_1F32F=0x7f0e02e3;
    /**
     * Spoken description for Unicode code point U+1F330: "🌰" CHESTNUT
     */
    public static final int spoken_emoji_1F330=0x7f0e02e4;
    /**
     * Spoken description for Unicode code point U+1F331: "🌱" SEEDLING
     */
    public static final int spoken_emoji_1F331=0x7f0e02e5;
    /**
     * Spoken description for Unicode code point U+1F332: "🌲" EVERGREEN TREE
     */
    public static final int spoken_emoji_1F332=0x7f0e02e6;
    /**
     * Spoken description for Unicode code point U+1F333: "🌳" DECIDUOUS TREE
     */
    public static final int spoken_emoji_1F333=0x7f0e02e7;
    /**
     * Spoken description for Unicode code point U+1F334: "🌴" PALM TREE
     */
    public static final int spoken_emoji_1F334=0x7f0e02e8;
    /**
     * Spoken description for Unicode code point U+1F335: "🌵" CACTUS
     */
    public static final int spoken_emoji_1F335=0x7f0e02e9;
    /**
     * Spoken description for Unicode code point U+1F336: "🌶" HOT PEPPER
     */
    public static final int spoken_emoji_1F336=0x7f0e02ea;
    /**
     * Spoken description for Unicode code point U+1F337: "🌷" TULIP
     */
    public static final int spoken_emoji_1F337=0x7f0e02eb;
    /**
     * Spoken description for Unicode code point U+1F338: "🌸" CHERRY BLOSSOM
     */
    public static final int spoken_emoji_1F338=0x7f0e02ec;
    /**
     * Spoken description for Unicode code point U+1F339: "🌹" ROSE
     */
    public static final int spoken_emoji_1F339=0x7f0e02ed;
    /**
     * Spoken description for Unicode code point U+1F33A: "🌺" HIBISCUS
     */
    public static final int spoken_emoji_1F33A=0x7f0e02ee;
    /**
     * Spoken description for Unicode code point U+1F33B: "🌻" SUNFLOWER
     */
    public static final int spoken_emoji_1F33B=0x7f0e02ef;
    /**
     * Spoken description for Unicode code point U+1F33C: "🌼" BLOSSOM
     */
    public static final int spoken_emoji_1F33C=0x7f0e02f0;
    /**
     * Spoken description for Unicode code point U+1F33D: "🌽" EAR OF MAIZE
     */
    public static final int spoken_emoji_1F33D=0x7f0e02f1;
    /**
     * Spoken description for Unicode code point U+1F33E: "🌾" EAR OF RICE
     */
    public static final int spoken_emoji_1F33E=0x7f0e02f2;
    /**
     * Spoken description for Unicode code point U+1F33F: "🌿" HERB
     */
    public static final int spoken_emoji_1F33F=0x7f0e02f3;
    /**
     * Spoken description for Unicode code point U+1F340: "🍀" FOUR LEAF CLOVER
     */
    public static final int spoken_emoji_1F340=0x7f0e02f4;
    /**
     * Spoken description for Unicode code point U+1F341: "🍁" MAPLE LEAF
     */
    public static final int spoken_emoji_1F341=0x7f0e02f5;
    /**
     * Spoken description for Unicode code point U+1F342: "🍂" FALLEN LEAF
     */
    public static final int spoken_emoji_1F342=0x7f0e02f6;
    /**
     * Spoken description for Unicode code point U+1F343: "🍃" LEAF FLUTTERING IN WIND
     */
    public static final int spoken_emoji_1F343=0x7f0e02f7;
    /**
     * Spoken description for Unicode code point U+1F344: "🍄" MUSHROOM
     */
    public static final int spoken_emoji_1F344=0x7f0e02f8;
    /**
     * Spoken description for Unicode code point U+1F345: "🍅" TOMATO
     */
    public static final int spoken_emoji_1F345=0x7f0e02f9;
    /**
     * Spoken description for Unicode code point U+1F346: "🍆" AUBERGINE
     */
    public static final int spoken_emoji_1F346=0x7f0e02fa;
    /**
     * Spoken description for Unicode code point U+1F347: "🍇" GRAPES
     */
    public static final int spoken_emoji_1F347=0x7f0e02fb;
    /**
     * Spoken description for Unicode code point U+1F348: "🍈" MELON
     */
    public static final int spoken_emoji_1F348=0x7f0e02fc;
    /**
     * Spoken description for Unicode code point U+1F349: "🍉" WATERMELON
     */
    public static final int spoken_emoji_1F349=0x7f0e02fd;
    /**
     * Spoken description for Unicode code point U+1F34A: "🍊" TANGERINE
     */
    public static final int spoken_emoji_1F34A=0x7f0e02fe;
    /**
     * Spoken description for Unicode code point U+1F34B: "🍋" LEMON
     */
    public static final int spoken_emoji_1F34B=0x7f0e02ff;
    /**
     * Spoken description for Unicode code point U+1F34C: "🍌" BANANA
     */
    public static final int spoken_emoji_1F34C=0x7f0e0300;
    /**
     * Spoken description for Unicode code point U+1F34D: "🍍" PINEAPPLE
     */
    public static final int spoken_emoji_1F34D=0x7f0e0301;
    /**
     * Spoken description for Unicode code point U+1F34E: "🍎" RED APPLE
     */
    public static final int spoken_emoji_1F34E=0x7f0e0302;
    /**
     * Spoken description for Unicode code point U+1F34F: "🍏" GREEN APPLE
     */
    public static final int spoken_emoji_1F34F=0x7f0e0303;
    /**
     * Spoken description for Unicode code point U+1F350: "🍐" PEAR
     */
    public static final int spoken_emoji_1F350=0x7f0e0304;
    /**
     * Spoken description for Unicode code point U+1F351: "🍑" PEACH
     */
    public static final int spoken_emoji_1F351=0x7f0e0305;
    /**
     * Spoken description for Unicode code point U+1F352: "🍒" CHERRIES
     */
    public static final int spoken_emoji_1F352=0x7f0e0306;
    /**
     * Spoken description for Unicode code point U+1F353: "🍓" STRAWBERRY
     */
    public static final int spoken_emoji_1F353=0x7f0e0307;
    /**
     * Spoken description for Unicode code point U+1F354: "🍔" HAMBURGER
     */
    public static final int spoken_emoji_1F354=0x7f0e0308;
    /**
     * Spoken description for Unicode code point U+1F355: "🍕" SLICE OF PIZZA
     */
    public static final int spoken_emoji_1F355=0x7f0e0309;
    /**
     * Spoken description for Unicode code point U+1F356: "🍖" MEAT ON BONE
     */
    public static final int spoken_emoji_1F356=0x7f0e030a;
    /**
     * Spoken description for Unicode code point U+1F357: "🍗" POULTRY LEG
     */
    public static final int spoken_emoji_1F357=0x7f0e030b;
    /**
     * Spoken description for Unicode code point U+1F358: "🍘" RICE CRACKER
     */
    public static final int spoken_emoji_1F358=0x7f0e030c;
    /**
     * Spoken description for Unicode code point U+1F359: "🍙" RICE BALL
     */
    public static final int spoken_emoji_1F359=0x7f0e030d;
    /**
     * Spoken description for Unicode code point U+1F35A: "🍚" COOKED RICE
     */
    public static final int spoken_emoji_1F35A=0x7f0e030e;
    /**
     * Spoken description for Unicode code point U+1F35B: "🍛" CURRY AND RICE
     */
    public static final int spoken_emoji_1F35B=0x7f0e030f;
    /**
     * Spoken description for Unicode code point U+1F35C: "🍜" STEAMING BOWL
     */
    public static final int spoken_emoji_1F35C=0x7f0e0310;
    /**
     * Spoken description for Unicode code point U+1F35D: "🍝" SPAGHETTI
     */
    public static final int spoken_emoji_1F35D=0x7f0e0311;
    /**
     * Spoken description for Unicode code point U+1F35E: "🍞" BREAD
     */
    public static final int spoken_emoji_1F35E=0x7f0e0312;
    /**
     * Spoken description for Unicode code point U+1F35F: "🍟" FRENCH FRIES
     */
    public static final int spoken_emoji_1F35F=0x7f0e0313;
    /**
     * Spoken description for Unicode code point U+1F360: "🍠" ROASTED SWEET POTATO
     */
    public static final int spoken_emoji_1F360=0x7f0e0314;
    /**
     * Spoken description for Unicode code point U+1F361: "🍡" DANGO
     */
    public static final int spoken_emoji_1F361=0x7f0e0315;
    /**
     * Spoken description for Unicode code point U+1F362: "🍢" ODEN
     */
    public static final int spoken_emoji_1F362=0x7f0e0316;
    /**
     * Spoken description for Unicode code point U+1F363: "🍣" SUSHI
     */
    public static final int spoken_emoji_1F363=0x7f0e0317;
    /**
     * Spoken description for Unicode code point U+1F364: "🍤" FRIED SHRIMP
     */
    public static final int spoken_emoji_1F364=0x7f0e0318;
    /**
     * Spoken description for Unicode code point U+1F365: "🍥" FISH CAKE WITH SWIRL DESIGN
     */
    public static final int spoken_emoji_1F365=0x7f0e0319;
    /**
     * Spoken description for Unicode code point U+1F366: "🍦" SOFT ICE CREAM
     */
    public static final int spoken_emoji_1F366=0x7f0e031a;
    /**
     * Spoken description for Unicode code point U+1F367: "🍧" SHAVED ICE
     */
    public static final int spoken_emoji_1F367=0x7f0e031b;
    /**
     * Spoken description for Unicode code point U+1F368: "🍨" ICE CREAM
     */
    public static final int spoken_emoji_1F368=0x7f0e031c;
    /**
     * Spoken description for Unicode code point U+1F369: "🍩" DOUGHNUT
     */
    public static final int spoken_emoji_1F369=0x7f0e031d;
    /**
     * Spoken description for Unicode code point U+1F36A: "🍪" COOKIE
     */
    public static final int spoken_emoji_1F36A=0x7f0e031e;
    /**
     * Spoken description for Unicode code point U+1F36B: "🍫" CHOCOLATE BAR
     */
    public static final int spoken_emoji_1F36B=0x7f0e031f;
    /**
     * Spoken description for Unicode code point U+1F36C: "🍬" CANDY
     */
    public static final int spoken_emoji_1F36C=0x7f0e0320;
    /**
     * Spoken description for Unicode code point U+1F36D: "🍭" LOLLIPOP
     */
    public static final int spoken_emoji_1F36D=0x7f0e0321;
    /**
     * Spoken description for Unicode code point U+1F36E: "🍮" CUSTARD
     */
    public static final int spoken_emoji_1F36E=0x7f0e0322;
    /**
     * Spoken description for Unicode code point U+1F36F: "🍯" HONEY POT
     */
    public static final int spoken_emoji_1F36F=0x7f0e0323;
    /**
     * Spoken description for Unicode code point U+1F370: "🍰" SHORTCAKE
     */
    public static final int spoken_emoji_1F370=0x7f0e0324;
    /**
     * Spoken description for Unicode code point U+1F371: "🍱" BENTO BOX
     */
    public static final int spoken_emoji_1F371=0x7f0e0325;
    /**
     * Spoken description for Unicode code point U+1F372: "🍲" POT OF FOOD
     */
    public static final int spoken_emoji_1F372=0x7f0e0326;
    /**
     * Spoken description for Unicode code point U+1F373: "🍳" COOKING
     */
    public static final int spoken_emoji_1F373=0x7f0e0327;
    /**
     * Spoken description for Unicode code point U+1F374: "🍴" FORK AND KNIFE
     */
    public static final int spoken_emoji_1F374=0x7f0e0328;
    /**
     * Spoken description for Unicode code point U+1F375: "🍵" TEACUP WITHOUT HANDLE
     */
    public static final int spoken_emoji_1F375=0x7f0e0329;
    /**
     * Spoken description for Unicode code point U+1F376: "🍶" SAKE BOTTLE AND CUP
     */
    public static final int spoken_emoji_1F376=0x7f0e032a;
    /**
     * Spoken description for Unicode code point U+1F377: "🍷" WINE GLASS
     */
    public static final int spoken_emoji_1F377=0x7f0e032b;
    /**
     * Spoken description for Unicode code point U+1F378: "🍸" COCKTAIL GLASS
     */
    public static final int spoken_emoji_1F378=0x7f0e032c;
    /**
     * Spoken description for Unicode code point U+1F379: "🍹" TROPICAL DRINK
     */
    public static final int spoken_emoji_1F379=0x7f0e032d;
    /**
     * Spoken description for Unicode code point U+1F37A: "🍺" BEER MUG
     */
    public static final int spoken_emoji_1F37A=0x7f0e032e;
    /**
     * Spoken description for Unicode code point U+1F37B: "🍻" CLINKING BEER MUGS
     */
    public static final int spoken_emoji_1F37B=0x7f0e032f;
    /**
     * Spoken description for Unicode code point U+1F37C: "🍼" BABY BOTTLE
     */
    public static final int spoken_emoji_1F37C=0x7f0e0330;
    /**
     * Spoken description for Unicode code point U+1F37D: "🍽" FORK AND KNIFE WITH PLATE
     */
    public static final int spoken_emoji_1F37D=0x7f0e0331;
    /**
     * Spoken description for Unicode code point U+1F37E: "🍾" BOTTLE WITH POPPING CORK
     */
    public static final int spoken_emoji_1F37E=0x7f0e0332;
    /**
     * Spoken description for Unicode code point U+1F37F: "🍿" POPCORN
     */
    public static final int spoken_emoji_1F37F=0x7f0e0333;
    /**
     * Spoken description for Unicode code point U+1F380: "🎀" RIBBON
     */
    public static final int spoken_emoji_1F380=0x7f0e0334;
    /**
     * Spoken description for Unicode code point U+1F381: "🎁" WRAPPED PRESENT
     */
    public static final int spoken_emoji_1F381=0x7f0e0335;
    /**
     * Spoken description for Unicode code point U+1F382: "🎂" BIRTHDAY CAKE
     */
    public static final int spoken_emoji_1F382=0x7f0e0336;
    /**
     * Spoken description for Unicode code point U+1F383: "🎃" JACK-O-LANTERN
     */
    public static final int spoken_emoji_1F383=0x7f0e0337;
    /**
     * Spoken description for Unicode code point U+1F384: "🎄" CHRISTMAS TREE
     */
    public static final int spoken_emoji_1F384=0x7f0e0338;
    /**
     * Spoken description for Unicode code point U+1F385: "🎅" FATHER CHRISTMAS
     */
    public static final int spoken_emoji_1F385=0x7f0e0339;
    /**
     * Spoken description for Unicode code point U+1F386: "🎆" FIREWORKS
     */
    public static final int spoken_emoji_1F386=0x7f0e033a;
    /**
     * Spoken description for Unicode code point U+1F387: "🎇" FIREWORK SPARKLER
     */
    public static final int spoken_emoji_1F387=0x7f0e033b;
    /**
     * Spoken description for Unicode code point U+1F388: "🎈" BALLOON
     */
    public static final int spoken_emoji_1F388=0x7f0e033c;
    /**
     * Spoken description for Unicode code point U+1F389: "🎉" PARTY POPPER
     */
    public static final int spoken_emoji_1F389=0x7f0e033d;
    /**
     * Spoken description for Unicode code point U+1F38A: "🎊" CONFETTI BALL
     */
    public static final int spoken_emoji_1F38A=0x7f0e033e;
    /**
     * Spoken description for Unicode code point U+1F38B: "🎋" TANABATA TREE
     */
    public static final int spoken_emoji_1F38B=0x7f0e033f;
    /**
     * Spoken description for Unicode code point U+1F38C: "🎌" CROSSED FLAGS
     */
    public static final int spoken_emoji_1F38C=0x7f0e0340;
    /**
     * Spoken description for Unicode code point U+1F38D: "🎍" PINE DECORATION
     */
    public static final int spoken_emoji_1F38D=0x7f0e0341;
    /**
     * Spoken description for Unicode code point U+1F38E: "🎎" JAPANESE DOLLS
     */
    public static final int spoken_emoji_1F38E=0x7f0e0342;
    /**
     * Spoken description for Unicode code point U+1F38F: "🎏" CARP STREAMER
     */
    public static final int spoken_emoji_1F38F=0x7f0e0343;
    /**
     * Spoken description for Unicode code point U+1F390: "🎐" WIND CHIME
     */
    public static final int spoken_emoji_1F390=0x7f0e0344;
    /**
     * Spoken description for Unicode code point U+1F391: "🎑" MOON VIEWING CEREMONY
     */
    public static final int spoken_emoji_1F391=0x7f0e0345;
    /**
     * Spoken description for Unicode code point U+1F392: "🎒" SCHOOL SATCHEL
     */
    public static final int spoken_emoji_1F392=0x7f0e0346;
    /**
     * Spoken description for Unicode code point U+1F393: "🎓" GRADUATION CAP
     */
    public static final int spoken_emoji_1F393=0x7f0e0347;
    /**
     * Spoken description for Unicode code point U+1F396: "🎖" MILITARY MEDAL
     */
    public static final int spoken_emoji_1F396=0x7f0e0348;
    /**
     * Spoken description for Unicode code point U+1F397: "🎗" REMINDER RIBBON
     */
    public static final int spoken_emoji_1F397=0x7f0e0349;
    /**
     * Spoken description for Unicode code point U+1F399: "🎙" STUDIO MICROPHONE
     */
    public static final int spoken_emoji_1F399=0x7f0e034a;
    /**
     * Spoken description for Unicode code point U+1F39A: "🎚" LEVEL SLIDER
     */
    public static final int spoken_emoji_1F39A=0x7f0e034b;
    /**
     * Spoken description for Unicode code point U+1F39B: "🎛" CONTROL KNOBS
     */
    public static final int spoken_emoji_1F39B=0x7f0e034c;
    /**
     * Spoken description for Unicode code point U+1F39E: "🎞" FILM FRAMES
     */
    public static final int spoken_emoji_1F39E=0x7f0e034d;
    /**
     * Spoken description for Unicode code point U+1F39F: "🎟" ADMISSION TICKETS
     */
    public static final int spoken_emoji_1F39F=0x7f0e034e;
    /**
     * Spoken description for Unicode code point U+1F3A0: "🎠" CAROUSEL HORSE
     */
    public static final int spoken_emoji_1F3A0=0x7f0e034f;
    /**
     * Spoken description for Unicode code point U+1F3A1: "🎡" FERRIS WHEEL
     */
    public static final int spoken_emoji_1F3A1=0x7f0e0350;
    /**
     * Spoken description for Unicode code point U+1F3A2: "🎢" ROLLER COASTER
     */
    public static final int spoken_emoji_1F3A2=0x7f0e0351;
    /**
     * Spoken description for Unicode code point U+1F3A3: "🎣" FISHING POLE AND FISH
     */
    public static final int spoken_emoji_1F3A3=0x7f0e0352;
    /**
     * Spoken description for Unicode code point U+1F3A4: "🎤" MICROPHONE
     */
    public static final int spoken_emoji_1F3A4=0x7f0e0353;
    /**
     * Spoken description for Unicode code point U+1F3A5: "🎥" MOVIE CAMERA
     */
    public static final int spoken_emoji_1F3A5=0x7f0e0354;
    /**
     * Spoken description for Unicode code point U+1F3A6: "🎦" CINEMA
     */
    public static final int spoken_emoji_1F3A6=0x7f0e0355;
    /**
     * Spoken description for Unicode code point U+1F3A7: "🎧" HEADPHONE
     */
    public static final int spoken_emoji_1F3A7=0x7f0e0356;
    /**
     * Spoken description for Unicode code point U+1F3A8: "🎨" ARTIST PALETTE
     */
    public static final int spoken_emoji_1F3A8=0x7f0e0357;
    /**
     * Spoken description for Unicode code point U+1F3A9: "🎩" TOP HAT
     */
    public static final int spoken_emoji_1F3A9=0x7f0e0358;
    /**
     * Spoken description for Unicode code point U+1F3AA: "🎪" CIRCUS TENT
     */
    public static final int spoken_emoji_1F3AA=0x7f0e0359;
    /**
     * Spoken description for Unicode code point U+1F3AB: "🎫" TICKET
     */
    public static final int spoken_emoji_1F3AB=0x7f0e035a;
    /**
     * Spoken description for Unicode code point U+1F3AC: "🎬" CLAPPER BOARD
     */
    public static final int spoken_emoji_1F3AC=0x7f0e035b;
    /**
     * Spoken description for Unicode code point U+1F3AD: "🎭" PERFORMING ARTS
     */
    public static final int spoken_emoji_1F3AD=0x7f0e035c;
    /**
     * Spoken description for Unicode code point U+1F3AE: "🎮" VIDEO GAME
     */
    public static final int spoken_emoji_1F3AE=0x7f0e035d;
    /**
     * Spoken description for Unicode code point U+1F3AF: "🎯" DIRECT HIT
     */
    public static final int spoken_emoji_1F3AF=0x7f0e035e;
    /**
     * Spoken description for Unicode code point U+1F3B0: "🎰" SLOT MACHINE
     */
    public static final int spoken_emoji_1F3B0=0x7f0e035f;
    /**
     * Spoken description for Unicode code point U+1F3B1: "🎱" BILLIARDS
     */
    public static final int spoken_emoji_1F3B1=0x7f0e0360;
    /**
     * Spoken description for Unicode code point U+1F3B2: "🎲" GAME DIE
     */
    public static final int spoken_emoji_1F3B2=0x7f0e0361;
    /**
     * Spoken description for Unicode code point U+1F3B3: "🎳" BOWLING
     */
    public static final int spoken_emoji_1F3B3=0x7f0e0362;
    /**
     * Spoken description for Unicode code point U+1F3B4: "🎴" FLOWER PLAYING CARDS
     */
    public static final int spoken_emoji_1F3B4=0x7f0e0363;
    /**
     * Spoken description for Unicode code point U+1F3B5: "🎵" MUSICAL NOTE
     */
    public static final int spoken_emoji_1F3B5=0x7f0e0364;
    /**
     * Spoken description for Unicode code point U+1F3B6: "🎶" MULTIPLE MUSICAL NOTES
     */
    public static final int spoken_emoji_1F3B6=0x7f0e0365;
    /**
     * Spoken description for Unicode code point U+1F3B7: "🎷" SAXOPHONE
     */
    public static final int spoken_emoji_1F3B7=0x7f0e0366;
    /**
     * Spoken description for Unicode code point U+1F3B8: "🎸" GUITAR
     */
    public static final int spoken_emoji_1F3B8=0x7f0e0367;
    /**
     * Spoken description for Unicode code point U+1F3B9: "🎹" MUSICAL KEYBOARD
     */
    public static final int spoken_emoji_1F3B9=0x7f0e0368;
    /**
     * Spoken description for Unicode code point U+1F3BA: "🎺" TRUMPET
     */
    public static final int spoken_emoji_1F3BA=0x7f0e0369;
    /**
     * Spoken description for Unicode code point U+1F3BB: "🎻" VIOLIN
     */
    public static final int spoken_emoji_1F3BB=0x7f0e036a;
    /**
     * Spoken description for Unicode code point U+1F3BC: "🎼" MUSICAL SCORE
     */
    public static final int spoken_emoji_1F3BC=0x7f0e036b;
    /**
     * Spoken description for Unicode code point U+1F3BD: "🎽" RUNNING SHIRT WITH SASH
     */
    public static final int spoken_emoji_1F3BD=0x7f0e036c;
    /**
     * Spoken description for Unicode code point U+1F3BE: "🎾" TENNIS RACQUET AND BALL
     */
    public static final int spoken_emoji_1F3BE=0x7f0e036d;
    /**
     * Spoken description for Unicode code point U+1F3BF: "🎿" SKI AND SKI BOOT
     */
    public static final int spoken_emoji_1F3BF=0x7f0e036e;
    /**
     * Spoken description for Unicode code point U+1F3C0: "🏀" BASKETBALL AND HOOP
     */
    public static final int spoken_emoji_1F3C0=0x7f0e036f;
    /**
     * Spoken description for Unicode code point U+1F3C1: "🏁" CHEQUERED FLAG
     */
    public static final int spoken_emoji_1F3C1=0x7f0e0370;
    /**
     * Spoken description for Unicode code point U+1F3C2: "🏂" SNOWBOARDER
     */
    public static final int spoken_emoji_1F3C2=0x7f0e0371;
    /**
     * Spoken description for Unicode code point U+1F3C3: "🏃" RUNNER
     */
    public static final int spoken_emoji_1F3C3=0x7f0e0372;
    /**
     * Spoken description for Unicode code point U+1F3C4: "🏄" SURFER
     */
    public static final int spoken_emoji_1F3C4=0x7f0e0373;
    /**
     * Spoken description for Unicode code point U+1F3C5: "🏅" SPORTS MEDAL
     */
    public static final int spoken_emoji_1F3C5=0x7f0e0374;
    /**
     * Spoken description for Unicode code point U+1F3C6: "🏆" TROPHY
     */
    public static final int spoken_emoji_1F3C6=0x7f0e0375;
    /**
     * Spoken description for Unicode code point U+1F3C7: "🏇" HORSE RACING
     */
    public static final int spoken_emoji_1F3C7=0x7f0e0376;
    /**
     * Spoken description for Unicode code point U+1F3C8: "🏈" AMERICAN FOOTBALL
     */
    public static final int spoken_emoji_1F3C8=0x7f0e0377;
    /**
     * Spoken description for Unicode code point U+1F3C9: "🏉" RUGBY FOOTBALL
     */
    public static final int spoken_emoji_1F3C9=0x7f0e0378;
    /**
     * Spoken description for Unicode code point U+1F3CA: "🏊" SWIMMER
     */
    public static final int spoken_emoji_1F3CA=0x7f0e0379;
    /**
     * Spoken description for Unicode code point U+1F3CB: "🏋" WEIGHT LIFTER
     */
    public static final int spoken_emoji_1F3CB=0x7f0e037a;
    /**
     * Spoken description for Unicode code point U+1F3CC: "🏌" GOLFER
     */
    public static final int spoken_emoji_1F3CC=0x7f0e037b;
    /**
     * Spoken description for Unicode code point U+1F3CD: "🏍" RACING MOTORCYCLE
     */
    public static final int spoken_emoji_1F3CD=0x7f0e037c;
    /**
     * Spoken description for Unicode code point U+1F3CE: "🏎" RACING CAR
     */
    public static final int spoken_emoji_1F3CE=0x7f0e037d;
    /**
     * Spoken description for Unicode code point U+1F3CF: "🏏" CRICKET BAT AND BALL
     */
    public static final int spoken_emoji_1F3CF=0x7f0e037e;
    /**
     * Spoken description for Unicode code point U+1F3D0: "🏐" VOLLEYBALL
     */
    public static final int spoken_emoji_1F3D0=0x7f0e037f;
    /**
     * Spoken description for Unicode code point U+1F3D1: "🏑" FIELD HOCKEY STICK AND BALL
     */
    public static final int spoken_emoji_1F3D1=0x7f0e0380;
    /**
     * Spoken description for Unicode code point U+1F3D2: "🏒" ICE HOCKEY STICK AND PUCK
     */
    public static final int spoken_emoji_1F3D2=0x7f0e0381;
    /**
     * Spoken description for Unicode code point U+1F3D3: "🏓" TABLE TENNIS PADDLE AND BALL
     */
    public static final int spoken_emoji_1F3D3=0x7f0e0382;
    /**
     * Spoken description for Unicode code point U+1F3D4: "🏔" SNOW CAPPED MOUNTAIN
     */
    public static final int spoken_emoji_1F3D4=0x7f0e0383;
    /**
     * Spoken description for Unicode code point U+1F3D5: "🏕" CAMPING
     */
    public static final int spoken_emoji_1F3D5=0x7f0e0384;
    /**
     * Spoken description for Unicode code point U+1F3D6: "🏖" BEACH WITH UMBRELLA
     */
    public static final int spoken_emoji_1F3D6=0x7f0e0385;
    /**
     * Spoken description for Unicode code point U+1F3D7: "🏗" BUILDING CONSTRUCTION
     */
    public static final int spoken_emoji_1F3D7=0x7f0e0386;
    /**
     * Spoken description for Unicode code point U+1F3D8: "🏘" HOUSE BUILDINGS
     */
    public static final int spoken_emoji_1F3D8=0x7f0e0387;
    /**
     * Spoken description for Unicode code point U+1F3D9: "🏙" CITYSCAPE
     */
    public static final int spoken_emoji_1F3D9=0x7f0e0388;
    /**
     * Spoken description for Unicode code point U+1F3DA: "🏚" DERELICT HOUSE BUILDING
     */
    public static final int spoken_emoji_1F3DA=0x7f0e0389;
    /**
     * Spoken description for Unicode code point U+1F3DB: "🏛" CLASSICAL BUILDING
     */
    public static final int spoken_emoji_1F3DB=0x7f0e038a;
    /**
     * Spoken description for Unicode code point U+1F3DC: "🏜" DESERT
     */
    public static final int spoken_emoji_1F3DC=0x7f0e038b;
    /**
     * Spoken description for Unicode code point U+1F3DD: "🏝" DESERT ISLAND
     */
    public static final int spoken_emoji_1F3DD=0x7f0e038c;
    /**
     * Spoken description for Unicode code point U+1F3DE: "🏞" NATIONAL PARK
     */
    public static final int spoken_emoji_1F3DE=0x7f0e038d;
    /**
     * Spoken description for Unicode code point U+1F3DF: "🏟" STADIUM
     */
    public static final int spoken_emoji_1F3DF=0x7f0e038e;
    /**
     * Spoken description for Unicode code point U+1F3E0: "🏠" HOUSE BUILDING
     */
    public static final int spoken_emoji_1F3E0=0x7f0e038f;
    /**
     * Spoken description for Unicode code point U+1F3E1: "🏡" HOUSE WITH GARDEN
     */
    public static final int spoken_emoji_1F3E1=0x7f0e0390;
    /**
     * Spoken description for Unicode code point U+1F3E2: "🏢" OFFICE BUILDING
     */
    public static final int spoken_emoji_1F3E2=0x7f0e0391;
    /**
     * Spoken description for Unicode code point U+1F3E3: "🏣" JAPANESE POST OFFICE
     */
    public static final int spoken_emoji_1F3E3=0x7f0e0392;
    /**
     * Spoken description for Unicode code point U+1F3E4: "🏤" EUROPEAN POST OFFICE
     */
    public static final int spoken_emoji_1F3E4=0x7f0e0393;
    /**
     * Spoken description for Unicode code point U+1F3E5: "🏥" HOSPITAL
     */
    public static final int spoken_emoji_1F3E5=0x7f0e0394;
    /**
     * Spoken description for Unicode code point U+1F3E6: "🏦" BANK
     */
    public static final int spoken_emoji_1F3E6=0x7f0e0395;
    /**
     * Spoken description for Unicode code point U+1F3E7: "🏧" AUTOMATED TELLER MACHINE
     */
    public static final int spoken_emoji_1F3E7=0x7f0e0396;
    /**
     * Spoken description for Unicode code point U+1F3E8: "🏨" HOTEL
     */
    public static final int spoken_emoji_1F3E8=0x7f0e0397;
    /**
     * Spoken description for Unicode code point U+1F3E9: "🏩" LOVE HOTEL
     */
    public static final int spoken_emoji_1F3E9=0x7f0e0398;
    /**
     * Spoken description for Unicode code point U+1F3EA: "🏪" CONVENIENCE STORE
     */
    public static final int spoken_emoji_1F3EA=0x7f0e0399;
    /**
     * Spoken description for Unicode code point U+1F3EB: "🏫" SCHOOL
     */
    public static final int spoken_emoji_1F3EB=0x7f0e039a;
    /**
     * Spoken description for Unicode code point U+1F3EC: "🏬" DEPARTMENT STORE
     */
    public static final int spoken_emoji_1F3EC=0x7f0e039b;
    /**
     * Spoken description for Unicode code point U+1F3ED: "🏭" FACTORY
     */
    public static final int spoken_emoji_1F3ED=0x7f0e039c;
    /**
     * Spoken description for Unicode code point U+1F3EE: "🏮" IZAKAYA LANTERN
     */
    public static final int spoken_emoji_1F3EE=0x7f0e039d;
    /**
     * Spoken description for Unicode code point U+1F3EF: "🏯" JAPANESE CASTLE
     */
    public static final int spoken_emoji_1F3EF=0x7f0e039e;
    /**
     * Spoken description for Unicode code point U+1F3F0: "🏰" EUROPEAN CASTLE
     */
    public static final int spoken_emoji_1F3F0=0x7f0e039f;
    /**
     * Spoken description for Unicode code point U+1F3F3: "🏳" WAVING WHITE FLAG
     */
    public static final int spoken_emoji_1F3F3=0x7f0e03a0;
    /**
     * Spoken description for Unicode code point U+1F3F4: "🏴" WAVING BLACK FLAG
     */
    public static final int spoken_emoji_1F3F4=0x7f0e03a1;
    /**
     * Spoken description for Unicode code point U+1F3F5: "🏵" ROSETTE
     */
    public static final int spoken_emoji_1F3F5=0x7f0e03a2;
    /**
     * Spoken description for Unicode code point U+1F3F7: "🏷" LABEL
     */
    public static final int spoken_emoji_1F3F7=0x7f0e03a3;
    /**
     * Spoken description for Unicode code point U+1F3F8: "🏸" BADMINTON RACQUET AND SHUTTLECOCK
     */
    public static final int spoken_emoji_1F3F8=0x7f0e03a4;
    /**
     * Spoken description for Unicode code point U+1F3F9: "🏹" BOW AND ARROW
     */
    public static final int spoken_emoji_1F3F9=0x7f0e03a5;
    /**
     * Spoken description for Unicode code point U+1F3FA: "🏺" AMPHORA
     */
    public static final int spoken_emoji_1F3FA=0x7f0e03a6;
    /**
     * Spoken description for Unicode code point U+1F3FB: "🏻" EMOJI MODIFIER FITZPATRICK TYPE-1-2
     */
    public static final int spoken_emoji_1F3FB=0x7f0e03a7;
    /**
     * Spoken description for Unicode code point U+1F3FC: "🏼" EMOJI MODIFIER FITZPATRICK TYPE-3
     */
    public static final int spoken_emoji_1F3FC=0x7f0e03a8;
    /**
     * Spoken description for Unicode code point U+1F3FD: "🏽" EMOJI MODIFIER FITZPATRICK TYPE-4
     */
    public static final int spoken_emoji_1F3FD=0x7f0e03a9;
    /**
     * Spoken description for Unicode code point U+1F3FE: "🏾" EMOJI MODIFIER FITZPATRICK TYPE-5
     */
    public static final int spoken_emoji_1F3FE=0x7f0e03aa;
    /**
     * Spoken description for Unicode code point U+1F3FF: "🏿" EMOJI MODIFIER FITZPATRICK TYPE-6
     */
    public static final int spoken_emoji_1F3FF=0x7f0e03ab;
    /**
     * Spoken description for Unicode code point U+1F400: "🐀" RAT
     */
    public static final int spoken_emoji_1F400=0x7f0e03ac;
    /**
     * Spoken description for Unicode code point U+1F401: "🐁" MOUSE
     */
    public static final int spoken_emoji_1F401=0x7f0e03ad;
    /**
     * Spoken description for Unicode code point U+1F402: "🐂" OX
     */
    public static final int spoken_emoji_1F402=0x7f0e03ae;
    /**
     * Spoken description for Unicode code point U+1F403: "🐃" WATER BUFFALO
     */
    public static final int spoken_emoji_1F403=0x7f0e03af;
    /**
     * Spoken description for Unicode code point U+1F404: "🐄" COW
     */
    public static final int spoken_emoji_1F404=0x7f0e03b0;
    /**
     * Spoken description for Unicode code point U+1F405: "🐅" TIGER
     */
    public static final int spoken_emoji_1F405=0x7f0e03b1;
    /**
     * Spoken description for Unicode code point U+1F406: "🐆" LEOPARD
     */
    public static final int spoken_emoji_1F406=0x7f0e03b2;
    /**
     * Spoken description for Unicode code point U+1F407: "🐇" RABBIT
     */
    public static final int spoken_emoji_1F407=0x7f0e03b3;
    /**
     * Spoken description for Unicode code point U+1F408: "🐈" CAT
     */
    public static final int spoken_emoji_1F408=0x7f0e03b4;
    /**
     * Spoken description for Unicode code point U+1F409: "🐉" DRAGON
     */
    public static final int spoken_emoji_1F409=0x7f0e03b5;
    /**
     * Spoken description for Unicode code point U+1F40A: "🐊" CROCODILE
     */
    public static final int spoken_emoji_1F40A=0x7f0e03b6;
    /**
     * Spoken description for Unicode code point U+1F40B: "🐋" WHALE
     */
    public static final int spoken_emoji_1F40B=0x7f0e03b7;
    /**
     * Spoken description for Unicode code point U+1F40C: "🐌" SNAIL
     */
    public static final int spoken_emoji_1F40C=0x7f0e03b8;
    /**
     * Spoken description for Unicode code point U+1F40D: "🐍" SNAKE
     */
    public static final int spoken_emoji_1F40D=0x7f0e03b9;
    /**
     * Spoken description for Unicode code point U+1F40E: "🐎" HORSE
     */
    public static final int spoken_emoji_1F40E=0x7f0e03ba;
    /**
     * Spoken description for Unicode code point U+1F40F: "🐏" RAM
     */
    public static final int spoken_emoji_1F40F=0x7f0e03bb;
    /**
     * Spoken description for Unicode code point U+1F410: "🐐" GOAT
     */
    public static final int spoken_emoji_1F410=0x7f0e03bc;
    /**
     * Spoken description for Unicode code point U+1F411: "🐑" SHEEP
     */
    public static final int spoken_emoji_1F411=0x7f0e03bd;
    /**
     * Spoken description for Unicode code point U+1F412: "🐒" MONKEY
     */
    public static final int spoken_emoji_1F412=0x7f0e03be;
    /**
     * Spoken description for Unicode code point U+1F413: "🐓" ROOSTER
     */
    public static final int spoken_emoji_1F413=0x7f0e03bf;
    /**
     * Spoken description for Unicode code point U+1F414: "🐔" CHICKEN
     */
    public static final int spoken_emoji_1F414=0x7f0e03c0;
    /**
     * Spoken description for Unicode code point U+1F415: "🐕" DOG
     */
    public static final int spoken_emoji_1F415=0x7f0e03c1;
    /**
     * Spoken description for Unicode code point U+1F416: "🐖" PIG
     */
    public static final int spoken_emoji_1F416=0x7f0e03c2;
    /**
     * Spoken description for Unicode code point U+1F417: "🐗" BOAR
     */
    public static final int spoken_emoji_1F417=0x7f0e03c3;
    /**
     * Spoken description for Unicode code point U+1F418: "🐘" ELEPHANT
     */
    public static final int spoken_emoji_1F418=0x7f0e03c4;
    /**
     * Spoken description for Unicode code point U+1F419: "🐙" OCTOPUS
     */
    public static final int spoken_emoji_1F419=0x7f0e03c5;
    /**
     * Spoken description for Unicode code point U+1F41A: "🐚" SPIRAL SHELL
     */
    public static final int spoken_emoji_1F41A=0x7f0e03c6;
    /**
     * Spoken description for Unicode code point U+1F41B: "🐛" BUG
     */
    public static final int spoken_emoji_1F41B=0x7f0e03c7;
    /**
     * Spoken description for Unicode code point U+1F41C: "🐜" ANT
     */
    public static final int spoken_emoji_1F41C=0x7f0e03c8;
    /**
     * Spoken description for Unicode code point U+1F41D: "🐝" HONEYBEE
     */
    public static final int spoken_emoji_1F41D=0x7f0e03c9;
    /**
     * Spoken description for Unicode code point U+1F41E: "🐞" LADY BEETLE
     */
    public static final int spoken_emoji_1F41E=0x7f0e03ca;
    /**
     * Spoken description for Unicode code point U+1F41F: "🐟" FISH
     */
    public static final int spoken_emoji_1F41F=0x7f0e03cb;
    /**
     * Spoken description for Unicode code point U+1F420: "🐠" TROPICAL FISH
     */
    public static final int spoken_emoji_1F420=0x7f0e03cc;
    /**
     * Spoken description for Unicode code point U+1F421: "🐡" BLOWFISH
     */
    public static final int spoken_emoji_1F421=0x7f0e03cd;
    /**
     * Spoken description for Unicode code point U+1F422: "🐢" TURTLE
     */
    public static final int spoken_emoji_1F422=0x7f0e03ce;
    /**
     * Spoken description for Unicode code point U+1F423: "🐣" HATCHING CHICK
     */
    public static final int spoken_emoji_1F423=0x7f0e03cf;
    /**
     * Spoken description for Unicode code point U+1F424: "🐤" BABY CHICK
     */
    public static final int spoken_emoji_1F424=0x7f0e03d0;
    /**
     * Spoken description for Unicode code point U+1F425: "🐥" FRONT-FACING BABY CHICK
     */
    public static final int spoken_emoji_1F425=0x7f0e03d1;
    /**
     * Spoken description for Unicode code point U+1F426: "🐦" BIRD
     */
    public static final int spoken_emoji_1F426=0x7f0e03d2;
    /**
     * Spoken description for Unicode code point U+1F427: "🐧" PENGUIN
     */
    public static final int spoken_emoji_1F427=0x7f0e03d3;
    /**
     * Spoken description for Unicode code point U+1F428: "🐨" KOALA
     */
    public static final int spoken_emoji_1F428=0x7f0e03d4;
    /**
     * Spoken description for Unicode code point U+1F429: "🐩" POODLE
     */
    public static final int spoken_emoji_1F429=0x7f0e03d5;
    /**
     * Spoken description for Unicode code point U+1F42A: "🐪" DROMEDARY CAMEL
     */
    public static final int spoken_emoji_1F42A=0x7f0e03d6;
    /**
     * Spoken description for Unicode code point U+1F42B: "🐫" BACTRIAN CAMEL
     */
    public static final int spoken_emoji_1F42B=0x7f0e03d7;
    /**
     * Spoken description for Unicode code point U+1F42C: "🐬" DOLPHIN
     */
    public static final int spoken_emoji_1F42C=0x7f0e03d8;
    /**
     * Spoken description for Unicode code point U+1F42D: "🐭" MOUSE FACE
     */
    public static final int spoken_emoji_1F42D=0x7f0e03d9;
    /**
     * Spoken description for Unicode code point U+1F42E: "🐮" COW FACE
     */
    public static final int spoken_emoji_1F42E=0x7f0e03da;
    /**
     * Spoken description for Unicode code point U+1F42F: "🐯" TIGER FACE
     */
    public static final int spoken_emoji_1F42F=0x7f0e03db;
    /**
     * Spoken description for Unicode code point U+1F430: "🐰" RABBIT FACE
     */
    public static final int spoken_emoji_1F430=0x7f0e03dc;
    /**
     * Spoken description for Unicode code point U+1F431: "🐱" CAT FACE
     */
    public static final int spoken_emoji_1F431=0x7f0e03dd;
    /**
     * Spoken description for Unicode code point U+1F432: "🐲" DRAGON FACE
     */
    public static final int spoken_emoji_1F432=0x7f0e03de;
    /**
     * Spoken description for Unicode code point U+1F433: "🐳" SPOUTING WHALE
     */
    public static final int spoken_emoji_1F433=0x7f0e03df;
    /**
     * Spoken description for Unicode code point U+1F434: "🐴" HORSE FACE
     */
    public static final int spoken_emoji_1F434=0x7f0e03e0;
    /**
     * Spoken description for Unicode code point U+1F435: "🐵" MONKEY FACE
     */
    public static final int spoken_emoji_1F435=0x7f0e03e1;
    /**
     * Spoken description for Unicode code point U+1F436: "🐶" DOG FACE
     */
    public static final int spoken_emoji_1F436=0x7f0e03e2;
    /**
     * Spoken description for Unicode code point U+1F437: "🐷" PIG FACE
     */
    public static final int spoken_emoji_1F437=0x7f0e03e3;
    /**
     * Spoken description for Unicode code point U+1F438: "🐸" FROG FACE
     */
    public static final int spoken_emoji_1F438=0x7f0e03e4;
    /**
     * Spoken description for Unicode code point U+1F439: "🐹" HAMSTER FACE
     */
    public static final int spoken_emoji_1F439=0x7f0e03e5;
    /**
     * Spoken description for Unicode code point U+1F43A: "🐺" WOLF FACE
     */
    public static final int spoken_emoji_1F43A=0x7f0e03e6;
    /**
     * Spoken description for Unicode code point U+1F43B: "🐻" BEAR FACE
     */
    public static final int spoken_emoji_1F43B=0x7f0e03e7;
    /**
     * Spoken description for Unicode code point U+1F43C: "🐼" PANDA FACE
     */
    public static final int spoken_emoji_1F43C=0x7f0e03e8;
    /**
     * Spoken description for Unicode code point U+1F43D: "🐽" PIG NOSE
     */
    public static final int spoken_emoji_1F43D=0x7f0e03e9;
    /**
     * Spoken description for Unicode code point U+1F43E: "🐾" PAW PRINTS
     */
    public static final int spoken_emoji_1F43E=0x7f0e03ea;
    /**
     * Spoken description for Unicode code point U+1F43F: "🐿" CHIPMUNK
     */
    public static final int spoken_emoji_1F43F=0x7f0e03eb;
    /**
     * Spoken description for Unicode code point U+1F440: "👀" EYES
     */
    public static final int spoken_emoji_1F440=0x7f0e03ec;
    /**
     * Spoken description for Unicode code point U+1F441: "👁" EYE
     */
    public static final int spoken_emoji_1F441=0x7f0e03ed;
    /**
     * Spoken description for Unicode code point U+1F442: "👂" EAR
     */
    public static final int spoken_emoji_1F442=0x7f0e03ee;
    /**
     * Spoken description for Unicode code point U+1F443: "👃" NOSE
     */
    public static final int spoken_emoji_1F443=0x7f0e03ef;
    /**
     * Spoken description for Unicode code point U+1F444: "👄" MOUTH
     */
    public static final int spoken_emoji_1F444=0x7f0e03f0;
    /**
     * Spoken description for Unicode code point U+1F445: "👅" TONGUE
     */
    public static final int spoken_emoji_1F445=0x7f0e03f1;
    /**
     * Spoken description for Unicode code point U+1F446: "👆" WHITE UP POINTING BACKHAND INDEX
     */
    public static final int spoken_emoji_1F446=0x7f0e03f2;
    /**
     * Spoken description for Unicode code point U+1F447: "👇" WHITE DOWN POINTING BACKHAND INDEX
     */
    public static final int spoken_emoji_1F447=0x7f0e03f3;
    /**
     * Spoken description for Unicode code point U+1F448: "👈" WHITE LEFT POINTING BACKHAND INDEX
     */
    public static final int spoken_emoji_1F448=0x7f0e03f4;
    /**
     * Spoken description for Unicode code point U+1F449: "👉" WHITE RIGHT POINTING BACKHAND INDEX
     */
    public static final int spoken_emoji_1F449=0x7f0e03f5;
    /**
     * Spoken description for Unicode code point U+1F44A: "👊" FISTED HAND SIGN
     */
    public static final int spoken_emoji_1F44A=0x7f0e03f6;
    /**
     * Spoken description for Unicode code point U+1F44B: "👋" WAVING HAND SIGN
     */
    public static final int spoken_emoji_1F44B=0x7f0e03f7;
    /**
     * Spoken description for Unicode code point U+1F44C: "👌" OK HAND SIGN
     */
    public static final int spoken_emoji_1F44C=0x7f0e03f8;
    /**
     * Spoken description for Unicode code point U+1F44D: "👍" THUMBS UP SIGN
     */
    public static final int spoken_emoji_1F44D=0x7f0e03f9;
    /**
     * Spoken description for Unicode code point U+1F44E: "👎" THUMBS DOWN SIGN
     */
    public static final int spoken_emoji_1F44E=0x7f0e03fa;
    /**
     * Spoken description for Unicode code point U+1F44F: "👏" CLAPPING HANDS SIGN
     */
    public static final int spoken_emoji_1F44F=0x7f0e03fb;
    /**
     * Spoken description for Unicode code point U+1F450: "👐" OPEN HANDS SIGN
     */
    public static final int spoken_emoji_1F450=0x7f0e03fc;
    /**
     * Spoken description for Unicode code point U+1F451: "👑" CROWN
     */
    public static final int spoken_emoji_1F451=0x7f0e03fd;
    /**
     * Spoken description for Unicode code point U+1F452: "👒" WOMANS HAT
     */
    public static final int spoken_emoji_1F452=0x7f0e03fe;
    /**
     * Spoken description for Unicode code point U+1F453: "👓" EYEGLASSES
     */
    public static final int spoken_emoji_1F453=0x7f0e03ff;
    /**
     * Spoken description for Unicode code point U+1F454: "👔" NECKTIE
     */
    public static final int spoken_emoji_1F454=0x7f0e0400;
    /**
     * Spoken description for Unicode code point U+1F455: "👕" T-SHIRT
     */
    public static final int spoken_emoji_1F455=0x7f0e0401;
    /**
     * Spoken description for Unicode code point U+1F456: "👖" JEANS
     */
    public static final int spoken_emoji_1F456=0x7f0e0402;
    /**
     * Spoken description for Unicode code point U+1F457: "👗" DRESS
     */
    public static final int spoken_emoji_1F457=0x7f0e0403;
    /**
     * Spoken description for Unicode code point U+1F458: "👘" KIMONO
     */
    public static final int spoken_emoji_1F458=0x7f0e0404;
    /**
     * Spoken description for Unicode code point U+1F459: "👙" BIKINI
     */
    public static final int spoken_emoji_1F459=0x7f0e0405;
    /**
     * Spoken description for Unicode code point U+1F45A: "👚" WOMANS CLOTHES
     */
    public static final int spoken_emoji_1F45A=0x7f0e0406;
    /**
     * Spoken description for Unicode code point U+1F45B: "👛" PURSE
     */
    public static final int spoken_emoji_1F45B=0x7f0e0407;
    /**
     * Spoken description for Unicode code point U+1F45C: "👜" HANDBAG
     */
    public static final int spoken_emoji_1F45C=0x7f0e0408;
    /**
     * Spoken description for Unicode code point U+1F45D: "👝" POUCH
     */
    public static final int spoken_emoji_1F45D=0x7f0e0409;
    /**
     * Spoken description for Unicode code point U+1F45E: "👞" MANS SHOE
     */
    public static final int spoken_emoji_1F45E=0x7f0e040a;
    /**
     * Spoken description for Unicode code point U+1F45F: "👟" ATHLETIC SHOE
     */
    public static final int spoken_emoji_1F45F=0x7f0e040b;
    /**
     * Spoken description for Unicode code point U+1F460: "👠" HIGH-HEELED SHOE
     */
    public static final int spoken_emoji_1F460=0x7f0e040c;
    /**
     * Spoken description for Unicode code point U+1F461: "👡" WOMANS SANDAL
     */
    public static final int spoken_emoji_1F461=0x7f0e040d;
    /**
     * Spoken description for Unicode code point U+1F462: "👢" WOMANS BOOTS
     */
    public static final int spoken_emoji_1F462=0x7f0e040e;
    /**
     * Spoken description for Unicode code point U+1F463: "👣" FOOTPRINTS
     */
    public static final int spoken_emoji_1F463=0x7f0e040f;
    /**
     * Spoken description for Unicode code point U+1F464: "👤" BUST IN SILHOUETTE
     */
    public static final int spoken_emoji_1F464=0x7f0e0410;
    /**
     * Spoken description for Unicode code point U+1F465: "👥" BUSTS IN SILHOUETTE
     */
    public static final int spoken_emoji_1F465=0x7f0e0411;
    /**
     * Spoken description for Unicode code point U+1F466: "👦" BOY
     */
    public static final int spoken_emoji_1F466=0x7f0e0412;
    /**
     * Spoken description for Unicode code point U+1F467: "👧" GIRL
     */
    public static final int spoken_emoji_1F467=0x7f0e0413;
    /**
     * Spoken description for Unicode code point U+1F468: "👨" MAN
     */
    public static final int spoken_emoji_1F468=0x7f0e0414;
    /**
     * Spoken description for Unicode code point U+1F469: "👩" WOMAN
     */
    public static final int spoken_emoji_1F469=0x7f0e0415;
    /**
     * Spoken description for Unicode code point U+1F46A: "👪" FAMILY
     */
    public static final int spoken_emoji_1F46A=0x7f0e0416;
    /**
     * Spoken description for Unicode code point U+1F46B: "👫" MAN AND WOMAN HOLDING HANDS
     */
    public static final int spoken_emoji_1F46B=0x7f0e0417;
    /**
     * Spoken description for Unicode code point U+1F46C: "👬" TWO MEN HOLDING HANDS
     */
    public static final int spoken_emoji_1F46C=0x7f0e0418;
    /**
     * Spoken description for Unicode code point U+1F46D: "👭" TWO WOMEN HOLDING HANDS
     */
    public static final int spoken_emoji_1F46D=0x7f0e0419;
    /**
     * Spoken description for Unicode code point U+1F46E: "👮" POLICE OFFICER
     */
    public static final int spoken_emoji_1F46E=0x7f0e041a;
    /**
     * Spoken description for Unicode code point U+1F46F: "👯" WOMAN WITH BUNNY EARS
     */
    public static final int spoken_emoji_1F46F=0x7f0e041b;
    /**
     * Spoken description for Unicode code point U+1F470: "👰" BRIDE WITH VEIL
     */
    public static final int spoken_emoji_1F470=0x7f0e041c;
    /**
     * Spoken description for Unicode code point U+1F471: "👱" PERSON WITH BLOND HAIR
     */
    public static final int spoken_emoji_1F471=0x7f0e041d;
    /**
     * Spoken description for Unicode code point U+1F472: "👲" MAN WITH GUA PI MAO
     */
    public static final int spoken_emoji_1F472=0x7f0e041e;
    /**
     * Spoken description for Unicode code point U+1F473: "👳" MAN WITH TURBAN
     */
    public static final int spoken_emoji_1F473=0x7f0e041f;
    /**
     * Spoken description for Unicode code point U+1F474: "👴" OLDER MAN
     */
    public static final int spoken_emoji_1F474=0x7f0e0420;
    /**
     * Spoken description for Unicode code point U+1F475: "👵" OLDER WOMAN
     */
    public static final int spoken_emoji_1F475=0x7f0e0421;
    /**
     * Spoken description for Unicode code point U+1F476: "👶" BABY
     */
    public static final int spoken_emoji_1F476=0x7f0e0422;
    /**
     * Spoken description for Unicode code point U+1F477: "👷" CONSTRUCTION WORKER
     */
    public static final int spoken_emoji_1F477=0x7f0e0423;
    /**
     * Spoken description for Unicode code point U+1F478: "👸" PRINCESS
     */
    public static final int spoken_emoji_1F478=0x7f0e0424;
    /**
     * Spoken description for Unicode code point U+1F479: "👹" JAPANESE OGRE
     */
    public static final int spoken_emoji_1F479=0x7f0e0425;
    /**
     * Spoken description for Unicode code point U+1F47A: "👺" JAPANESE GOBLIN
     */
    public static final int spoken_emoji_1F47A=0x7f0e0426;
    /**
     * Spoken description for Unicode code point U+1F47B: "👻" GHOST
     */
    public static final int spoken_emoji_1F47B=0x7f0e0427;
    /**
     * Spoken description for Unicode code point U+1F47C: "👼" BABY ANGEL
     */
    public static final int spoken_emoji_1F47C=0x7f0e0428;
    /**
     * Spoken description for Unicode code point U+1F47D: "👽" EXTRATERRESTRIAL ALIEN
     */
    public static final int spoken_emoji_1F47D=0x7f0e0429;
    /**
     * Spoken description for Unicode code point U+1F47E: "👾" ALIEN MONSTER
     */
    public static final int spoken_emoji_1F47E=0x7f0e042a;
    /**
     * Spoken description for Unicode code point U+1F47F: "👿" IMP
     */
    public static final int spoken_emoji_1F47F=0x7f0e042b;
    /**
     * Spoken description for Unicode code point U+1F480: "💀" SKULL
     */
    public static final int spoken_emoji_1F480=0x7f0e042c;
    /**
     * Spoken description for Unicode code point U+1F481: "💁" INFORMATION DESK PERSON
     */
    public static final int spoken_emoji_1F481=0x7f0e042d;
    /**
     * Spoken description for Unicode code point U+1F482: "💂" GUARDSMAN
     */
    public static final int spoken_emoji_1F482=0x7f0e042e;
    /**
     * Spoken description for Unicode code point U+1F483: "💃" DANCER
     */
    public static final int spoken_emoji_1F483=0x7f0e042f;
    /**
     * Spoken description for Unicode code point U+1F484: "💄" LIPSTICK
     */
    public static final int spoken_emoji_1F484=0x7f0e0430;
    /**
     * Spoken description for Unicode code point U+1F485: "💅" NAIL POLISH
     */
    public static final int spoken_emoji_1F485=0x7f0e0431;
    /**
     * Spoken description for Unicode code point U+1F486: "💆" FACE MASSAGE
     */
    public static final int spoken_emoji_1F486=0x7f0e0432;
    /**
     * Spoken description for Unicode code point U+1F487: "💇" HAIRCUT
     */
    public static final int spoken_emoji_1F487=0x7f0e0433;
    /**
     * Spoken description for Unicode code point U+1F488: "💈" BARBER POLE
     */
    public static final int spoken_emoji_1F488=0x7f0e0434;
    /**
     * Spoken description for Unicode code point U+1F489: "💉" SYRINGE
     */
    public static final int spoken_emoji_1F489=0x7f0e0435;
    /**
     * Spoken description for Unicode code point U+1F48A: "💊" PILL
     */
    public static final int spoken_emoji_1F48A=0x7f0e0436;
    /**
     * Spoken description for Unicode code point U+1F48B: "💋" KISS MARK
     */
    public static final int spoken_emoji_1F48B=0x7f0e0437;
    /**
     * Spoken description for Unicode code point U+1F48C: "💌" LOVE LETTER
     */
    public static final int spoken_emoji_1F48C=0x7f0e0438;
    /**
     * Spoken description for Unicode code point U+1F48D: "💍" RING
     */
    public static final int spoken_emoji_1F48D=0x7f0e0439;
    /**
     * Spoken description for Unicode code point U+1F48E: "💎" GEM STONE
     */
    public static final int spoken_emoji_1F48E=0x7f0e043a;
    /**
     * Spoken description for Unicode code point U+1F48F: "💏" KISS
     */
    public static final int spoken_emoji_1F48F=0x7f0e043b;
    /**
     * Spoken description for Unicode code point U+1F490: "💐" BOUQUET
     */
    public static final int spoken_emoji_1F490=0x7f0e043c;
    /**
     * Spoken description for Unicode code point U+1F491: "💑" COUPLE WITH HEART
     */
    public static final int spoken_emoji_1F491=0x7f0e043d;
    /**
     * Spoken description for Unicode code point U+1F492: "💒" WEDDING
     */
    public static final int spoken_emoji_1F492=0x7f0e043e;
    /**
     * Spoken description for Unicode code point U+1F493: "💓" BEATING HEART
     */
    public static final int spoken_emoji_1F493=0x7f0e043f;
    /**
     * Spoken description for Unicode code point U+1F494: "💔" BROKEN HEART
     */
    public static final int spoken_emoji_1F494=0x7f0e0440;
    /**
     * Spoken description for Unicode code point U+1F495: "💕" TWO HEARTS
     */
    public static final int spoken_emoji_1F495=0x7f0e0441;
    /**
     * Spoken description for Unicode code point U+1F496: "💖" SPARKLING HEART
     */
    public static final int spoken_emoji_1F496=0x7f0e0442;
    /**
     * Spoken description for Unicode code point U+1F497: "💗" GROWING HEART
     */
    public static final int spoken_emoji_1F497=0x7f0e0443;
    /**
     * Spoken description for Unicode code point U+1F498: "💘" HEART WITH ARROW
     */
    public static final int spoken_emoji_1F498=0x7f0e0444;
    /**
     * Spoken description for Unicode code point U+1F499: "💙" BLUE HEART
     */
    public static final int spoken_emoji_1F499=0x7f0e0445;
    /**
     * Spoken description for Unicode code point U+1F49A: "💚" GREEN HEART
     */
    public static final int spoken_emoji_1F49A=0x7f0e0446;
    /**
     * Spoken description for Unicode code point U+1F49B: "💛" YELLOW HEART
     */
    public static final int spoken_emoji_1F49B=0x7f0e0447;
    /**
     * Spoken description for Unicode code point U+1F49C: "💜" PURPLE HEART
     */
    public static final int spoken_emoji_1F49C=0x7f0e0448;
    /**
     * Spoken description for Unicode code point U+1F49D: "💝" HEART WITH RIBBON
     */
    public static final int spoken_emoji_1F49D=0x7f0e0449;
    /**
     * Spoken description for Unicode code point U+1F49E: "💞" REVOLVING HEARTS
     */
    public static final int spoken_emoji_1F49E=0x7f0e044a;
    /**
     * Spoken description for Unicode code point U+1F49F: "💟" HEART DECORATION
     */
    public static final int spoken_emoji_1F49F=0x7f0e044b;
    /**
     * Spoken description for Unicode code point U+1F4A0: "💠" DIAMOND SHAPE WITH A DOT INSIDE
     */
    public static final int spoken_emoji_1F4A0=0x7f0e044c;
    /**
     * Spoken description for Unicode code point U+1F4A1: "💡" ELECTRIC LIGHT BULB
     */
    public static final int spoken_emoji_1F4A1=0x7f0e044d;
    /**
     * Spoken description for Unicode code point U+1F4A2: "💢" ANGER SYMBOL
     */
    public static final int spoken_emoji_1F4A2=0x7f0e044e;
    /**
     * Spoken description for Unicode code point U+1F4A3: "💣" BOMB
     */
    public static final int spoken_emoji_1F4A3=0x7f0e044f;
    /**
     * Spoken description for Unicode code point U+1F4A4: "💤" SLEEPING SYMBOL
     */
    public static final int spoken_emoji_1F4A4=0x7f0e0450;
    /**
     * Spoken description for Unicode code point U+1F4A5: "💥" COLLISION SYMBOL
     */
    public static final int spoken_emoji_1F4A5=0x7f0e0451;
    /**
     * Spoken description for Unicode code point U+1F4A6: "💦" SPLASHING SWEAT SYMBOL
     */
    public static final int spoken_emoji_1F4A6=0x7f0e0452;
    /**
     * Spoken description for Unicode code point U+1F4A7: "💧" DROPLET
     */
    public static final int spoken_emoji_1F4A7=0x7f0e0453;
    /**
     * Spoken description for Unicode code point U+1F4A8: "💨" DASH SYMBOL
     */
    public static final int spoken_emoji_1F4A8=0x7f0e0454;
    /**
     * Spoken description for Unicode code point U+1F4A9: "💩" PILE OF POO
     */
    public static final int spoken_emoji_1F4A9=0x7f0e0455;
    /**
     * Spoken description for Unicode code point U+1F4AA: "💪" FLEXED BICEPS
     */
    public static final int spoken_emoji_1F4AA=0x7f0e0456;
    /**
     * Spoken description for Unicode code point U+1F4AB: "💫" DIZZY SYMBOL
     */
    public static final int spoken_emoji_1F4AB=0x7f0e0457;
    /**
     * Spoken description for Unicode code point U+1F4AC: "💬" SPEECH BALLOON
     */
    public static final int spoken_emoji_1F4AC=0x7f0e0458;
    /**
     * Spoken description for Unicode code point U+1F4AD: "💭" THOUGHT BALLOON
     */
    public static final int spoken_emoji_1F4AD=0x7f0e0459;
    /**
     * Spoken description for Unicode code point U+1F4AE: "💮" WHITE FLOWER
     */
    public static final int spoken_emoji_1F4AE=0x7f0e045a;
    /**
     * Spoken description for Unicode code point U+1F4AF: "💯" HUNDRED POINTS SYMBOL
     */
    public static final int spoken_emoji_1F4AF=0x7f0e045b;
    /**
     * Spoken description for Unicode code point U+1F4B0: "💰" MONEY BAG
     */
    public static final int spoken_emoji_1F4B0=0x7f0e045c;
    /**
     * Spoken description for Unicode code point U+1F4B1: "💱" CURRENCY EXCHANGE
     */
    public static final int spoken_emoji_1F4B1=0x7f0e045d;
    /**
     * Spoken description for Unicode code point U+1F4B2: "💲" HEAVY DOLLAR SIGN
     */
    public static final int spoken_emoji_1F4B2=0x7f0e045e;
    /**
     * Spoken description for Unicode code point U+1F4B3: "💳" CREDIT CARD
     */
    public static final int spoken_emoji_1F4B3=0x7f0e045f;
    /**
     * Spoken description for Unicode code point U+1F4B4: "💴" BANKNOTE WITH YEN SIGN
     */
    public static final int spoken_emoji_1F4B4=0x7f0e0460;
    /**
     * Spoken description for Unicode code point U+1F4B5: "💵" BANKNOTE WITH DOLLAR SIGN
     */
    public static final int spoken_emoji_1F4B5=0x7f0e0461;
    /**
     * Spoken description for Unicode code point U+1F4B6: "💶" BANKNOTE WITH EURO SIGN
     */
    public static final int spoken_emoji_1F4B6=0x7f0e0462;
    /**
     * Spoken description for Unicode code point U+1F4B7: "💷" BANKNOTE WITH POUND SIGN
     */
    public static final int spoken_emoji_1F4B7=0x7f0e0463;
    /**
     * Spoken description for Unicode code point U+1F4B8: "💸" MONEY WITH WINGS
     */
    public static final int spoken_emoji_1F4B8=0x7f0e0464;
    /**
     * Spoken description for Unicode code point U+1F4B9: "💹" CHART WITH UPWARDS TREND AND YEN SIGN
     */
    public static final int spoken_emoji_1F4B9=0x7f0e0465;
    /**
     * Spoken description for Unicode code point U+1F4BA: "💺" SEAT
     */
    public static final int spoken_emoji_1F4BA=0x7f0e0466;
    /**
     * Spoken description for Unicode code point U+1F4BB: "💻" PERSONAL COMPUTER
     */
    public static final int spoken_emoji_1F4BB=0x7f0e0467;
    /**
     * Spoken description for Unicode code point U+1F4BC: "💼" BRIEFCASE
     */
    public static final int spoken_emoji_1F4BC=0x7f0e0468;
    /**
     * Spoken description for Unicode code point U+1F4BD: "💽" MINIDISC
     */
    public static final int spoken_emoji_1F4BD=0x7f0e0469;
    /**
     * Spoken description for Unicode code point U+1F4BE: "💾" FLOPPY DISK
     */
    public static final int spoken_emoji_1F4BE=0x7f0e046a;
    /**
     * Spoken description for Unicode code point U+1F4BF: "💿" OPTICAL DISC
     */
    public static final int spoken_emoji_1F4BF=0x7f0e046b;
    /**
     * Spoken description for Unicode code point U+1F4C0: "📀" DVD
     */
    public static final int spoken_emoji_1F4C0=0x7f0e046c;
    /**
     * Spoken description for Unicode code point U+1F4C1: "📁" FILE FOLDER
     */
    public static final int spoken_emoji_1F4C1=0x7f0e046d;
    /**
     * Spoken description for Unicode code point U+1F4C2: "📂" OPEN FILE FOLDER
     */
    public static final int spoken_emoji_1F4C2=0x7f0e046e;
    /**
     * Spoken description for Unicode code point U+1F4C3: "📃" PAGE WITH CURL
     */
    public static final int spoken_emoji_1F4C3=0x7f0e046f;
    /**
     * Spoken description for Unicode code point U+1F4C4: "📄" PAGE FACING UP
     */
    public static final int spoken_emoji_1F4C4=0x7f0e0470;
    /**
     * Spoken description for Unicode code point U+1F4C5: "📅" CALENDAR
     */
    public static final int spoken_emoji_1F4C5=0x7f0e0471;
    /**
     * Spoken description for Unicode code point U+1F4C6: "📆" TEAR-OFF CALENDAR
     */
    public static final int spoken_emoji_1F4C6=0x7f0e0472;
    /**
     * Spoken description for Unicode code point U+1F4C7: "📇" CARD INDEX
     */
    public static final int spoken_emoji_1F4C7=0x7f0e0473;
    /**
     * Spoken description for Unicode code point U+1F4C8: "📈" CHART WITH UPWARDS TREND
     */
    public static final int spoken_emoji_1F4C8=0x7f0e0474;
    /**
     * Spoken description for Unicode code point U+1F4C9: "📉" CHART WITH DOWNWARDS TREND
     */
    public static final int spoken_emoji_1F4C9=0x7f0e0475;
    /**
     * Spoken description for Unicode code point U+1F4CA: "📊" BAR CHART
     */
    public static final int spoken_emoji_1F4CA=0x7f0e0476;
    /**
     * Spoken description for Unicode code point U+1F4CB: "📋" CLIPBOARD
     */
    public static final int spoken_emoji_1F4CB=0x7f0e0477;
    /**
     * Spoken description for Unicode code point U+1F4CC: "📌" PUSHPIN
     */
    public static final int spoken_emoji_1F4CC=0x7f0e0478;
    /**
     * Spoken description for Unicode code point U+1F4CD: "📍" ROUND PUSHPIN
     */
    public static final int spoken_emoji_1F4CD=0x7f0e0479;
    /**
     * Spoken description for Unicode code point U+1F4CE: "📎" PAPERCLIP
     */
    public static final int spoken_emoji_1F4CE=0x7f0e047a;
    /**
     * Spoken description for Unicode code point U+1F4CF: "📏" STRAIGHT RULER
     */
    public static final int spoken_emoji_1F4CF=0x7f0e047b;
    /**
     * Spoken description for Unicode code point U+1F4D0: "📐" TRIANGULAR RULER
     */
    public static final int spoken_emoji_1F4D0=0x7f0e047c;
    /**
     * Spoken description for Unicode code point U+1F4D1: "📑" BOOKMARK TABS
     */
    public static final int spoken_emoji_1F4D1=0x7f0e047d;
    /**
     * Spoken description for Unicode code point U+1F4D2: "📒" LEDGER
     */
    public static final int spoken_emoji_1F4D2=0x7f0e047e;
    /**
     * Spoken description for Unicode code point U+1F4D3: "📓" NOTEBOOK
     */
    public static final int spoken_emoji_1F4D3=0x7f0e047f;
    /**
     * Spoken description for Unicode code point U+1F4D4: "📔" NOTEBOOK WITH DECORATIVE COVER
     */
    public static final int spoken_emoji_1F4D4=0x7f0e0480;
    /**
     * Spoken description for Unicode code point U+1F4D5: "📕" CLOSED BOOK
     */
    public static final int spoken_emoji_1F4D5=0x7f0e0481;
    /**
     * Spoken description for Unicode code point U+1F4D6: "📖" OPEN BOOK
     */
    public static final int spoken_emoji_1F4D6=0x7f0e0482;
    /**
     * Spoken description for Unicode code point U+1F4D7: "📗" GREEN BOOK
     */
    public static final int spoken_emoji_1F4D7=0x7f0e0483;
    /**
     * Spoken description for Unicode code point U+1F4D8: "📘" BLUE BOOK
     */
    public static final int spoken_emoji_1F4D8=0x7f0e0484;
    /**
     * Spoken description for Unicode code point U+1F4D9: "📙" ORANGE BOOK
     */
    public static final int spoken_emoji_1F4D9=0x7f0e0485;
    /**
     * Spoken description for Unicode code point U+1F4DA: "📚" BOOKS
     */
    public static final int spoken_emoji_1F4DA=0x7f0e0486;
    /**
     * Spoken description for Unicode code point U+1F4DB: "📛" NAME BADGE
     */
    public static final int spoken_emoji_1F4DB=0x7f0e0487;
    /**
     * Spoken description for Unicode code point U+1F4DC: "📜" SCROLL
     */
    public static final int spoken_emoji_1F4DC=0x7f0e0488;
    /**
     * Spoken description for Unicode code point U+1F4DD: "📝" MEMO
     */
    public static final int spoken_emoji_1F4DD=0x7f0e0489;
    /**
     * Spoken description for Unicode code point U+1F4DE: "📞" TELEPHONE RECEIVER
     */
    public static final int spoken_emoji_1F4DE=0x7f0e048a;
    /**
     * Spoken description for Unicode code point U+1F4DF: "📟" PAGER
     */
    public static final int spoken_emoji_1F4DF=0x7f0e048b;
    /**
     * Spoken description for Unicode code point U+1F4E0: "📠" FAX MACHINE
     */
    public static final int spoken_emoji_1F4E0=0x7f0e048c;
    /**
     * Spoken description for Unicode code point U+1F4E1: "📡" SATELLITE ANTENNA
     */
    public static final int spoken_emoji_1F4E1=0x7f0e048d;
    /**
     * Spoken description for Unicode code point U+1F4E2: "📢" PUBLIC ADDRESS LOUDSPEAKER
     */
    public static final int spoken_emoji_1F4E2=0x7f0e048e;
    /**
     * Spoken description for Unicode code point U+1F4E3: "📣" CHEERING MEGAPHONE
     */
    public static final int spoken_emoji_1F4E3=0x7f0e048f;
    /**
     * Spoken description for Unicode code point U+1F4E4: "📤" OUTBOX TRAY
     */
    public static final int spoken_emoji_1F4E4=0x7f0e0490;
    /**
     * Spoken description for Unicode code point U+1F4E5: "📥" INBOX TRAY
     */
    public static final int spoken_emoji_1F4E5=0x7f0e0491;
    /**
     * Spoken description for Unicode code point U+1F4E6: "📦" PACKAGE
     */
    public static final int spoken_emoji_1F4E6=0x7f0e0492;
    /**
     * Spoken description for Unicode code point U+1F4E7: "📧" E-MAIL SYMBOL
     */
    public static final int spoken_emoji_1F4E7=0x7f0e0493;
    /**
     * Spoken description for Unicode code point U+1F4E8: "📨" INCOMING ENVELOPE
     */
    public static final int spoken_emoji_1F4E8=0x7f0e0494;
    /**
     * Spoken description for Unicode code point U+1F4E9: "📩" ENVELOPE WITH DOWNWARDS ARROW ABOVE
     */
    public static final int spoken_emoji_1F4E9=0x7f0e0495;
    /**
     * Spoken description for Unicode code point U+1F4EA: "📪" CLOSED MAILBOX WITH LOWERED FLAG
     */
    public static final int spoken_emoji_1F4EA=0x7f0e0496;
    /**
     * Spoken description for Unicode code point U+1F4EB: "📫" CLOSED MAILBOX WITH RAISED FLAG
     */
    public static final int spoken_emoji_1F4EB=0x7f0e0497;
    /**
     * Spoken description for Unicode code point U+1F4EC: "📬" OPEN MAILBOX WITH RAISED FLAG
     */
    public static final int spoken_emoji_1F4EC=0x7f0e0498;
    /**
     * Spoken description for Unicode code point U+1F4ED: "📭" OPEN MAILBOX WITH LOWERED FLAG
     */
    public static final int spoken_emoji_1F4ED=0x7f0e0499;
    /**
     * Spoken description for Unicode code point U+1F4EE: "📮" POSTBOX
     */
    public static final int spoken_emoji_1F4EE=0x7f0e049a;
    /**
     * Spoken description for Unicode code point U+1F4EF: "📯" POSTAL HORN
     */
    public static final int spoken_emoji_1F4EF=0x7f0e049b;
    /**
     * Spoken description for Unicode code point U+1F4F0: "📰" NEWSPAPER
     */
    public static final int spoken_emoji_1F4F0=0x7f0e049c;
    /**
     * Spoken description for Unicode code point U+1F4F1: "📱" MOBILE PHONE
     */
    public static final int spoken_emoji_1F4F1=0x7f0e049d;
    /**
     * Spoken description for Unicode code point U+1F4F2: "📲" MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT
     */
    public static final int spoken_emoji_1F4F2=0x7f0e049e;
    /**
     * Spoken description for Unicode code point U+1F4F3: "📳" VIBRATION MODE
     */
    public static final int spoken_emoji_1F4F3=0x7f0e049f;
    /**
     * Spoken description for Unicode code point U+1F4F4: "📴" MOBILE PHONE OFF
     */
    public static final int spoken_emoji_1F4F4=0x7f0e04a0;
    /**
     * Spoken description for Unicode code point U+1F4F5: "📵" NO MOBILE PHONES
     */
    public static final int spoken_emoji_1F4F5=0x7f0e04a1;
    /**
     * Spoken description for Unicode code point U+1F4F6: "📶" ANTENNA WITH BARS
     */
    public static final int spoken_emoji_1F4F6=0x7f0e04a2;
    /**
     * Spoken description for Unicode code point U+1F4F7: "📷" CAMERA
     */
    public static final int spoken_emoji_1F4F7=0x7f0e04a3;
    /**
     * Spoken description for Unicode code point U+1F4F8: "📸" CAMERA WITH FLASH
     */
    public static final int spoken_emoji_1F4F8=0x7f0e04a4;
    /**
     * Spoken description for Unicode code point U+1F4F9: "📹" VIDEO CAMERA
     */
    public static final int spoken_emoji_1F4F9=0x7f0e04a5;
    /**
     * Spoken description for Unicode code point U+1F4FA: "📺" TELEVISION
     */
    public static final int spoken_emoji_1F4FA=0x7f0e04a6;
    /**
     * Spoken description for Unicode code point U+1F4FB: "📻" RADIO
     */
    public static final int spoken_emoji_1F4FB=0x7f0e04a7;
    /**
     * Spoken description for Unicode code point U+1F4FC: "📼" VIDEOCASSETTE
     */
    public static final int spoken_emoji_1F4FC=0x7f0e04a8;
    /**
     * Spoken description for Unicode code point U+1F4FD: "📽" FILM PROJECTOR
     */
    public static final int spoken_emoji_1F4FD=0x7f0e04a9;
    /**
     * Spoken description for Unicode code point U+1F4FF: "📿" PRAYER BEADS
     */
    public static final int spoken_emoji_1F4FF=0x7f0e04aa;
    /**
     * Spoken description for Unicode code point U+1F500: "🔀" TWISTED RIGHTWARDS ARROWS
     */
    public static final int spoken_emoji_1F500=0x7f0e04ab;
    /**
     * Spoken description for Unicode code point U+1F501: "🔁" CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS
     */
    public static final int spoken_emoji_1F501=0x7f0e04ac;
    /**
     * Spoken description for Unicode code point U+1F502: "🔂" CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY
     */
    public static final int spoken_emoji_1F502=0x7f0e04ad;
    /**
     * Spoken description for Unicode code point U+1F503: "🔃" CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS
     */
    public static final int spoken_emoji_1F503=0x7f0e04ae;
    /**
     * Spoken description for Unicode code point U+1F504: "🔄" ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS
     */
    public static final int spoken_emoji_1F504=0x7f0e04af;
    /**
     * Spoken description for Unicode code point U+1F505: "🔅" LOW BRIGHTNESS SYMBOL
     */
    public static final int spoken_emoji_1F505=0x7f0e04b0;
    /**
     * Spoken description for Unicode code point U+1F506: "🔆" HIGH BRIGHTNESS SYMBOL
     */
    public static final int spoken_emoji_1F506=0x7f0e04b1;
    /**
     * Spoken description for Unicode code point U+1F507: "🔇" SPEAKER WITH CANCELLATION STROKE
     */
    public static final int spoken_emoji_1F507=0x7f0e04b2;
    /**
     * Spoken description for Unicode code point U+1F508: "🔈" SPEAKER
     */
    public static final int spoken_emoji_1F508=0x7f0e04b3;
    /**
     * Spoken description for Unicode code point U+1F509: "🔉" SPEAKER WITH ONE SOUND WAVE
     */
    public static final int spoken_emoji_1F509=0x7f0e04b4;
    /**
     * Spoken description for Unicode code point U+1F50A: "🔊" SPEAKER WITH THREE SOUND WAVES
     */
    public static final int spoken_emoji_1F50A=0x7f0e04b5;
    /**
     * Spoken description for Unicode code point U+1F50B: "🔋" BATTERY
     */
    public static final int spoken_emoji_1F50B=0x7f0e04b6;
    /**
     * Spoken description for Unicode code point U+1F50C: "🔌" ELECTRIC PLUG
     */
    public static final int spoken_emoji_1F50C=0x7f0e04b7;
    /**
     * Spoken description for Unicode code point U+1F50D: "🔍" LEFT-POINTING MAGNIFYING GLASS
     */
    public static final int spoken_emoji_1F50D=0x7f0e04b8;
    /**
     * Spoken description for Unicode code point U+1F50E: "🔎" RIGHT-POINTING MAGNIFYING GLASS
     */
    public static final int spoken_emoji_1F50E=0x7f0e04b9;
    /**
     * Spoken description for Unicode code point U+1F50F: "🔏" LOCK WITH INK PEN
     */
    public static final int spoken_emoji_1F50F=0x7f0e04ba;
    /**
     * Spoken description for Unicode code point U+1F510: "🔐" CLOSED LOCK WITH KEY
     */
    public static final int spoken_emoji_1F510=0x7f0e04bb;
    /**
     * Spoken description for Unicode code point U+1F511: "🔑" KEY
     */
    public static final int spoken_emoji_1F511=0x7f0e04bc;
    /**
     * Spoken description for Unicode code point U+1F512: "🔒" LOCK
     */
    public static final int spoken_emoji_1F512=0x7f0e04bd;
    /**
     * Spoken description for Unicode code point U+1F513: "🔓" OPEN LOCK
     */
    public static final int spoken_emoji_1F513=0x7f0e04be;
    /**
     * Spoken description for Unicode code point U+1F514: "🔔" BELL
     */
    public static final int spoken_emoji_1F514=0x7f0e04bf;
    /**
     * Spoken description for Unicode code point U+1F515: "🔕" BELL WITH CANCELLATION STROKE
     */
    public static final int spoken_emoji_1F515=0x7f0e04c0;
    /**
     * Spoken description for Unicode code point U+1F516: "🔖" BOOKMARK
     */
    public static final int spoken_emoji_1F516=0x7f0e04c1;
    /**
     * Spoken description for Unicode code point U+1F517: "🔗" LINK SYMBOL
     */
    public static final int spoken_emoji_1F517=0x7f0e04c2;
    /**
     * Spoken description for Unicode code point U+1F518: "🔘" RADIO BUTTON
     */
    public static final int spoken_emoji_1F518=0x7f0e04c3;
    /**
     * Spoken description for Unicode code point U+1F519: "🔙" BACK WITH LEFTWARDS ARROW ABOVE
     */
    public static final int spoken_emoji_1F519=0x7f0e04c4;
    /**
     * Spoken description for Unicode code point U+1F51A: "🔚" END WITH LEFTWARDS ARROW ABOVE
     */
    public static final int spoken_emoji_1F51A=0x7f0e04c5;
    /**
     * Spoken description for Unicode code point U+1F51B: "🔛" ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE
     */
    public static final int spoken_emoji_1F51B=0x7f0e04c6;
    /**
     * Spoken description for Unicode code point U+1F51C: "🔜" SOON WITH RIGHTWARDS ARROW ABOVE
     */
    public static final int spoken_emoji_1F51C=0x7f0e04c7;
    /**
     * Spoken description for Unicode code point U+1F51D: "🔝" TOP WITH UPWARDS ARROW ABOVE
     */
    public static final int spoken_emoji_1F51D=0x7f0e04c8;
    /**
     * Spoken description for Unicode code point U+1F51E: "🔞" NO ONE UNDER EIGHTEEN SYMBOL
     */
    public static final int spoken_emoji_1F51E=0x7f0e04c9;
    /**
     * Spoken description for Unicode code point U+1F51F: "🔟" KEYCAP TEN
     */
    public static final int spoken_emoji_1F51F=0x7f0e04ca;
    /**
     * Spoken description for Unicode code point U+1F520: "🔠" INPUT SYMBOL FOR LATIN CAPITAL LETTERS
     */
    public static final int spoken_emoji_1F520=0x7f0e04cb;
    /**
     * Spoken description for Unicode code point U+1F521: "🔡" INPUT SYMBOL FOR LATIN SMALL LETTERS
     */
    public static final int spoken_emoji_1F521=0x7f0e04cc;
    /**
     * Spoken description for Unicode code point U+1F522: "🔢" INPUT SYMBOL FOR NUMBERS
     */
    public static final int spoken_emoji_1F522=0x7f0e04cd;
    /**
     * Spoken description for Unicode code point U+1F523: "🔣" INPUT SYMBOL FOR SYMBOLS
     */
    public static final int spoken_emoji_1F523=0x7f0e04ce;
    /**
     * Spoken description for Unicode code point U+1F524: "🔤" INPUT SYMBOL FOR LATIN LETTERS
     */
    public static final int spoken_emoji_1F524=0x7f0e04cf;
    /**
     * Spoken description for Unicode code point U+1F525: "🔥" FIRE
     */
    public static final int spoken_emoji_1F525=0x7f0e04d0;
    /**
     * Spoken description for Unicode code point U+1F526: "🔦" ELECTRIC TORCH
     */
    public static final int spoken_emoji_1F526=0x7f0e04d1;
    /**
     * Spoken description for Unicode code point U+1F527: "🔧" WRENCH
     */
    public static final int spoken_emoji_1F527=0x7f0e04d2;
    /**
     * Spoken description for Unicode code point U+1F528: "🔨" HAMMER
     */
    public static final int spoken_emoji_1F528=0x7f0e04d3;
    /**
     * Spoken description for Unicode code point U+1F529: "🔩" NUT AND BOLT
     */
    public static final int spoken_emoji_1F529=0x7f0e04d4;
    /**
     * Spoken description for Unicode code point U+1F52A: "🔪" HOCHO
     */
    public static final int spoken_emoji_1F52A=0x7f0e04d5;
    /**
     * Spoken description for Unicode code point U+1F52B: "🔫" PISTOL
     */
    public static final int spoken_emoji_1F52B=0x7f0e04d6;
    /**
     * Spoken description for Unicode code point U+1F52C: "🔬" MICROSCOPE
     */
    public static final int spoken_emoji_1F52C=0x7f0e04d7;
    /**
     * Spoken description for Unicode code point U+1F52D: "🔭" TELESCOPE
     */
    public static final int spoken_emoji_1F52D=0x7f0e04d8;
    /**
     * Spoken description for Unicode code point U+1F52E: "🔮" CRYSTAL BALL
     */
    public static final int spoken_emoji_1F52E=0x7f0e04d9;
    /**
     * Spoken description for Unicode code point U+1F52F: "🔯" SIX POINTED STAR WITH MIDDLE DOT
     */
    public static final int spoken_emoji_1F52F=0x7f0e04da;
    /**
     * Spoken description for Unicode code point U+1F530: "🔰" JAPANESE SYMBOL FOR BEGINNER
     */
    public static final int spoken_emoji_1F530=0x7f0e04db;
    /**
     * Spoken description for Unicode code point U+1F531: "🔱" TRIDENT EMBLEM
     */
    public static final int spoken_emoji_1F531=0x7f0e04dc;
    /**
     * Spoken description for Unicode code point U+1F532: "🔲" BLACK SQUARE BUTTON
     */
    public static final int spoken_emoji_1F532=0x7f0e04dd;
    /**
     * Spoken description for Unicode code point U+1F533: "🔳" WHITE SQUARE BUTTON
     */
    public static final int spoken_emoji_1F533=0x7f0e04de;
    /**
     * Spoken description for Unicode code point U+1F534: "🔴" LARGE RED CIRCLE
     */
    public static final int spoken_emoji_1F534=0x7f0e04df;
    /**
     * Spoken description for Unicode code point U+1F535: "🔵" LARGE BLUE CIRCLE
     */
    public static final int spoken_emoji_1F535=0x7f0e04e0;
    /**
     * Spoken description for Unicode code point U+1F536: "🔶" LARGE ORANGE DIAMOND
     */
    public static final int spoken_emoji_1F536=0x7f0e04e1;
    /**
     * Spoken description for Unicode code point U+1F537: "🔷" LARGE BLUE DIAMOND
     */
    public static final int spoken_emoji_1F537=0x7f0e04e2;
    /**
     * Spoken description for Unicode code point U+1F538: "🔸" SMALL ORANGE DIAMOND
     */
    public static final int spoken_emoji_1F538=0x7f0e04e3;
    /**
     * Spoken description for Unicode code point U+1F539: "🔹" SMALL BLUE DIAMOND
     */
    public static final int spoken_emoji_1F539=0x7f0e04e4;
    /**
     * Spoken description for Unicode code point U+1F53A: "🔺" UP-POINTING RED TRIANGLE
     */
    public static final int spoken_emoji_1F53A=0x7f0e04e5;
    /**
     * Spoken description for Unicode code point U+1F53B: "🔻" DOWN-POINTING RED TRIANGLE
     */
    public static final int spoken_emoji_1F53B=0x7f0e04e6;
    /**
     * Spoken description for Unicode code point U+1F53C: "🔼" UP-POINTING SMALL RED TRIANGLE
     */
    public static final int spoken_emoji_1F53C=0x7f0e04e7;
    /**
     * Spoken description for Unicode code point U+1F53D: "🔽" DOWN-POINTING SMALL RED TRIANGLE
     */
    public static final int spoken_emoji_1F53D=0x7f0e04e8;
    /**
     * Spoken description for Unicode code point U+1F549: "🕉" OM SYMBOL
     */
    public static final int spoken_emoji_1F549=0x7f0e04e9;
    /**
     * Spoken description for Unicode code point U+1F54A: "🕊" DOVE OF PEACE
     */
    public static final int spoken_emoji_1F54A=0x7f0e04ea;
    /**
     * Spoken description for Unicode code point U+1F54B: "🕋" KAABA
     */
    public static final int spoken_emoji_1F54B=0x7f0e04eb;
    /**
     * Spoken description for Unicode code point U+1F54C: "🕌" MOSQUE
     */
    public static final int spoken_emoji_1F54C=0x7f0e04ec;
    /**
     * Spoken description for Unicode code point U+1F54D: "🕍" SYNAGOGUE
     */
    public static final int spoken_emoji_1F54D=0x7f0e04ed;
    /**
     * Spoken description for Unicode code point U+1F54E: "🕎" MENORAH WITH NINE BRANCHES
     */
    public static final int spoken_emoji_1F54E=0x7f0e04ee;
    /**
     * Spoken description for Unicode code point U+1F550: "🕐" CLOCK FACE ONE OCLOCK
     */
    public static final int spoken_emoji_1F550=0x7f0e04ef;
    /**
     * Spoken description for Unicode code point U+1F551: "🕑" CLOCK FACE TWO OCLOCK
     */
    public static final int spoken_emoji_1F551=0x7f0e04f0;
    /**
     * Spoken description for Unicode code point U+1F552: "🕒" CLOCK FACE THREE OCLOCK
     */
    public static final int spoken_emoji_1F552=0x7f0e04f1;
    /**
     * Spoken description for Unicode code point U+1F553: "🕓" CLOCK FACE FOUR OCLOCK
     */
    public static final int spoken_emoji_1F553=0x7f0e04f2;
    /**
     * Spoken description for Unicode code point U+1F554: "🕔" CLOCK FACE FIVE OCLOCK
     */
    public static final int spoken_emoji_1F554=0x7f0e04f3;
    /**
     * Spoken description for Unicode code point U+1F555: "🕕" CLOCK FACE SIX OCLOCK
     */
    public static final int spoken_emoji_1F555=0x7f0e04f4;
    /**
     * Spoken description for Unicode code point U+1F556: "🕖" CLOCK FACE SEVEN OCLOCK
     */
    public static final int spoken_emoji_1F556=0x7f0e04f5;
    /**
     * Spoken description for Unicode code point U+1F557: "🕗" CLOCK FACE EIGHT OCLOCK
     */
    public static final int spoken_emoji_1F557=0x7f0e04f6;
    /**
     * Spoken description for Unicode code point U+1F558: "🕘" CLOCK FACE NINE OCLOCK
     */
    public static final int spoken_emoji_1F558=0x7f0e04f7;
    /**
     * Spoken description for Unicode code point U+1F559: "🕙" CLOCK FACE TEN OCLOCK
     */
    public static final int spoken_emoji_1F559=0x7f0e04f8;
    /**
     * Spoken description for Unicode code point U+1F55A: "🕚" CLOCK FACE ELEVEN OCLOCK
     */
    public static final int spoken_emoji_1F55A=0x7f0e04f9;
    /**
     * Spoken description for Unicode code point U+1F55B: "🕛" CLOCK FACE TWELVE OCLOCK
     */
    public static final int spoken_emoji_1F55B=0x7f0e04fa;
    /**
     * Spoken description for Unicode code point U+1F55C: "🕜" CLOCK FACE ONE-THIRTY
     */
    public static final int spoken_emoji_1F55C=0x7f0e04fb;
    /**
     * Spoken description for Unicode code point U+1F55D: "🕝" CLOCK FACE TWO-THIRTY
     */
    public static final int spoken_emoji_1F55D=0x7f0e04fc;
    /**
     * Spoken description for Unicode code point U+1F55E: "🕞" CLOCK FACE THREE-THIRTY
     */
    public static final int spoken_emoji_1F55E=0x7f0e04fd;
    /**
     * Spoken description for Unicode code point U+1F55F: "🕟" CLOCK FACE FOUR-THIRTY
     */
    public static final int spoken_emoji_1F55F=0x7f0e04fe;
    /**
     * Spoken description for Unicode code point U+1F560: "🕠" CLOCK FACE FIVE-THIRTY
     */
    public static final int spoken_emoji_1F560=0x7f0e04ff;
    /**
     * Spoken description for Unicode code point U+1F561: "🕡" CLOCK FACE SIX-THIRTY
     */
    public static final int spoken_emoji_1F561=0x7f0e0500;
    /**
     * Spoken description for Unicode code point U+1F562: "🕢" CLOCK FACE SEVEN-THIRTY
     */
    public static final int spoken_emoji_1F562=0x7f0e0501;
    /**
     * Spoken description for Unicode code point U+1F563: "🕣" CLOCK FACE EIGHT-THIRTY
     */
    public static final int spoken_emoji_1F563=0x7f0e0502;
    /**
     * Spoken description for Unicode code point U+1F564: "🕤" CLOCK FACE NINE-THIRTY
     */
    public static final int spoken_emoji_1F564=0x7f0e0503;
    /**
     * Spoken description for Unicode code point U+1F565: "🕥" CLOCK FACE TEN-THIRTY
     */
    public static final int spoken_emoji_1F565=0x7f0e0504;
    /**
     * Spoken description for Unicode code point U+1F566: "🕦" CLOCK FACE ELEVEN-THIRTY
     */
    public static final int spoken_emoji_1F566=0x7f0e0505;
    /**
     * Spoken description for Unicode code point U+1F567: "🕧" CLOCK FACE TWELVE-THIRTY
     */
    public static final int spoken_emoji_1F567=0x7f0e0506;
    /**
     * Spoken description for Unicode code point U+1F56F: "🕯" CANDLE
     */
    public static final int spoken_emoji_1F56F=0x7f0e0507;
    /**
     * Spoken description for Unicode code point U+1F570: "🕰" MANTELPIECE CLOCK
     */
    public static final int spoken_emoji_1F570=0x7f0e0508;
    /**
     * Spoken description for Unicode code point U+1F573: "🕳" HOLE
     */
    public static final int spoken_emoji_1F573=0x7f0e0509;
    /**
     * Spoken description for Unicode code point U+1F574: "🕴" MAN IN BUSINESS SUIT LEVITATING
     */
    public static final int spoken_emoji_1F574=0x7f0e050a;
    /**
     * Spoken description for Unicode code point U+1F575: "🕵" SLEUTH OR SPY
     */
    public static final int spoken_emoji_1F575=0x7f0e050b;
    /**
     * Spoken description for Unicode code point U+1F576: "🕶" DARK SUNGLASSES
     */
    public static final int spoken_emoji_1F576=0x7f0e050c;
    /**
     * Spoken description for Unicode code point U+1F577: "🕷" SPIDER
     */
    public static final int spoken_emoji_1F577=0x7f0e050d;
    /**
     * Spoken description for Unicode code point U+1F578: "🕸" SPIDER WEB
     */
    public static final int spoken_emoji_1F578=0x7f0e050e;
    /**
     * Spoken description for Unicode code point U+1F579: "🕹" JOYSTICK
     */
    public static final int spoken_emoji_1F579=0x7f0e050f;
    /**
     * Spoken description for Unicode code point U+1F587: "🖇" LINKED PAPERCLIPS
     */
    public static final int spoken_emoji_1F587=0x7f0e0510;
    /**
     * Spoken description for Unicode code point U+1F58A: "🖊" LOWER LEFT BALLPOINT PEN
     */
    public static final int spoken_emoji_1F58A=0x7f0e0511;
    /**
     * Spoken description for Unicode code point U+1F58B: "🖋" LOWER LEFT FOUNTAIN PEN
     */
    public static final int spoken_emoji_1F58B=0x7f0e0512;
    /**
     * Spoken description for Unicode code point U+1F58C: "🖌" LOWER LEFT PAINTBRUSH
     */
    public static final int spoken_emoji_1F58C=0x7f0e0513;
    /**
     * Spoken description for Unicode code point U+1F58D: "🖍" LOWER LEFT CRAYON
     */
    public static final int spoken_emoji_1F58D=0x7f0e0514;
    /**
     * Spoken description for Unicode code point U+1F590: "🖐" RAISED HAND WITH FINGERS SPLAYED
     */
    public static final int spoken_emoji_1F590=0x7f0e0515;
    /**
     * Spoken description for Unicode code point U+1F595: "🖕" REVERSED HAND WITH MIDDLE FINGER EXTENDED
     */
    public static final int spoken_emoji_1F595=0x7f0e0516;
    /**
     * Spoken description for Unicode code point U+1F596: "🖖" RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS
     */
    public static final int spoken_emoji_1F596=0x7f0e0517;
    /**
     * Spoken description for Unicode code point U+1F5A5: "🖥" DESKTOP COMPUTER
     */
    public static final int spoken_emoji_1F5A5=0x7f0e0518;
    /**
     * Spoken description for Unicode code point U+1F5A8: "🖨" PRINTER
     */
    public static final int spoken_emoji_1F5A8=0x7f0e0519;
    /**
     * Spoken description for Unicode code point U+1F5B1: "🖱" THREE BUTTON MOUSE
     */
    public static final int spoken_emoji_1F5B1=0x7f0e051a;
    /**
     * Spoken description for Unicode code point U+1F5B2: "🖲" TRACKBALL
     */
    public static final int spoken_emoji_1F5B2=0x7f0e051b;
    /**
     * Spoken description for Unicode code point U+1F5BC: "🖼" FRAME WITH PICTURE
     */
    public static final int spoken_emoji_1F5BC=0x7f0e051c;
    /**
     * Spoken description for Unicode code point U+1F5C2: "🗂" CARD INDEX DIVIDERS
     */
    public static final int spoken_emoji_1F5C2=0x7f0e051d;
    /**
     * Spoken description for Unicode code point U+1F5C3: "🗃" CARD FILE BOX
     */
    public static final int spoken_emoji_1F5C3=0x7f0e051e;
    /**
     * Spoken description for Unicode code point U+1F5C4: "🗄" FILE CABINET
     */
    public static final int spoken_emoji_1F5C4=0x7f0e051f;
    /**
     * Spoken description for Unicode code point U+1F5D1: "🗑" WASTEBASKET
     */
    public static final int spoken_emoji_1F5D1=0x7f0e0520;
    /**
     * Spoken description for Unicode code point U+1F5D2: "🗒" SPIRAL NOTE PAD
     */
    public static final int spoken_emoji_1F5D2=0x7f0e0521;
    /**
     * Spoken description for Unicode code point U+1F5D3: "🗓" SPIRAL CALENDAR PAD
     */
    public static final int spoken_emoji_1F5D3=0x7f0e0522;
    /**
     * Spoken description for Unicode code point U+1F5DC: "🗜" COMPRESSION
     */
    public static final int spoken_emoji_1F5DC=0x7f0e0523;
    /**
     * Spoken description for Unicode code point U+1F5DD: "🗝" OLD KEY
     */
    public static final int spoken_emoji_1F5DD=0x7f0e0524;
    /**
     * Spoken description for Unicode code point U+1F5DE: "🗞" ROLLED-UP NEWSPAPER
     */
    public static final int spoken_emoji_1F5DE=0x7f0e0525;
    /**
     * Spoken description for Unicode code point U+1F5E1: "🗡" DAGGER KNIFE
     */
    public static final int spoken_emoji_1F5E1=0x7f0e0526;
    /**
     * Spoken description for Unicode code point U+1F5E3: "🗣" SPEAKING HEAD IN SILHOUETTE
     */
    public static final int spoken_emoji_1F5E3=0x7f0e0527;
    /**
     * Spoken description for Unicode code point U+1F5EF: "🗯" RIGHT ANGER BUBBLE
     */
    public static final int spoken_emoji_1F5EF=0x7f0e0528;
    /**
     * Spoken description for Unicode code point U+1F5F3: "🗳" BALLOT BOX WITH BALLOT
     */
    public static final int spoken_emoji_1F5F3=0x7f0e0529;
    /**
     * Spoken description for Unicode code point U+1F5FA: "🗺" WORLD MAP
     */
    public static final int spoken_emoji_1F5FA=0x7f0e052a;
    /**
     * Spoken description for Unicode code point U+1F5FB: "🗻" MOUNT FUJI
     */
    public static final int spoken_emoji_1F5FB=0x7f0e052b;
    /**
     * Spoken description for Unicode code point U+1F5FC: "🗼" TOKYO TOWER
     */
    public static final int spoken_emoji_1F5FC=0x7f0e052c;
    /**
     * Spoken description for Unicode code point U+1F5FD: "🗽" STATUE OF LIBERTY
     */
    public static final int spoken_emoji_1F5FD=0x7f0e052d;
    /**
     * Spoken description for Unicode code point U+1F5FE: "🗾" SILHOUETTE OF JAPAN
     */
    public static final int spoken_emoji_1F5FE=0x7f0e052e;
    /**
     * Spoken description for Unicode code point U+1F5FF: "🗿" MOYAI
     */
    public static final int spoken_emoji_1F5FF=0x7f0e052f;
    /**
     * Spoken description for Unicode code point U+1F600: "😀" GRINNING FACE
     */
    public static final int spoken_emoji_1F600=0x7f0e0530;
    /**
     * Spoken description for Unicode code point U+1F601: "😁" GRINNING FACE WITH SMILING EYES
     */
    public static final int spoken_emoji_1F601=0x7f0e0531;
    /**
     * Spoken description for Unicode code point U+1F602: "😂" FACE WITH TEARS OF JOY
     */
    public static final int spoken_emoji_1F602=0x7f0e0532;
    /**
     * Spoken description for Unicode code point U+1F603: "😃" SMILING FACE WITH OPEN MOUTH
     */
    public static final int spoken_emoji_1F603=0x7f0e0533;
    /**
     * Spoken description for Unicode code point U+1F604: "😄" SMILING FACE WITH OPEN MOUTH AND SMILING EYES
     */
    public static final int spoken_emoji_1F604=0x7f0e0534;
    /**
     * Spoken description for Unicode code point U+1F605: "😅" SMILING FACE WITH OPEN MOUTH AND COLD SWEAT
     */
    public static final int spoken_emoji_1F605=0x7f0e0535;
    /**
     * Spoken description for Unicode code point U+1F606: "😆" SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES
     */
    public static final int spoken_emoji_1F606=0x7f0e0536;
    /**
     * Spoken description for Unicode code point U+1F607: "😇" SMILING FACE WITH HALO
     */
    public static final int spoken_emoji_1F607=0x7f0e0537;
    /**
     * Spoken description for Unicode code point U+1F608: "😈" SMILING FACE WITH HORNS
     */
    public static final int spoken_emoji_1F608=0x7f0e0538;
    /**
     * Spoken description for Unicode code point U+1F609: "😉" WINKING FACE
     */
    public static final int spoken_emoji_1F609=0x7f0e0539;
    /**
     * Spoken description for Unicode code point U+1F60A: "😊" SMILING FACE WITH SMILING EYES
     */
    public static final int spoken_emoji_1F60A=0x7f0e053a;
    /**
     * Spoken description for Unicode code point U+1F60B: "😋" FACE SAVOURING DELICIOUS FOOD
     */
    public static final int spoken_emoji_1F60B=0x7f0e053b;
    /**
     * Spoken description for Unicode code point U+1F60C: "😌" RELIEVED FACE
     */
    public static final int spoken_emoji_1F60C=0x7f0e053c;
    /**
     * Spoken description for Unicode code point U+1F60D: "😍" SMILING FACE WITH HEART-SHAPED EYES
     */
    public static final int spoken_emoji_1F60D=0x7f0e053d;
    /**
     * Spoken description for Unicode code point U+1F60E: "😎" SMILING FACE WITH SUNGLASSES
     */
    public static final int spoken_emoji_1F60E=0x7f0e053e;
    /**
     * Spoken description for Unicode code point U+1F60F: "😏" SMIRKING FACE
     */
    public static final int spoken_emoji_1F60F=0x7f0e053f;
    /**
     * Spoken description for Unicode code point U+1F610: "😐" NEUTRAL FACE
     */
    public static final int spoken_emoji_1F610=0x7f0e0540;
    /**
     * Spoken description for Unicode code point U+1F611: "😑" EXPRESSIONLESS FACE
     */
    public static final int spoken_emoji_1F611=0x7f0e0541;
    /**
     * Spoken description for Unicode code point U+1F612: "😒" UNAMUSED FACE
     */
    public static final int spoken_emoji_1F612=0x7f0e0542;
    /**
     * Spoken description for Unicode code point U+1F613: "😓" FACE WITH COLD SWEAT
     */
    public static final int spoken_emoji_1F613=0x7f0e0543;
    /**
     * Spoken description for Unicode code point U+1F614: "😔" PENSIVE FACE
     */
    public static final int spoken_emoji_1F614=0x7f0e0544;
    /**
     * Spoken description for Unicode code point U+1F615: "😕" CONFUSED FACE
     */
    public static final int spoken_emoji_1F615=0x7f0e0545;
    /**
     * Spoken description for Unicode code point U+1F616: "😖" CONFOUNDED FACE
     */
    public static final int spoken_emoji_1F616=0x7f0e0546;
    /**
     * Spoken description for Unicode code point U+1F617: "😗" KISSING FACE
     */
    public static final int spoken_emoji_1F617=0x7f0e0547;
    /**
     * Spoken description for Unicode code point U+1F618: "😘" FACE THROWING A KISS
     */
    public static final int spoken_emoji_1F618=0x7f0e0548;
    /**
     * Spoken description for Unicode code point U+1F619: "😙" KISSING FACE WITH SMILING EYES
     */
    public static final int spoken_emoji_1F619=0x7f0e0549;
    /**
     * Spoken description for Unicode code point U+1F61A: "😚" KISSING FACE WITH CLOSED EYES
     */
    public static final int spoken_emoji_1F61A=0x7f0e054a;
    /**
     * Spoken description for Unicode code point U+1F61B: "😛" FACE WITH STUCK-OUT TONGUE
     */
    public static final int spoken_emoji_1F61B=0x7f0e054b;
    /**
     * Spoken description for Unicode code point U+1F61C: "😜" FACE WITH STUCK-OUT TONGUE AND WINKING EYE
     */
    public static final int spoken_emoji_1F61C=0x7f0e054c;
    /**
     * Spoken description for Unicode code point U+1F61D: "😝" FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES
     */
    public static final int spoken_emoji_1F61D=0x7f0e054d;
    /**
     * Spoken description for Unicode code point U+1F61E: "😞" DISAPPOINTED FACE
     */
    public static final int spoken_emoji_1F61E=0x7f0e054e;
    /**
     * Spoken description for Unicode code point U+1F61F: "😟" WORRIED FACE
     */
    public static final int spoken_emoji_1F61F=0x7f0e054f;
    /**
     * Spoken description for Unicode code point U+1F620: "😠" ANGRY FACE
     */
    public static final int spoken_emoji_1F620=0x7f0e0550;
    /**
     * Spoken description for Unicode code point U+1F621: "😡" POUTING FACE
     */
    public static final int spoken_emoji_1F621=0x7f0e0551;
    /**
     * Spoken description for Unicode code point U+1F622: "😢" CRYING FACE
     */
    public static final int spoken_emoji_1F622=0x7f0e0552;
    /**
     * Spoken description for Unicode code point U+1F623: "😣" PERSEVERING FACE
     */
    public static final int spoken_emoji_1F623=0x7f0e0553;
    /**
     * Spoken description for Unicode code point U+1F624: "😤" FACE WITH LOOK OF TRIUMPH
     */
    public static final int spoken_emoji_1F624=0x7f0e0554;
    /**
     * Spoken description for Unicode code point U+1F625: "😥" DISAPPOINTED BUT RELIEVED FACE
     */
    public static final int spoken_emoji_1F625=0x7f0e0555;
    /**
     * Spoken description for Unicode code point U+1F626: "😦" FROWNING FACE WITH OPEN MOUTH
     */
    public static final int spoken_emoji_1F626=0x7f0e0556;
    /**
     * Spoken description for Unicode code point U+1F627: "😧" ANGUISHED FACE
     */
    public static final int spoken_emoji_1F627=0x7f0e0557;
    /**
     * Spoken description for Unicode code point U+1F628: "😨" FEARFUL FACE
     */
    public static final int spoken_emoji_1F628=0x7f0e0558;
    /**
     * Spoken description for Unicode code point U+1F629: "😩" WEARY FACE
     */
    public static final int spoken_emoji_1F629=0x7f0e0559;
    /**
     * Spoken description for Unicode code point U+1F62A: "😪" SLEEPY FACE
     */
    public static final int spoken_emoji_1F62A=0x7f0e055a;
    /**
     * Spoken description for Unicode code point U+1F62B: "😫" TIRED FACE
     */
    public static final int spoken_emoji_1F62B=0x7f0e055b;
    /**
     * Spoken description for Unicode code point U+1F62C: "😬" GRIMACING FACE
     */
    public static final int spoken_emoji_1F62C=0x7f0e055c;
    /**
     * Spoken description for Unicode code point U+1F62D: "😭" LOUDLY CRYING FACE
     */
    public static final int spoken_emoji_1F62D=0x7f0e055d;
    /**
     * Spoken description for Unicode code point U+1F62E: "😮" FACE WITH OPEN MOUTH
     */
    public static final int spoken_emoji_1F62E=0x7f0e055e;
    /**
     * Spoken description for Unicode code point U+1F62F: "😯" HUSHED FACE
     */
    public static final int spoken_emoji_1F62F=0x7f0e055f;
    /**
     * Spoken description for Unicode code point U+1F630: "😰" FACE WITH OPEN MOUTH AND COLD SWEAT
     */
    public static final int spoken_emoji_1F630=0x7f0e0560;
    /**
     * Spoken description for Unicode code point U+1F631: "😱" FACE SCREAMING IN FEAR
     */
    public static final int spoken_emoji_1F631=0x7f0e0561;
    /**
     * Spoken description for Unicode code point U+1F632: "😲" ASTONISHED FACE
     */
    public static final int spoken_emoji_1F632=0x7f0e0562;
    /**
     * Spoken description for Unicode code point U+1F633: "😳" FLUSHED FACE
     */
    public static final int spoken_emoji_1F633=0x7f0e0563;
    /**
     * Spoken description for Unicode code point U+1F634: "😴" SLEEPING FACE
     */
    public static final int spoken_emoji_1F634=0x7f0e0564;
    /**
     * Spoken description for Unicode code point U+1F635: "😵" DIZZY FACE
     */
    public static final int spoken_emoji_1F635=0x7f0e0565;
    /**
     * Spoken description for Unicode code point U+1F636: "😶" FACE WITHOUT MOUTH
     */
    public static final int spoken_emoji_1F636=0x7f0e0566;
    /**
     * Spoken description for Unicode code point U+1F637: "😷" FACE WITH MEDICAL MASK
     */
    public static final int spoken_emoji_1F637=0x7f0e0567;
    /**
     * Spoken description for Unicode code point U+1F638: "😸" GRINNING CAT FACE WITH SMILING EYES
     */
    public static final int spoken_emoji_1F638=0x7f0e0568;
    /**
     * Spoken description for Unicode code point U+1F639: "😹" CAT FACE WITH TEARS OF JOY
     */
    public static final int spoken_emoji_1F639=0x7f0e0569;
    /**
     * Spoken description for Unicode code point U+1F63A: "😺" SMILING CAT FACE WITH OPEN MOUTH
     */
    public static final int spoken_emoji_1F63A=0x7f0e056a;
    /**
     * Spoken description for Unicode code point U+1F63B: "😻" SMILING CAT FACE WITH HEART-SHAPED EYES
     */
    public static final int spoken_emoji_1F63B=0x7f0e056b;
    /**
     * Spoken description for Unicode code point U+1F63C: "😼" CAT FACE WITH WRY SMILE
     */
    public static final int spoken_emoji_1F63C=0x7f0e056c;
    /**
     * Spoken description for Unicode code point U+1F63D: "😽" KISSING CAT FACE WITH CLOSED EYES
     */
    public static final int spoken_emoji_1F63D=0x7f0e056d;
    /**
     * Spoken description for Unicode code point U+1F63E: "😾" POUTING CAT FACE
     */
    public static final int spoken_emoji_1F63E=0x7f0e056e;
    /**
     * Spoken description for Unicode code point U+1F63F: "😿" CRYING CAT FACE
     */
    public static final int spoken_emoji_1F63F=0x7f0e056f;
    /**
     * Spoken description for Unicode code point U+1F640: "🙀" WEARY CAT FACE
     */
    public static final int spoken_emoji_1F640=0x7f0e0570;
    /**
     * Spoken description for Unicode code point U+1F641: "🙁" SLIGHTLY FROWNING FACE
     */
    public static final int spoken_emoji_1F641=0x7f0e0571;
    /**
     * Spoken description for Unicode code point U+1F642: "🙂" SLIGHTLY SMILING FACE
     */
    public static final int spoken_emoji_1F642=0x7f0e0572;
    /**
     * Spoken description for Unicode code point U+1F643: "🙃" UPSIDE-DOWN FACE
     */
    public static final int spoken_emoji_1F643=0x7f0e0573;
    /**
     * Spoken description for Unicode code point U+1F644: "🙄" FACE WITH ROLLING EYES
     */
    public static final int spoken_emoji_1F644=0x7f0e0574;
    /**
     * Spoken description for Unicode code point U+1F645: "🙅" FACE WITH NO GOOD GESTURE
     */
    public static final int spoken_emoji_1F645=0x7f0e0575;
    /**
     * Spoken description for Unicode code point U+1F646: "🙆" FACE WITH OK GESTURE
     */
    public static final int spoken_emoji_1F646=0x7f0e0576;
    /**
     * Spoken description for Unicode code point U+1F647: "🙇" PERSON BOWING DEEPLY
     */
    public static final int spoken_emoji_1F647=0x7f0e0577;
    /**
     * Spoken description for Unicode code point U+1F648: "🙈" SEE-NO-EVIL MONKEY
     */
    public static final int spoken_emoji_1F648=0x7f0e0578;
    /**
     * Spoken description for Unicode code point U+1F649: "🙉" HEAR-NO-EVIL MONKEY
     */
    public static final int spoken_emoji_1F649=0x7f0e0579;
    /**
     * Spoken description for Unicode code point U+1F64A: "🙊" SPEAK-NO-EVIL MONKEY
     */
    public static final int spoken_emoji_1F64A=0x7f0e057a;
    /**
     * Spoken description for Unicode code point U+1F64B: "🙋" HAPPY PERSON RAISING ONE HAND
     */
    public static final int spoken_emoji_1F64B=0x7f0e057b;
    /**
     * Spoken description for Unicode code point U+1F64C: "🙌" PERSON RAISING BOTH HANDS IN CELEBRATION
     */
    public static final int spoken_emoji_1F64C=0x7f0e057c;
    /**
     * Spoken description for Unicode code point U+1F64D: "🙍" PERSON FROWNING
     */
    public static final int spoken_emoji_1F64D=0x7f0e057d;
    /**
     * Spoken description for Unicode code point U+1F64E: "🙎" PERSON WITH POUTING FACE
     */
    public static final int spoken_emoji_1F64E=0x7f0e057e;
    /**
     * Spoken description for Unicode code point U+1F64F: "🙏" PERSON WITH FOLDED HANDS
     */
    public static final int spoken_emoji_1F64F=0x7f0e057f;
    /**
     * Spoken description for Unicode code point U+1F680: "🚀" ROCKET
     */
    public static final int spoken_emoji_1F680=0x7f0e0580;
    /**
     * Spoken description for Unicode code point U+1F681: "🚁" HELICOPTER
     */
    public static final int spoken_emoji_1F681=0x7f0e0581;
    /**
     * Spoken description for Unicode code point U+1F682: "🚂" STEAM LOCOMOTIVE
     */
    public static final int spoken_emoji_1F682=0x7f0e0582;
    /**
     * Spoken description for Unicode code point U+1F683: "🚃" RAILWAY CAR
     */
    public static final int spoken_emoji_1F683=0x7f0e0583;
    /**
     * Spoken description for Unicode code point U+1F684: "🚄" HIGH-SPEED TRAIN
     */
    public static final int spoken_emoji_1F684=0x7f0e0584;
    /**
     * Spoken description for Unicode code point U+1F685: "🚅" HIGH-SPEED TRAIN WITH BULLET NOSE
     */
    public static final int spoken_emoji_1F685=0x7f0e0585;
    /**
     * Spoken description for Unicode code point U+1F686: "🚆" TRAIN
     */
    public static final int spoken_emoji_1F686=0x7f0e0586;
    /**
     * Spoken description for Unicode code point U+1F687: "🚇" METRO
     */
    public static final int spoken_emoji_1F687=0x7f0e0587;
    /**
     * Spoken description for Unicode code point U+1F688: "🚈" LIGHT RAIL
     */
    public static final int spoken_emoji_1F688=0x7f0e0588;
    /**
     * Spoken description for Unicode code point U+1F689: "🚉" STATION
     */
    public static final int spoken_emoji_1F689=0x7f0e0589;
    /**
     * Spoken description for Unicode code point U+1F68A: "🚊" TRAM
     */
    public static final int spoken_emoji_1F68A=0x7f0e058a;
    /**
     * Spoken description for Unicode code point U+1F68B: "🚋" TRAM CAR
     */
    public static final int spoken_emoji_1F68B=0x7f0e058b;
    /**
     * Spoken description for Unicode code point U+1F68C: "🚌" BUS
     */
    public static final int spoken_emoji_1F68C=0x7f0e058c;
    /**
     * Spoken description for Unicode code point U+1F68D: "🚍" ONCOMING BUS
     */
    public static final int spoken_emoji_1F68D=0x7f0e058d;
    /**
     * Spoken description for Unicode code point U+1F68E: "🚎" TROLLEYBUS
     */
    public static final int spoken_emoji_1F68E=0x7f0e058e;
    /**
     * Spoken description for Unicode code point U+1F68F: "🚏" BUS STOP
     */
    public static final int spoken_emoji_1F68F=0x7f0e058f;
    /**
     * Spoken description for Unicode code point U+1F690: "🚐" MINIBUS
     */
    public static final int spoken_emoji_1F690=0x7f0e0590;
    /**
     * Spoken description for Unicode code point U+1F691: "🚑" AMBULANCE
     */
    public static final int spoken_emoji_1F691=0x7f0e0591;
    /**
     * Spoken description for Unicode code point U+1F692: "🚒" FIRE ENGINE
     */
    public static final int spoken_emoji_1F692=0x7f0e0592;
    /**
     * Spoken description for Unicode code point U+1F693: "🚓" POLICE CAR
     */
    public static final int spoken_emoji_1F693=0x7f0e0593;
    /**
     * Spoken description for Unicode code point U+1F694: "🚔" ONCOMING POLICE CAR
     */
    public static final int spoken_emoji_1F694=0x7f0e0594;
    /**
     * Spoken description for Unicode code point U+1F695: "🚕" TAXI
     */
    public static final int spoken_emoji_1F695=0x7f0e0595;
    /**
     * Spoken description for Unicode code point U+1F696: "🚖" ONCOMING TAXI
     */
    public static final int spoken_emoji_1F696=0x7f0e0596;
    /**
     * Spoken description for Unicode code point U+1F697: "🚗" AUTOMOBILE
     */
    public static final int spoken_emoji_1F697=0x7f0e0597;
    /**
     * Spoken description for Unicode code point U+1F698: "🚘" ONCOMING AUTOMOBILE
     */
    public static final int spoken_emoji_1F698=0x7f0e0598;
    /**
     * Spoken description for Unicode code point U+1F699: "🚙" RECREATIONAL VEHICLE
     */
    public static final int spoken_emoji_1F699=0x7f0e0599;
    /**
     * Spoken description for Unicode code point U+1F69A: "🚚" DELIVERY TRUCK
     */
    public static final int spoken_emoji_1F69A=0x7f0e059a;
    /**
     * Spoken description for Unicode code point U+1F69B: "🚛" ARTICULATED LORRY
     */
    public static final int spoken_emoji_1F69B=0x7f0e059b;
    /**
     * Spoken description for Unicode code point U+1F69C: "🚜" TRACTOR
     */
    public static final int spoken_emoji_1F69C=0x7f0e059c;
    /**
     * Spoken description for Unicode code point U+1F69D: "🚝" MONORAIL
     */
    public static final int spoken_emoji_1F69D=0x7f0e059d;
    /**
     * Spoken description for Unicode code point U+1F69E: "🚞" MOUNTAIN RAILWAY
     */
    public static final int spoken_emoji_1F69E=0x7f0e059e;
    /**
     * Spoken description for Unicode code point U+1F69F: "🚟" SUSPENSION RAILWAY
     */
    public static final int spoken_emoji_1F69F=0x7f0e059f;
    /**
     * Spoken description for Unicode code point U+1F6A0: "🚠" MOUNTAIN CABLEWAY
     */
    public static final int spoken_emoji_1F6A0=0x7f0e05a0;
    /**
     * Spoken description for Unicode code point U+1F6A1: "🚡" AERIAL TRAMWAY
     */
    public static final int spoken_emoji_1F6A1=0x7f0e05a1;
    /**
     * Spoken description for Unicode code point U+1F6A2: "🚢" SHIP
     */
    public static final int spoken_emoji_1F6A2=0x7f0e05a2;
    /**
     * Spoken description for Unicode code point U+1F6A3: "🚣" ROWBOAT
     */
    public static final int spoken_emoji_1F6A3=0x7f0e05a3;
    /**
     * Spoken description for Unicode code point U+1F6A4: "🚤" SPEEDBOAT
     */
    public static final int spoken_emoji_1F6A4=0x7f0e05a4;
    /**
     * Spoken description for Unicode code point U+1F6A5: "🚥" HORIZONTAL TRAFFIC LIGHT
     */
    public static final int spoken_emoji_1F6A5=0x7f0e05a5;
    /**
     * Spoken description for Unicode code point U+1F6A6: "🚦" VERTICAL TRAFFIC LIGHT
     */
    public static final int spoken_emoji_1F6A6=0x7f0e05a6;
    /**
     * Spoken description for Unicode code point U+1F6A7: "🚧" CONSTRUCTION SIGN
     */
    public static final int spoken_emoji_1F6A7=0x7f0e05a7;
    /**
     * Spoken description for Unicode code point U+1F6A8: "🚨" POLICE CARS REVOLVING LIGHT
     */
    public static final int spoken_emoji_1F6A8=0x7f0e05a8;
    /**
     * Spoken description for Unicode code point U+1F6A9: "🚩" TRIANGULAR FLAG ON POST
     */
    public static final int spoken_emoji_1F6A9=0x7f0e05a9;
    /**
     * Spoken description for Unicode code point U+1F6AA: "🚪" DOOR
     */
    public static final int spoken_emoji_1F6AA=0x7f0e05aa;
    /**
     * Spoken description for Unicode code point U+1F6AB: "🚫" NO ENTRY SIGN
     */
    public static final int spoken_emoji_1F6AB=0x7f0e05ab;
    /**
     * Spoken description for Unicode code point U+1F6AC: "🚬" SMOKING SYMBOL
     */
    public static final int spoken_emoji_1F6AC=0x7f0e05ac;
    /**
     * Spoken description for Unicode code point U+1F6AD: "🚭" NO SMOKING SYMBOL
     */
    public static final int spoken_emoji_1F6AD=0x7f0e05ad;
    /**
     * Spoken description for Unicode code point U+1F6AE: "🚮" PUT LITTER IN ITS PLACE SYMBOL
     */
    public static final int spoken_emoji_1F6AE=0x7f0e05ae;
    /**
     * Spoken description for Unicode code point U+1F6AF: "🚯" DO NOT LITTER SYMBOL
     */
    public static final int spoken_emoji_1F6AF=0x7f0e05af;
    /**
     * Spoken description for Unicode code point U+1F6B0: "🚰" POTABLE WATER SYMBOL
     */
    public static final int spoken_emoji_1F6B0=0x7f0e05b0;
    /**
     * Spoken description for Unicode code point U+1F6B1: "🚱" NON-POTABLE WATER SYMBOL
     */
    public static final int spoken_emoji_1F6B1=0x7f0e05b1;
    /**
     * Spoken description for Unicode code point U+1F6B2: "🚲" BICYCLE
     */
    public static final int spoken_emoji_1F6B2=0x7f0e05b2;
    /**
     * Spoken description for Unicode code point U+1F6B3: "🚳" NO BICYCLES
     */
    public static final int spoken_emoji_1F6B3=0x7f0e05b3;
    /**
     * Spoken description for Unicode code point U+1F6B4: "🚴" BICYCLIST
     */
    public static final int spoken_emoji_1F6B4=0x7f0e05b4;
    /**
     * Spoken description for Unicode code point U+1F6B5: "🚵" MOUNTAIN BICYCLIST
     */
    public static final int spoken_emoji_1F6B5=0x7f0e05b5;
    /**
     * Spoken description for Unicode code point U+1F6B6: "🚶" PEDESTRIAN
     */
    public static final int spoken_emoji_1F6B6=0x7f0e05b6;
    /**
     * Spoken description for Unicode code point U+1F6B7: "🚷" NO PEDESTRIANS
     */
    public static final int spoken_emoji_1F6B7=0x7f0e05b7;
    /**
     * Spoken description for Unicode code point U+1F6B8: "🚸" CHILDREN CROSSING
     */
    public static final int spoken_emoji_1F6B8=0x7f0e05b8;
    /**
     * Spoken description for Unicode code point U+1F6B9: "🚹" MENS SYMBOL
     */
    public static final int spoken_emoji_1F6B9=0x7f0e05b9;
    /**
     * Spoken description for Unicode code point U+1F6BA: "🚺" WOMENS SYMBOL
     */
    public static final int spoken_emoji_1F6BA=0x7f0e05ba;
    /**
     * Spoken description for Unicode code point U+1F6BB: "🚻" RESTROOM
     */
    public static final int spoken_emoji_1F6BB=0x7f0e05bb;
    /**
     * Spoken description for Unicode code point U+1F6BC: "🚼" BABY SYMBOL
     */
    public static final int spoken_emoji_1F6BC=0x7f0e05bc;
    /**
     * Spoken description for Unicode code point U+1F6BD: "🚽" TOILET
     */
    public static final int spoken_emoji_1F6BD=0x7f0e05bd;
    /**
     * Spoken description for Unicode code point U+1F6BE: "🚾" WATER CLOSET
     */
    public static final int spoken_emoji_1F6BE=0x7f0e05be;
    /**
     * Spoken description for Unicode code point U+1F6BF: "🚿" SHOWER
     */
    public static final int spoken_emoji_1F6BF=0x7f0e05bf;
    /**
     * Spoken description for Unicode code point U+1F6C0: "🛀" BATH
     */
    public static final int spoken_emoji_1F6C0=0x7f0e05c0;
    /**
     * Spoken description for Unicode code point U+1F6C1: "🛁" BATHTUB
     */
    public static final int spoken_emoji_1F6C1=0x7f0e05c1;
    /**
     * Spoken description for Unicode code point U+1F6C2: "🛂" PASSPORT CONTROL
     */
    public static final int spoken_emoji_1F6C2=0x7f0e05c2;
    /**
     * Spoken description for Unicode code point U+1F6C3: "🛃" CUSTOMS
     */
    public static final int spoken_emoji_1F6C3=0x7f0e05c3;
    /**
     * Spoken description for Unicode code point U+1F6C4: "🛄" BAGGAGE CLAIM
     */
    public static final int spoken_emoji_1F6C4=0x7f0e05c4;
    /**
     * Spoken description for Unicode code point U+1F6C5: "🛅" LEFT LUGGAGE
     */
    public static final int spoken_emoji_1F6C5=0x7f0e05c5;
    /**
     * Spoken description for Unicode code point U+1F6CB: "🛋" COUCH AND LAMP
     */
    public static final int spoken_emoji_1F6CB=0x7f0e05c6;
    /**
     * Spoken description for Unicode code point U+1F6CC: "🛌" SLEEPING ACCOMMODATION
     */
    public static final int spoken_emoji_1F6CC=0x7f0e05c7;
    /**
     * Spoken description for Unicode code point U+1F6CD: "🛍" SHOPPING BAGS
     */
    public static final int spoken_emoji_1F6CD=0x7f0e05c8;
    /**
     * Spoken description for Unicode code point U+1F6CE: "🛎" BELLHOP BELL
     */
    public static final int spoken_emoji_1F6CE=0x7f0e05c9;
    /**
     * Spoken description for Unicode code point U+1F6CF: "🛏" BED
     */
    public static final int spoken_emoji_1F6CF=0x7f0e05ca;
    /**
     * Spoken description for Unicode code point U+1F6D0: "🛐" PLACE OF WORSHIP
     */
    public static final int spoken_emoji_1F6D0=0x7f0e05cb;
    /**
     * Spoken description for Unicode code point U+1F6E0: "🛠" HAMMER AND WRENCH
     */
    public static final int spoken_emoji_1F6E0=0x7f0e05cc;
    /**
     * Spoken description for Unicode code point U+1F6E1: "🛡" SHIELD
     */
    public static final int spoken_emoji_1F6E1=0x7f0e05cd;
    /**
     * Spoken description for Unicode code point U+1F6E2: "🛢" OIL DRUM
     */
    public static final int spoken_emoji_1F6E2=0x7f0e05ce;
    /**
     * Spoken description for Unicode code point U+1F6E3: "🛣" MOTORWAY
     */
    public static final int spoken_emoji_1F6E3=0x7f0e05cf;
    /**
     * Spoken description for Unicode code point U+1F6E4: "🛤" RAILWAY TRACK
     */
    public static final int spoken_emoji_1F6E4=0x7f0e05d0;
    /**
     * Spoken description for Unicode code point U+1F6E5: "🛥" MOTOR BOAT
     */
    public static final int spoken_emoji_1F6E5=0x7f0e05d1;
    /**
     * Spoken description for Unicode code point U+1F6E9: "🛩" SMALL AIRPLANE
     */
    public static final int spoken_emoji_1F6E9=0x7f0e05d2;
    /**
     * Spoken description for Unicode code point U+1F6EB: "🛫" AIRPLANE DEPARTURE
     */
    public static final int spoken_emoji_1F6EB=0x7f0e05d3;
    /**
     * Spoken description for Unicode code point U+1F6EC: "🛬" AIRPLANE ARRIVING
     */
    public static final int spoken_emoji_1F6EC=0x7f0e05d4;
    /**
     * Spoken description for Unicode code point U+1F6F0: "🛰" SATELLITE
     */
    public static final int spoken_emoji_1F6F0=0x7f0e05d5;
    /**
     * Spoken description for Unicode code point U+1F6F3: "🛳" PASSENGER SHIP
     */
    public static final int spoken_emoji_1F6F3=0x7f0e05d6;
    /**
     * Spoken description for Unicode code point U+1F910: "🤐" ZIPPER-MOUTH FACE
     */
    public static final int spoken_emoji_1F910=0x7f0e05d7;
    /**
     * Spoken description for Unicode code point U+1F911: "🤑" MONEY-MOUTH FACE
     */
    public static final int spoken_emoji_1F911=0x7f0e05d8;
    /**
     * Spoken description for Unicode code point U+1F912: "🤒" FACE WITH THERMOMETER
     */
    public static final int spoken_emoji_1F912=0x7f0e05d9;
    /**
     * Spoken description for Unicode code point U+1F913: "🤓" NERD FACE
     */
    public static final int spoken_emoji_1F913=0x7f0e05da;
    /**
     * Spoken description for Unicode code point U+1F914: "🤔" THINKING FACE
     */
    public static final int spoken_emoji_1F914=0x7f0e05db;
    /**
     * Spoken description for Unicode code point U+1F915: "🤕" FACE WITH HEAD-BANDAGE
     */
    public static final int spoken_emoji_1F915=0x7f0e05dc;
    /**
     * Spoken description for Unicode code point U+1F916: "🤖" ROBOT FACE
     */
    public static final int spoken_emoji_1F916=0x7f0e05dd;
    /**
     * Spoken description for Unicode code point U+1F917: "🤗" HUGGING FACE
     */
    public static final int spoken_emoji_1F917=0x7f0e05de;
    /**
     * Spoken description for Unicode code point U+1F918: "🤘" SIGN OF THE HORNS
     */
    public static final int spoken_emoji_1F918=0x7f0e05df;
    /**
     * Spoken description for Unicode code point U+1F980: "🦀" CRAB
     */
    public static final int spoken_emoji_1F980=0x7f0e05e0;
    /**
     * Spoken description for Unicode code point U+1F981: "🦁" LION FACE
     */
    public static final int spoken_emoji_1F981=0x7f0e05e1;
    /**
     * Spoken description for Unicode code point U+1F982: "🦂" SCORPION
     */
    public static final int spoken_emoji_1F982=0x7f0e05e2;
    /**
     * Spoken description for Unicode code point U+1F983: "🦃" TURKEY
     */
    public static final int spoken_emoji_1F983=0x7f0e05e3;
    /**
     * Spoken description for Unicode code point U+1F984: "🦄" UNICORN FACE
     */
    public static final int spoken_emoji_1F984=0x7f0e05e4;
    /**
     * Spoken description for Unicode code point U+1F9C0: "🧀" CHEESE WEDGE
     */
    public static final int spoken_emoji_1F9C0=0x7f0e05e5;
    /**
     * Spoken description for Unicode code point U+203C: "‼" DOUBLE EXCLAMATION MARK
     */
    public static final int spoken_emoji_203C=0x7f0e05e6;
    /**
     * Spoken description for Unicode code point U+2049: "⁉" EXCLAMATION QUESTION MARK
     */
    public static final int spoken_emoji_2049=0x7f0e05e7;
    /**
     * Spoken description for Unicode code point U+2122: "™" TRADE MARK SIGN
     */
    public static final int spoken_emoji_2122=0x7f0e05e8;
    /**
     * Spoken description for Unicode code point U+2139: "ℹ" INFORMATION SOURCE
     */
    public static final int spoken_emoji_2139=0x7f0e05e9;
    /**
     * Spoken description for Unicode code point U+2194: "↔" LEFT RIGHT ARROW
     */
    public static final int spoken_emoji_2194=0x7f0e05ea;
    /**
     * Spoken description for Unicode code point U+2195: "↕" UP DOWN ARROW
     */
    public static final int spoken_emoji_2195=0x7f0e05eb;
    /**
     * Spoken description for Unicode code point U+2196: "↖" NORTH WEST ARROW
     */
    public static final int spoken_emoji_2196=0x7f0e05ec;
    /**
     * Spoken description for Unicode code point U+2197: "↗" NORTH EAST ARROW
     */
    public static final int spoken_emoji_2197=0x7f0e05ed;
    /**
     * Spoken description for Unicode code point U+2198: "↘" SOUTH EAST ARROW
     */
    public static final int spoken_emoji_2198=0x7f0e05ee;
    /**
     * Spoken description for Unicode code point U+2199: "↙" SOUTH WEST ARROW
     */
    public static final int spoken_emoji_2199=0x7f0e05ef;
    /**
     * Spoken description for Unicode code point U+21A9: "↩" LEFTWARDS ARROW WITH HOOK
     */
    public static final int spoken_emoji_21A9=0x7f0e05f0;
    /**
     * Spoken description for Unicode code point U+21AA: "↪" RIGHTWARDS ARROW WITH HOOK
     */
    public static final int spoken_emoji_21AA=0x7f0e05f1;
    /**
     * Spoken description for Unicode code point U+231A: "⌚" WATCH
     */
    public static final int spoken_emoji_231A=0x7f0e05f2;
    /**
     * Spoken description for Unicode code point U+231B: "⌛" HOURGLASS
     */
    public static final int spoken_emoji_231B=0x7f0e05f3;
    /**
     * Spoken description for Unicode code point U+2328: "⌨" KEYBOARD
     */
    public static final int spoken_emoji_2328=0x7f0e05f4;
    /**
     * Spoken description for Unicode code point U+23CF: "⏏" EJECT SYMBOL
     */
    public static final int spoken_emoji_23CF=0x7f0e05f5;
    /**
     * Spoken description for Unicode code point U+23E9: "⏩" BLACK RIGHT-POINTING DOUBLE TRIANGLE
     */
    public static final int spoken_emoji_23E9=0x7f0e05f6;
    /**
     * Spoken description for Unicode code point U+23EA: "⏪" BLACK LEFT-POINTING DOUBLE TRIANGLE
     */
    public static final int spoken_emoji_23EA=0x7f0e05f7;
    /**
     * Spoken description for Unicode code point U+23EB: "⏫" BLACK UP-POINTING DOUBLE TRIANGLE
     */
    public static final int spoken_emoji_23EB=0x7f0e05f8;
    /**
     * Spoken description for Unicode code point U+23EC: "⏬" BLACK DOWN-POINTING DOUBLE TRIANGLE
     */
    public static final int spoken_emoji_23EC=0x7f0e05f9;
    /**
     * Spoken description for Unicode code point U+23ED: "⏭" BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR
     */
    public static final int spoken_emoji_23ED=0x7f0e05fa;
    /**
     * Spoken description for Unicode code point U+23EE: "⏮" BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR
     */
    public static final int spoken_emoji_23EE=0x7f0e05fb;
    /**
     * Spoken description for Unicode code point U+23EF: "⏯" BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR
     */
    public static final int spoken_emoji_23EF=0x7f0e05fc;
    /**
     * Spoken description for Unicode code point U+23F0: "⏰" ALARM CLOCK
     */
    public static final int spoken_emoji_23F0=0x7f0e05fd;
    /**
     * Spoken description for Unicode code point U+23F1: "⏱" STOPWATCH
     */
    public static final int spoken_emoji_23F1=0x7f0e05fe;
    /**
     * Spoken description for Unicode code point U+23F2: "⏲" TIMER CLOCK
     */
    public static final int spoken_emoji_23F2=0x7f0e05ff;
    /**
     * Spoken description for Unicode code point U+23F3: "⏳" HOURGLASS WITH FLOWING SAND
     */
    public static final int spoken_emoji_23F3=0x7f0e0600;
    /**
     * Spoken description for Unicode code point U+23F8: "⏸" DOUBLE VERTICAL BAR
     */
    public static final int spoken_emoji_23F8=0x7f0e0601;
    /**
     * Spoken description for Unicode code point U+23F9: "⏹" BLACK SQUARE FOR STOP
     */
    public static final int spoken_emoji_23F9=0x7f0e0602;
    /**
     * Spoken description for Unicode code point U+23FA: "⏺" BLACK CIRCLE FOR RECORD
     */
    public static final int spoken_emoji_23FA=0x7f0e0603;
    /**
     * Spoken description for Unicode code point U+24C2: "Ⓜ" CIRCLED LATIN CAPITAL LETTER M
     */
    public static final int spoken_emoji_24C2=0x7f0e0604;
    /**
     * Spoken description for Unicode code point U+25AA: "▪" BLACK SMALL SQUARE
     */
    public static final int spoken_emoji_25AA=0x7f0e0605;
    /**
     * Spoken description for Unicode code point U+25AB: "▫" WHITE SMALL SQUARE
     */
    public static final int spoken_emoji_25AB=0x7f0e0606;
    /**
     * Spoken description for Unicode code point U+25B6: "▶" BLACK RIGHT-POINTING TRIANGLE
     */
    public static final int spoken_emoji_25B6=0x7f0e0607;
    /**
     * Spoken description for Unicode code point U+25C0: "◀" BLACK LEFT-POINTING TRIANGLE
     */
    public static final int spoken_emoji_25C0=0x7f0e0608;
    /**
     * Spoken description for Unicode code point U+25FB: "◻" WHITE MEDIUM SQUARE
     */
    public static final int spoken_emoji_25FB=0x7f0e0609;
    /**
     * Spoken description for Unicode code point U+25FC: "◼" BLACK MEDIUM SQUARE
     */
    public static final int spoken_emoji_25FC=0x7f0e060a;
    /**
     * Spoken description for Unicode code point U+25FD: "◽" WHITE MEDIUM SMALL SQUARE
     */
    public static final int spoken_emoji_25FD=0x7f0e060b;
    /**
     * Spoken description for Unicode code point U+25FE: "◾" BLACK MEDIUM SMALL SQUARE
     */
    public static final int spoken_emoji_25FE=0x7f0e060c;
    /**
     * Spoken description for Unicode code point U+2600: "☀" BLACK SUN WITH RAYS
     */
    public static final int spoken_emoji_2600=0x7f0e060d;
    /**
     * Spoken description for Unicode code point U+2601: "☁" CLOUD
     */
    public static final int spoken_emoji_2601=0x7f0e060e;
    /**
     * Spoken description for Unicode code point U+2602: "☂" UMBRELLA
     */
    public static final int spoken_emoji_2602=0x7f0e060f;
    /**
     * Spoken description for Unicode code point U+2603: "☃" SNOWMAN
     */
    public static final int spoken_emoji_2603=0x7f0e0610;
    /**
     * Spoken description for Unicode code point U+2604: "☄" COMET
     */
    public static final int spoken_emoji_2604=0x7f0e0611;
    /**
     * Spoken description for Unicode code point U+260E: "☎" BLACK TELEPHONE
     */
    public static final int spoken_emoji_260E=0x7f0e0612;
    /**
     * Spoken description for Unicode code point U+2611: "☑" BALLOT BOX WITH CHECK
     */
    public static final int spoken_emoji_2611=0x7f0e0613;
    /**
     * Spoken description for Unicode code point U+2614: "☔" UMBRELLA WITH RAIN DROPS
     */
    public static final int spoken_emoji_2614=0x7f0e0614;
    /**
     * Spoken description for Unicode code point U+2615: "☕" HOT BEVERAGE
     */
    public static final int spoken_emoji_2615=0x7f0e0615;
    /**
     * Spoken description for Unicode code point U+2618: "☘" SHAMROCK
     */
    public static final int spoken_emoji_2618=0x7f0e0616;
    /**
     * Spoken description for Unicode code point U+261D: "☝" WHITE UP POINTING INDEX
     */
    public static final int spoken_emoji_261D=0x7f0e0617;
    /**
     * Spoken description for Unicode code point U+2620: "☠" SKULL AND CROSSBONES
     */
    public static final int spoken_emoji_2620=0x7f0e0618;
    /**
     * Spoken description for Unicode code point U+2622: "☢" RADIOACTIVE SIGN
     */
    public static final int spoken_emoji_2622=0x7f0e0619;
    /**
     * Spoken description for Unicode code point U+2623: "☣" BIOHAZARD SIGN
     */
    public static final int spoken_emoji_2623=0x7f0e061a;
    /**
     * Spoken description for Unicode code point U+2626: "☦" ORTHODOX CROSS
     */
    public static final int spoken_emoji_2626=0x7f0e061b;
    /**
     * Spoken description for Unicode code point U+262A: "☪" STAR AND CRESCENT
     */
    public static final int spoken_emoji_262A=0x7f0e061c;
    /**
     * Spoken description for Unicode code point U+262E: "☮" PEACE SYMBOL
     */
    public static final int spoken_emoji_262E=0x7f0e061d;
    /**
     * Spoken description for Unicode code point U+262F: "☯" YIN YANG
     */
    public static final int spoken_emoji_262F=0x7f0e061e;
    /**
     * Spoken description for Unicode code point U+2638: "☸" WHEEL OF DHARMA
     */
    public static final int spoken_emoji_2638=0x7f0e061f;
    /**
     * Spoken description for Unicode code point U+2639: "☹" WHITE FROWNING FACE
     */
    public static final int spoken_emoji_2639=0x7f0e0620;
    /**
     * Spoken description for Unicode code point U+263A: "☺" WHITE SMILING FACE
     */
    public static final int spoken_emoji_263A=0x7f0e0621;
    /**
     * Spoken description for Unicode code point U+2648: "♈" ARIES
     */
    public static final int spoken_emoji_2648=0x7f0e0622;
    /**
     * Spoken description for Unicode code point U+2649: "♉" TAURUS
     */
    public static final int spoken_emoji_2649=0x7f0e0623;
    /**
     * Spoken description for Unicode code point U+264A: "♊" GEMINI
     */
    public static final int spoken_emoji_264A=0x7f0e0624;
    /**
     * Spoken description for Unicode code point U+264B: "♋" CANCER
     */
    public static final int spoken_emoji_264B=0x7f0e0625;
    /**
     * Spoken description for Unicode code point U+264C: "♌" LEO
     */
    public static final int spoken_emoji_264C=0x7f0e0626;
    /**
     * Spoken description for Unicode code point U+264D: "♍" VIRGO
     */
    public static final int spoken_emoji_264D=0x7f0e0627;
    /**
     * Spoken description for Unicode code point U+264E: "♎" LIBRA
     */
    public static final int spoken_emoji_264E=0x7f0e0628;
    /**
     * Spoken description for Unicode code point U+264F: "♏" SCORPIUS
     */
    public static final int spoken_emoji_264F=0x7f0e0629;
    /**
     * Spoken description for Unicode code point U+2650: "♐" SAGITTARIUS
     */
    public static final int spoken_emoji_2650=0x7f0e062a;
    /**
     * Spoken description for Unicode code point U+2651: "♑" CAPRICORN
     */
    public static final int spoken_emoji_2651=0x7f0e062b;
    /**
     * Spoken description for Unicode code point U+2652: "♒" AQUARIUS
     */
    public static final int spoken_emoji_2652=0x7f0e062c;
    /**
     * Spoken description for Unicode code point U+2653: "♓" PISCES
     */
    public static final int spoken_emoji_2653=0x7f0e062d;
    /**
     * Spoken description for Unicode code point U+2660: "♠" BLACK SPADE SUIT
     */
    public static final int spoken_emoji_2660=0x7f0e062e;
    /**
     * Spoken description for Unicode code point U+2663: "♣" BLACK CLUB SUIT
     */
    public static final int spoken_emoji_2663=0x7f0e062f;
    /**
     * Spoken description for Unicode code point U+2665: "♥" BLACK HEART SUIT
     */
    public static final int spoken_emoji_2665=0x7f0e0630;
    /**
     * Spoken description for Unicode code point U+2666: "♦" BLACK DIAMOND SUIT
     */
    public static final int spoken_emoji_2666=0x7f0e0631;
    /**
     * Spoken description for Unicode code point U+2668: "♨" HOT SPRINGS
     */
    public static final int spoken_emoji_2668=0x7f0e0632;
    /**
     * Spoken description for Unicode code point U+267B: "♻" BLACK UNIVERSAL RECYCLING SYMBOL
     */
    public static final int spoken_emoji_267B=0x7f0e0633;
    /**
     * Spoken description for Unicode code point U+267F: "♿" WHEELCHAIR SYMBOL
     */
    public static final int spoken_emoji_267F=0x7f0e0634;
    /**
     * Spoken description for Unicode code point U+2692: "⚒" HAMMER AND PICK
     */
    public static final int spoken_emoji_2692=0x7f0e0635;
    /**
     * Spoken description for Unicode code point U+2693: "⚓" ANCHOR
     */
    public static final int spoken_emoji_2693=0x7f0e0636;
    /**
     * Spoken description for Unicode code point U+2694: "⚔" CROSSED SWORDS
     */
    public static final int spoken_emoji_2694=0x7f0e0637;
    /**
     * Spoken description for Unicode code point U+2696: "⚖" SCALES
     */
    public static final int spoken_emoji_2696=0x7f0e0638;
    /**
     * Spoken description for Unicode code point U+2697: "⚗" ALEMBIC
     */
    public static final int spoken_emoji_2697=0x7f0e0639;
    /**
     * Spoken description for Unicode code point U+2699: "⚙" GEAR
     */
    public static final int spoken_emoji_2699=0x7f0e063a;
    /**
     * Spoken description for Unicode code point U+269B: "⚛" ATOM SYMBOL
     */
    public static final int spoken_emoji_269B=0x7f0e063b;
    /**
     * Spoken description for Unicode code point U+269C: "⚜" FLEUR-DE-LIS
     */
    public static final int spoken_emoji_269C=0x7f0e063c;
    /**
     * Spoken description for Unicode code point U+26A0: "⚠" WARNING SIGN
     */
    public static final int spoken_emoji_26A0=0x7f0e063d;
    /**
     * Spoken description for Unicode code point U+26A1: "⚡" HIGH VOLTAGE SIGN
     */
    public static final int spoken_emoji_26A1=0x7f0e063e;
    /**
     * Spoken description for Unicode code point U+26AA: "⚪" MEDIUM WHITE CIRCLE
     */
    public static final int spoken_emoji_26AA=0x7f0e063f;
    /**
     * Spoken description for Unicode code point U+26AB: "⚫" MEDIUM BLACK CIRCLE
     */
    public static final int spoken_emoji_26AB=0x7f0e0640;
    /**
     * Spoken description for Unicode code point U+26B0: "⚰" COFFIN
     */
    public static final int spoken_emoji_26B0=0x7f0e0641;
    /**
     * Spoken description for Unicode code point U+26B1: "⚱" FUNERAL URN
     */
    public static final int spoken_emoji_26B1=0x7f0e0642;
    /**
     * Spoken description for Unicode code point U+26BD: "⚽" SOCCER BALL
     */
    public static final int spoken_emoji_26BD=0x7f0e0643;
    /**
     * Spoken description for Unicode code point U+26BE: "⚾" BASEBALL
     */
    public static final int spoken_emoji_26BE=0x7f0e0644;
    /**
     * Spoken description for Unicode code point U+26C4: "⛄" SNOWMAN WITHOUT SNOW
     */
    public static final int spoken_emoji_26C4=0x7f0e0645;
    /**
     * Spoken description for Unicode code point U+26C5: "⛅" SUN BEHIND CLOUD
     */
    public static final int spoken_emoji_26C5=0x7f0e0646;
    /**
     * Spoken description for Unicode code point U+26C8: "⛈" THUNDER CLOUD AND RAIN
     */
    public static final int spoken_emoji_26C8=0x7f0e0647;
    /**
     * Spoken description for Unicode code point U+26CE: "⛎" OPHIUCHUS
     */
    public static final int spoken_emoji_26CE=0x7f0e0648;
    /**
     * Spoken description for Unicode code point U+26CF: "⛏" PICK
     */
    public static final int spoken_emoji_26CF=0x7f0e0649;
    /**
     * Spoken description for Unicode code point U+26D1: "⛑" HELMET WITH WHITE CROSS
     */
    public static final int spoken_emoji_26D1=0x7f0e064a;
    /**
     * Spoken description for Unicode code point U+26D3: "⛓" CHAINS
     */
    public static final int spoken_emoji_26D3=0x7f0e064b;
    /**
     * Spoken description for Unicode code point U+26D4: "⛔" NO ENTRY
     */
    public static final int spoken_emoji_26D4=0x7f0e064c;
    /**
     * Spoken description for Unicode code point U+26E9: "⛩" SHINTO SHRINE
     */
    public static final int spoken_emoji_26E9=0x7f0e064d;
    /**
     * Spoken description for Unicode code point U+26EA: "⛪" CHURCH
     */
    public static final int spoken_emoji_26EA=0x7f0e064e;
    /**
     * Spoken description for Unicode code point U+26F0: "⛰" MOUNTAIN
     */
    public static final int spoken_emoji_26F0=0x7f0e064f;
    /**
     * Spoken description for Unicode code point U+26F1: "⛱" UMBRELLA ON GROUND
     */
    public static final int spoken_emoji_26F1=0x7f0e0650;
    /**
     * Spoken description for Unicode code point U+26F2: "⛲" FOUNTAIN
     */
    public static final int spoken_emoji_26F2=0x7f0e0651;
    /**
     * Spoken description for Unicode code point U+26F3: "⛳" FLAG IN HOLE
     */
    public static final int spoken_emoji_26F3=0x7f0e0652;
    /**
     * Spoken description for Unicode code point U+26F4: "⛴" FERRY
     */
    public static final int spoken_emoji_26F4=0x7f0e0653;
    /**
     * Spoken description for Unicode code point U+26F5: "⛵" SAILBOAT
     */
    public static final int spoken_emoji_26F5=0x7f0e0654;
    /**
     * Spoken description for Unicode code point U+26F7: "⛷" SKIER
     */
    public static final int spoken_emoji_26F7=0x7f0e0655;
    /**
     * Spoken description for Unicode code point U+26F8: "⛸" ICE SKATE
     */
    public static final int spoken_emoji_26F8=0x7f0e0656;
    /**
     * Spoken description for Unicode code point U+26F9: "⛹" PERSON WITH BALL
     */
    public static final int spoken_emoji_26F9=0x7f0e0657;
    /**
     * Spoken description for Unicode code point U+26FA: "⛺" TENT
     */
    public static final int spoken_emoji_26FA=0x7f0e0658;
    /**
     * Spoken description for Unicode code point U+26FD: "⛽" FUEL PUMP
     */
    public static final int spoken_emoji_26FD=0x7f0e0659;
    /**
     * Spoken description for Unicode code point U+2702: "✂" BLACK SCISSORS
     */
    public static final int spoken_emoji_2702=0x7f0e065a;
    /**
     * Spoken description for Unicode code point U+2705: "✅" WHITE HEAVY CHECK MARK
     */
    public static final int spoken_emoji_2705=0x7f0e065b;
    /**
     * Spoken description for Unicode code point U+2708: "✈" AIRPLANE
     */
    public static final int spoken_emoji_2708=0x7f0e065c;
    /**
     * Spoken description for Unicode code point U+2709: "✉" ENVELOPE
     */
    public static final int spoken_emoji_2709=0x7f0e065d;
    /**
     * Spoken description for Unicode code point U+270A: "✊" RAISED FIST
     */
    public static final int spoken_emoji_270A=0x7f0e065e;
    /**
     * Spoken description for Unicode code point U+270B: "✋" RAISED HAND
     */
    public static final int spoken_emoji_270B=0x7f0e065f;
    /**
     * Spoken description for Unicode code point U+270C: "✌" VICTORY HAND
     */
    public static final int spoken_emoji_270C=0x7f0e0660;
    /**
     * Spoken description for Unicode code point U+270D: "✍" WRITING HAND
     */
    public static final int spoken_emoji_270D=0x7f0e0661;
    /**
     * Spoken description for Unicode code point U+270F: "✏" PENCIL
     */
    public static final int spoken_emoji_270F=0x7f0e0662;
    /**
     * Spoken description for Unicode code point U+2712: "✒" BLACK NIB
     */
    public static final int spoken_emoji_2712=0x7f0e0663;
    /**
     * Spoken description for Unicode code point U+2714: "✔" HEAVY CHECK MARK
     */
    public static final int spoken_emoji_2714=0x7f0e0664;
    /**
     * Spoken description for Unicode code point U+2716: "✖" HEAVY MULTIPLICATION X
     */
    public static final int spoken_emoji_2716=0x7f0e0665;
    /**
     * Spoken description for Unicode code point U+271D: "✝" LATIN CROSS
     */
    public static final int spoken_emoji_271D=0x7f0e0666;
    /**
     * Spoken description for Unicode code point U+2721: "✡" STAR OF DAVID
     */
    public static final int spoken_emoji_2721=0x7f0e0667;
    /**
     * Spoken description for Unicode code point U+2728: "✨" SPARKLES
     */
    public static final int spoken_emoji_2728=0x7f0e0668;
    /**
     * Spoken description for Unicode code point U+2733: "✳" EIGHT SPOKED ASTERISK
     */
    public static final int spoken_emoji_2733=0x7f0e0669;
    /**
     * Spoken description for Unicode code point U+2734: "✴" EIGHT POINTED BLACK STAR
     */
    public static final int spoken_emoji_2734=0x7f0e066a;
    /**
     * Spoken description for Unicode code point U+2744: "❄" SNOWFLAKE
     */
    public static final int spoken_emoji_2744=0x7f0e066b;
    /**
     * Spoken description for Unicode code point U+2747: "❇" SPARKLE
     */
    public static final int spoken_emoji_2747=0x7f0e066c;
    /**
     * Spoken description for Unicode code point U+274C: "❌" CROSS MARK
     */
    public static final int spoken_emoji_274C=0x7f0e066d;
    /**
     * Spoken description for Unicode code point U+274E: "❎" NEGATIVE SQUARED CROSS MARK
     */
    public static final int spoken_emoji_274E=0x7f0e066e;
    /**
     * Spoken description for Unicode code point U+2753: "❓" BLACK QUESTION MARK ORNAMENT
     */
    public static final int spoken_emoji_2753=0x7f0e066f;
    /**
     * Spoken description for Unicode code point U+2754: "❔" WHITE QUESTION MARK ORNAMENT
     */
    public static final int spoken_emoji_2754=0x7f0e0670;
    /**
     * Spoken description for Unicode code point U+2755: "❕" WHITE EXCLAMATION MARK ORNAMENT
     */
    public static final int spoken_emoji_2755=0x7f0e0671;
    /**
     * Spoken description for Unicode code point U+2757: "❗" HEAVY EXCLAMATION MARK SYMBOL
     */
    public static final int spoken_emoji_2757=0x7f0e0672;
    /**
     * Spoken description for Unicode code point U+2763: "❣" HEAVY HEART EXCLAMATION MARK ORNAMENT
     */
    public static final int spoken_emoji_2763=0x7f0e0673;
    /**
     * Spoken description for Unicode code point U+2764: "❤" HEAVY BLACK HEART
     */
    public static final int spoken_emoji_2764=0x7f0e0674;
    /**
     * Spoken description for Unicode code point U+2795: "➕" HEAVY PLUS SIGN
     */
    public static final int spoken_emoji_2795=0x7f0e0675;
    /**
     * Spoken description for Unicode code point U+2796: "➖" HEAVY MINUS SIGN
     */
    public static final int spoken_emoji_2796=0x7f0e0676;
    /**
     * Spoken description for Unicode code point U+2797: "➗" HEAVY DIVISION SIGN
     */
    public static final int spoken_emoji_2797=0x7f0e0677;
    /**
     * Spoken description for Unicode code point U+27A1: "➡" BLACK RIGHTWARDS ARROW
     */
    public static final int spoken_emoji_27A1=0x7f0e0678;
    /**
     * Spoken description for Unicode code point U+27B0: "➰" CURLY LOOP
     */
    public static final int spoken_emoji_27B0=0x7f0e0679;
    /**
     * Spoken description for Unicode code point U+27BF: "➿" DOUBLE CURLY LOOP
     */
    public static final int spoken_emoji_27BF=0x7f0e067a;
    /**
     * Spoken description for Unicode code point U+2934: "⤴" ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS
     */
    public static final int spoken_emoji_2934=0x7f0e067b;
    /**
     * Spoken description for Unicode code point U+2935: "⤵" ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS
     */
    public static final int spoken_emoji_2935=0x7f0e067c;
    /**
     * Spoken description for Unicode code point U+2B05: "⬅" LEFTWARDS BLACK ARROW
     */
    public static final int spoken_emoji_2B05=0x7f0e067d;
    /**
     * Spoken description for Unicode code point U+2B06: "⬆" UPWARDS BLACK ARROW
     */
    public static final int spoken_emoji_2B06=0x7f0e067e;
    /**
     * Spoken description for Unicode code point U+2B07: "⬇" DOWNWARDS BLACK ARROW
     */
    public static final int spoken_emoji_2B07=0x7f0e067f;
    /**
     * Spoken description for Unicode code point U+2B1B: "⬛" BLACK LARGE SQUARE
     */
    public static final int spoken_emoji_2B1B=0x7f0e0680;
    /**
     * Spoken description for Unicode code point U+2B1C: "⬜" WHITE LARGE SQUARE
     */
    public static final int spoken_emoji_2B1C=0x7f0e0681;
    /**
     * Spoken description for Unicode code point U+2B50: "⭐" WHITE MEDIUM STAR
     */
    public static final int spoken_emoji_2B50=0x7f0e0682;
    /**
     * Spoken description for Unicode code point U+2B55: "⭕" HEAVY LARGE CIRCLE
     */
    public static final int spoken_emoji_2B55=0x7f0e0683;
    /**
     * Spoken description for Unicode code point U+3030: "〰" WAVY DASH
     */
    public static final int spoken_emoji_3030=0x7f0e0684;
    /**
     * Spoken description for Unicode code point U+303D: "〽" PART ALTERNATION MARK
     */
    public static final int spoken_emoji_303D=0x7f0e0685;
    /**
     * Spoken description for Unicode code point U+3297: "㊗" CIRCLED IDEOGRAPH CONGRATULATION
     */
    public static final int spoken_emoji_3297=0x7f0e0686;
    /**
     * Spoken description for Unicode code point U+3299: "㊙" CIRCLED IDEOGRAPH SECRET
     */
    public static final int spoken_emoji_3299=0x7f0e0687;
    /**
     * Spoken description for unknown emoji code point.
     */
    public static final int spoken_emoji_unknown=0x7f0e0688;
    /**
     * Spoken description for emoticons ":-!".
     */
    public static final int spoken_emoticon_3A_2D_21_20=0x7f0e0689;
    /**
     * Spoken description for emoticons ":-$".
     */
    public static final int spoken_emoticon_3A_2D_24_20=0x7f0e068a;
    /**
     * Spoken description for emoticons ":-*".
     */
    public static final int spoken_emoticon_3A_2D_2A_20=0x7f0e068b;
    /**
     * Spoken description for emoticons ":-[".
     */
    public static final int spoken_emoticon_3A_2D_5B_20=0x7f0e068c;
    /**
     * Spoken description for emoticons ":O".
     */
    public static final int spoken_emoticon_3A_4F_20=0x7f0e068d;
    /**
     * Spoken description for emoticons "B-)".
     */
    public static final int spoken_emoticon_42_2D_29_20=0x7f0e068e;
    /**
     * Spoken description of a suggestion when nothing is specified and the field is blank.
     */
    public static final int spoken_empty_suggestion=0x7f0e068f;
    /**
     * Spoken description for Unicode code point U+0049: "I" LATIN CAPITAL LETTER I
     * Note that depending on locale, the lower-case of this letter is U+0069 or U+0131.
     */
    public static final int spoken_letter_0049=0x7f0e0690;
    /**
     * Spoken description for Unicode code point U+0130: "İ" LATIN CAPITAL LETTER I WITH DOT ABOVE
     * Note that depending on locale, the lower-case of this letter is U+0069 or U+0131.
     */
    public static final int spoken_letter_0130=0x7f0e0691;
    /**
     * Spoken description when there is no text entered
     */
    public static final int spoken_no_text_entered=0x7f0e0692;
    /**
     * Spoken descriptions when opening a more keys keyboard that has alternative characters.
     */
    public static final int spoken_open_more_keys_keyboard=0x7f0e0693;
    /**
     * Spoken descriptions when opening a more suggestions panel that has alternative suggested words.
     */
    public static final int spoken_open_more_suggestions=0x7f0e0694;
    /**
     * Spoken description for Unicode code point U+00A1: "¡" INVERTED EXCLAMATION MARK
     */
    public static final int spoken_symbol_00A1=0x7f0e0695;
    /**
     * Spoken description for Unicode code point U+00AB: "«" LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
     */
    public static final int spoken_symbol_00AB=0x7f0e0696;
    /**
     * Spoken description for Unicode code point U+00B7: "·" MIDDLE DOT
     */
    public static final int spoken_symbol_00B7=0x7f0e0697;
    /**
     * Spoken description for Unicode code point U+00B9: "¹" SUPERSCRIPT ONE
     */
    public static final int spoken_symbol_00B9=0x7f0e0698;
    /**
     * Spoken description for Unicode code point U+00BB: "»" RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
     */
    public static final int spoken_symbol_00BB=0x7f0e0699;
    /**
     * Spoken description for Unicode code point U+00BF: "¿" INVERTED QUESTION MARK
     */
    public static final int spoken_symbol_00BF=0x7f0e069a;
    /**
     * Spoken description for Unicode code point U+2018: "‘" LEFT SINGLE QUOTATION MARK
     */
    public static final int spoken_symbol_2018=0x7f0e069b;
    /**
     * Spoken description for Unicode code point U+2019: "’" RIGHT SINGLE QUOTATION MARK
     */
    public static final int spoken_symbol_2019=0x7f0e069c;
    /**
     * Spoken description for Unicode code point U+201A: "‚" SINGLE LOW-9 QUOTATION MARK
     */
    public static final int spoken_symbol_201A=0x7f0e069d;
    /**
     * Spoken description for Unicode code point U+201C: "“" LEFT DOUBLE QUOTATION MARK
     */
    public static final int spoken_symbol_201C=0x7f0e069e;
    /**
     * Spoken description for Unicode code point U+201D: "”" RIGHT DOUBLE QUOTATION MARK
     */
    public static final int spoken_symbol_201D=0x7f0e069f;
    /**
     * Spoken description for Unicode code point U+2020: "†" DAGGER
     */
    public static final int spoken_symbol_2020=0x7f0e06a0;
    /**
     * Spoken description for Unicode code point U+2021: "‡" DOUBLE DAGGER
     */
    public static final int spoken_symbol_2021=0x7f0e06a1;
    /**
     * Spoken description for Unicode code point U+2030: "‰" PER MILLE SIGN
     */
    public static final int spoken_symbol_2030=0x7f0e06a2;
    /**
     * Spoken description for Unicode code point U+2032: "′" PRIME
     */
    public static final int spoken_symbol_2032=0x7f0e06a3;
    /**
     * Spoken description for Unicode code point U+2033: "″" DOUBLE PRIME
     */
    public static final int spoken_symbol_2033=0x7f0e06a4;
    /**
     * Spoken description for Unicode code point U+2039: "‹" SINGLE LEFT-POINTING ANGLE QUOTATION MARK
     */
    public static final int spoken_symbol_2039=0x7f0e06a5;
    /**
     * Spoken description for Unicode code point U+203A: "›" SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
     */
    public static final int spoken_symbol_203A=0x7f0e06a6;
    /**
     * Spoken description for Unicode code point U+2074: "⁴" SUPERSCRIPT FOUR
     */
    public static final int spoken_symbol_2074=0x7f0e06a7;
    /**
     * Spoken description for Unicode code point U+207F: "ⁿ" SUPERSCRIPT LATIN SMALL LETTER N
     */
    public static final int spoken_symbol_207F=0x7f0e06a8;
    /**
     * Spoken description for Unicode code point U+20B1: "₱" PESO SIGN
     */
    public static final int spoken_symbol_20B1=0x7f0e06a9;
    /**
     * Spoken description for Unicode code point U+2105: "℅" CARE OF
     */
    public static final int spoken_symbol_2105=0x7f0e06aa;
    /**
     * Spoken description for Unicode code point U+2192: "→" RIGHTWARDS ARROW
     */
    public static final int spoken_symbol_2192=0x7f0e06ab;
    /**
     * Spoken description for Unicode code point U+2193: "↓" DOWNWARDS ARROW
     */
    public static final int spoken_symbol_2193=0x7f0e06ac;
    /**
     * Spoken description for Unicode code point U+2205: "∅" EMPTY SET
     */
    public static final int spoken_symbol_2205=0x7f0e06ad;
    /**
     * Spoken description for Unicode code point U+2206: "∆" INCREMENT
     */
    public static final int spoken_symbol_2206=0x7f0e06ae;
    /**
     * Spoken description for Unicode code point U+2264: "≤" LESS-THAN OR EQUAL TO
     */
    public static final int spoken_symbol_2264=0x7f0e06af;
    /**
     * Spoken description for Unicode code point U+2265: "≥" GREATER-THAN OR EQUAL TO
     */
    public static final int spoken_symbol_2265=0x7f0e06b0;
    /**
     * Spoken description for Unicode code point U+2605: "★" BLACK STAR
     */
    public static final int spoken_symbol_2605=0x7f0e06b1;
    /**
     * Spoken description for unknown symbol code point.
     */
    public static final int spoken_symbol_unknown=0x7f0e06b2;
    /**
     * Spoken description to let the user know that when typing in a password, they can plug in a headset in to hear spoken descriptions of the keys they type. [CHAR LIMIT=NONE]
     */
    public static final int spoken_use_headphones=0x7f0e06b3;
    /**
     * Description for Bulgarian (BDS) subtype.
     */
    public static final int subtype_bulgarian_bds=0x7f0e06b4;
    /**
     * Description for Emoji keyboard subtype [CHAR LIMIT=25]
     */
    public static final int subtype_emoji=0x7f0e06b5;
    /**
     * Description for English (UK) keyboard subtype [CHAR LIMIT=25]
     * (UK) should be an abbreviation of United Kingdom to fit in the CHAR LIMIT.
     */
    public static final int subtype_en_GB=0x7f0e06b6;
    /**
     * Description for English (US) keyboard subtype [CHAR LIMIT=25]
     * (US) should be an abbreviation of United States to fit in the CHAR LIMIT.
     */
    public static final int subtype_en_US=0x7f0e06b7;
    /**
     * Description for Spanish (US) keyboard subtype [CHAR LIMIT=25]
     * (US) should be an abbreviation of United States to fit in the CHAR LIMIT.
     */
    public static final int subtype_es_US=0x7f0e06b8;
    /**
     * Generic subtype label
     */
    public static final int subtype_generic=0x7f0e06b9;
    public static final int subtype_generic_azerty=0x7f0e06ba;
    public static final int subtype_generic_colemak=0x7f0e06bb;
    /**
     * Description for "LANGUAGE_NAME" (Compact) keyboard subtype [CHAR LIMIT=25]
     * (Compact) can be an abbreviation to fit in the CHAR LIMIT.
     */
    public static final int subtype_generic_compact=0x7f0e06bc;
    public static final int subtype_generic_dvorak=0x7f0e06bd;
    public static final int subtype_generic_pcqwerty=0x7f0e06be;
    /**
     * Description for generic subtype that has predefined layout.
     * The string resource name must be "subtype_generic_<layout name>".
     * The string resource with "No language" also must be added to strings.xml and the resource
     * name must be "subtype_no_language_<layout name>"
     */
    public static final int subtype_generic_qwerty=0x7f0e06bf;
    public static final int subtype_generic_qwertz=0x7f0e06c0;
    /**
     * Description for "LANGUAGE_NAME" (Traditional) keyboard subtype [CHAR LIMIT=25]
     * (Traditional) can be an abbreviation to fit in the CHAR LIMIT.
     */
    public static final int subtype_generic_traditional=0x7f0e06c1;
    /**
     * Description for Hinglish (https://en.wikipedia.org/wiki/Hinglish) keyboard subtype [CHAR LIMIT=25]
     */
    public static final int subtype_hi_ZZ=0x7f0e06c2;
    public static final int subtype_in_root_locale_hi_ZZ=0x7f0e06c3;
    public static final int subtype_in_root_locale_sr_ZZ=0x7f0e06c4;
    /**
     * Title of the spinner for choosing a language of custom style in the settings dialog [CHAR LIMIT=15]
     */
    public static final int subtype_locale=0x7f0e06c5;
    /**
     * This string is displayed in a language list that allows to choose a language for
     * suggestions in a software keyboard. This setting won't give suggestions in any particular
     * language, hence "No language".
     * As for the "alphabet" mention, it refers specifically to the Latin alphabet, as opposed to
     * Cyrillic, Arabic, Hebrew or other scripts. This keyboard offers no suggestions, but it will
     * be a QWERTY, or AZERTY, or any other disposition that only offers Latin characters, so
     * you wouldn't be able to type, say, Arabic on it. Please translate it in a way that "alphabet"
     * would be understood to mean specifically the Latin alphabet, rather than any other
     * alphabet. [CHAR LIMIT=29]
     */
    public static final int subtype_no_language=0x7f0e06c6;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the AZERTY
     * disposition rather than other common dispositions for Latin languages. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_azerty=0x7f0e06c7;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the Colemak
     * disposition rather than other common dispositions for Latin languages. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_colemak=0x7f0e06c8;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the Dvorak
     * disposition rather than other common dispositions for Latin languages. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_dvorak=0x7f0e06c9;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the QWERTY PC
     * disposition that offers additional keys, but smaller keys compared to other common dispositions for
     * mobile devices. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_pcqwerty=0x7f0e06ca;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the QWERTY
     * disposition rather than other common dispositions for Latin languages. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_qwerty=0x7f0e06cb;
    /**
     * This string is displayed in the description for a keyboard type. It refers specifically to
     * the Latin alphabet, as opposed to Cyrillic, Arabic, Hebrew or other scripts.
     * When the device is configured to use a language using a script other than the Latin alphabet, the
     * user still needs a keyboard that can input Latin characters for passwords or login names for
     * example, and a way to switch to this Latin alphabet keyboard. This string is the description for
     * this keyboard, so users of other scripts should understand when they read this that it represents a
     * keyboard that is meant for them to be able to enter Latin characters as opposed to the script they
     * are used to. This keyboard does not provide a dictionary, and it is not tied to any specific
     * language among those that use the Latin alphabet. This keyboard is laid out in the QWERTZ
     * disposition rather than other common dispositions for Latin languages. [CHAR LIMIT=25]
     */
    public static final int subtype_no_language_qwertz=0x7f0e06cc;
    /**
     * Description for Serbian (Latin) keyboard subtype [CHAR LIMIT=25]
     * (Latin) can be an abbreviation to fit in the CHAR LIMIT.
     */
    public static final int subtype_sr_ZZ=0x7f0e06cd;
    /**
     * Description for English (UK) keyboard subtype with explicit keyboard layout [CHAR LIMIT=25]
     * (UK) should be an abbreviation of United Kingdom to fit in the CHAR LIMIT.
     * This should be identical to subtype_en_GB aside from the trailing (%s).
     */
    public static final int subtype_with_layout_en_GB=0x7f0e06ce;
    /**
     * Description for English (US) keyboard subtype with explicit keyboard layout [CHAR LIMIT=25]
     * (US) should be an abbreviation of United States to fit in the CHAR LIMIT.
     * This should be identical to subtype_en_US aside from the trailing (%s).
     */
    public static final int subtype_with_layout_en_US=0x7f0e06cf;
    /**
     * Description for Spanish (US) keyboard subtype with explicit keyboard layout [CHAR LIMIT=25]
     * (US) should be an abbreviation of United Statesn to fit in the CHAR LIMIT.
     * This should be identical to subtype_es_US aside from the trailing (%s).
     */
    public static final int subtype_with_layout_es_US=0x7f0e06d0;
    /**
     * Description for Hinglish (https://en.wikipedia.org/wiki/Hinglish) keyboard subtype with explicit keyboard layout [CHAR LIMIT=25]
     * This should be identical to subtype_hi_ZZ aside from the trailing (%s).
     */
    public static final int subtype_with_layout_hi_ZZ=0x7f0e06d1;
    /**
     * Description for Serbian (Latin) keyboard subtype with explicit keyboard layout [CHAR LIMIT=25]
     * This should be identical to subtype_sr_ZZ aside from the trailing (%s).
     */
    public static final int subtype_with_layout_sr_ZZ=0x7f0e06d2;
    /**
     * Symbols that are suggested between words
     * Symbols that are suggested between words
     * U+061F: "؟" ARABIC QUESTION MARK
     * U+060C: "،" ARABIC COMMA
     * U+061B: "؛" ARABIC SEMICOLON
     * U+061F: "؟" ARABIC QUESTION MARK
     * U+061B: "؛" ARABIC SEMICOLON
     * U+061F: "؟" ARABIC QUESTION MARK
     * U+060C: "،" ARABIC COMMA
     * U+061B: "؛" ARABIC SEMICOLON
     * U+061F: "؟" ARABIC QUESTION MARK
     * U+061B: "؛" ARABIC SEMICOLON
     * Symbols that are suggested between words
     * Symbols that are suggested between words
     */
    public static final int suggested_punctuations=0x7f0e06d3;
    /**
     * Title of the preference item for switching accounts [CHAR LIMIT=30]
     */
    public static final int switch_accounts=0x7f0e06d4;
    /**
     * Symbols that behave like a single punctuation when typed next to each other
     * Symbols that behave like a single punctuation when typed next to each other
     */
    public static final int symbols_clustering_together=0x7f0e06d5;
    /**
     * Symbols that are normally followed by a space (used to add an auto-space after these)
     * Symbols that are normally followed by a space (used to add an auto-space after these)
     * Symbols that are normally followed by a space (used to add an auto-space after these)
     * Symbols that are normally followed by a space (used to add an auto-space after these)
     */
    public static final int symbols_followed_by_space=0x7f0e06d6;
    /**
     * Symbols that are normally preceded by a space (used to add an auto-space before these)
     * Symbols that are normally preceded by a space (used to add an auto-space before these)
     * This is similar to French with the exception of "!" "?" and ";" which do not take a space before in Canadian French. Note that ":" does take a space before according to Canadian rules.
     */
    public static final int symbols_preceded_by_space=0x7f0e06d7;
    /**
     * Symbols that terminate sentences and require capitalization on the next char
     * Symbols that terminate sentences and require capitalization on the next char
     */
    public static final int symbols_sentence_terminators=0x7f0e06d8;
    /**
     * Word connectors
     * Word connectors
     * Word connectors
     */
    public static final int symbols_word_connectors=0x7f0e06d9;
    /**
     * Don't remove the enclosing double quotes, they protect whitespace (not just U+0020)
     * Don't remove the enclosing double quotes, they protect whitespace (not just U+0020)
     * Don't remove the enclosing double quotes, they protect whitespace (not just U+0020)
     * Don't remove the enclosing double quotes, they protect whitespace (not just U+0020)
     */
    public static final int symbols_word_separators=0x7f0e06da;
    /**
     * Option title for starting the sync cycle now. [CHAR LIMIT=33]
     */
    public static final int sync_now_title=0x7f0e06db;
    /**
     * The text of the toast warning a download is starting automatically to enable suggestions for the selected language [CHAR LIMIT=100]
     */
    public static final int toast_downloading_suggestions=0x7f0e06dc;
    /**
     * Option name for enabling or disabling the use of names of people in Contacts for suggestion and correction [CHAR LIMIT=25]
     */
    public static final int use_contacts_dict=0x7f0e06dd;
    /**
     * Description for option enabling or disabling the use of names of people in Contacts for suggestion and correction [CHAR LIMIT=65]
     */
    public static final int use_contacts_dict_summary=0x7f0e06de;
    /**
     * Description for the spell checker option to turn on/off contact names lookup. [CHAR LIMIT=65]
     */
    public static final int use_contacts_for_spellchecking_option_summary=0x7f0e06df;
    /**
     * Title for the spell checker option to turn on/off contact names lookup [CHAR LIMIT=25]
     */
    public static final int use_contacts_for_spellchecking_option_title=0x7f0e06e0;
    /**
     * Option name for enabling or disabling the double-space period feature that lets double tap on spacebar insert a period followed by a space [CHAR LIMIT=30]
     */
    public static final int use_double_space_period=0x7f0e06e1;
    /**
     * Description for option enabling or disabling the double-space period feature that lets double tap on spacebar insert a period followed by a space [CHAR LIMIT=65]
     */
    public static final int use_double_space_period_summary=0x7f0e06e2;
    /**
     * Option name for enabling the use by the keyboards of sent/received messages, e-mail and typing history to improve suggestion accuracy [CHAR LIMIT=25]
     */
    public static final int use_personalized_dicts=0x7f0e06e3;
    /**
     * Description for option enabling the use by the keyboards of sent/received messages, e-mail and typing history to improve suggestion accuracy [CHAR LIMIT=68]
     */
    public static final int use_personalized_dicts_summary=0x7f0e06e4;
    /**
     * This resource is corresponding to msgid="5433275485499039199"
     */
    public static final int user_dict_fast_scroll_alphabet=0x7f0e06e5;
    /**
     * This resource is corresponding to msgid="6225823625332416144"
     */
    public static final int user_dict_settings_add_dialog_confirm=0x7f0e06e6;
    /**
     * This resource is corresponding to msgid="2441785268726036101"
     */
    public static final int user_dict_settings_add_dialog_less_options=0x7f0e06e7;
    /**
     * This resource is corresponding to msgid="8848798370746019825"
     */
    public static final int user_dict_settings_add_dialog_more_options=0x7f0e06e8;
    /**
     * This resource is corresponding to msgid="4702613990174126482"
     */
    public static final int user_dict_settings_add_dialog_title=0x7f0e06e9;
    /**
     * This resource is corresponding to msgid="5696358317061318532"
     */
    public static final int user_dict_settings_add_locale_option_name=0x7f0e06ea;
    /**
     * This resource is corresponding to  msgid="4056762757149923551"
     */
    public static final int user_dict_settings_add_menu_title=0x7f0e06eb;
    /**
     * This resource is corresponding to msgid="742580720124344291"
     */
    public static final int user_dict_settings_add_screen_title=0x7f0e06ec;
    /**
     * This resource is corresponding to msgid="7333763456561873445"
     */
    public static final int user_dict_settings_add_shortcut_hint=0x7f0e06ed;
    /**
     * This resource is corresponding to msgid="660089258866063925"
     */
    public static final int user_dict_settings_add_shortcut_option_name=0x7f0e06ee;
    /**
     * This resource is corresponding to msgid="5725254076556821247"
     */
    public static final int user_dict_settings_add_word_hint=0x7f0e06ef;
    /**
     * This resource is corresponding to msgid="7868879174905963135"
     */
    public static final int user_dict_settings_add_word_option_name=0x7f0e06f0;
    /**
     * This resource is corresponding to msgid="6742000040975959247"
     */
    public static final int user_dict_settings_all_languages=0x7f0e06f1;
    /**
     * This resource is corresponding to msgid="9140703913776549054"
     */
    public static final int user_dict_settings_context_menu_delete_title=0x7f0e06f2;
    /**
     * This resource is corresponding to msgid="2210564879320004837"
     */
    public static final int user_dict_settings_context_menu_edit_title=0x7f0e06f3;
    /**
     * This resource is corresponding to msgid="4219243412325163003"
     */
    public static final int user_dict_settings_delete=0x7f0e06f4;
    /**
     * This resource is corresponding to msgid="8967476444840548674"
     */
    public static final int user_dict_settings_edit_dialog_title=0x7f0e06f5;
    /**
     * This resource is corresponding to msgid="8165273379942105271"
     */
    public static final int user_dict_settings_empty_text=0x7f0e06f6;
    /**
     * This resource is corresponding to msgid="7316375944684977910"
     */
    public static final int user_dict_settings_more_languages=0x7f0e06f7;
    /**
     * User dictionary settings.  The summary of the listem item to go into the User dictionary settings screen.
     */
    public static final int user_dict_settings_summary=0x7f0e06f8;
    /**
     * Name of the user dictionaries settings category
     */
    public static final int user_dictionaries=0x7f0e06f9;
    /**
     * Version text [CHAR LIMIT=30]
     */
    public static final int version_text=0x7f0e06fa;
    /**
     * Option to provide vibrate/haptic feedback on keypress
     */
    public static final int vibrate_on_keypress=0x7f0e06fb;
    /**
     * Preferences item for enabling speech input
     */
    public static final int voice_input=0x7f0e06fc;
    /**
     * The summary text to describe the reason why the "Voice input key" option is disabled. [CHAR LIMIT=100]
     */
    public static final int voice_input_disabled_summary=0x7f0e06fd;
    /**
     * For backward compatibility.
     * @see com.android.inputmethod.latin.settings.SettingsValues#needsToShowVoiceInputKey(android.content.SharedPreferences,android.content.res.Resources)
     */
    public static final int voice_mode_main=0x7f0e06fe;
  }
  public static final class style {
    /**
     * Though {@link com.android.inputmethod.keyboard.emoji.EmojiPalettesView} doesn't extend
     * {@link com.android.inputmethod.keyboard.KeyboardView}, some views inside it, for instance
     * delete button, need themed {@link com.android.inputmethod.keyboard.KeyboardView}
     * attributes.
     */
    public static final int EmojiPalettesView=0x7f0f0000;
    /**
     * Though {@link com.android.inputmethod.keyboard.emoji.EmojiPalettesView} doesn't extend
     * {@link com.android.inputmethod.keyboard.KeyboardView}, some views inside it, for instance
     * delete button, need themed {@link com.android.inputmethod.keyboard.KeyboardView}
     * attributes.
     */
    public static final int EmojiPalettesView_ICS=0x7f0f0001;
    /**
     * Though {@link com.android.inputmethod.keyboard.emoji.EmojiPalettesView} doesn't extend
     * {@link com.android.inputmethod.keyboard.KeyboardView}, some views inside it, for instance
     * delete button, need themed {@link com.android.inputmethod.keyboard.KeyboardView}
     * attributes.
     */
    public static final int EmojiPalettesView_KLP=0x7f0f0002;
    /**
     * Though {@link com.android.inputmethod.keyboard.emoji.EmojiPalettesView} doesn't extend
     * {@link com.android.inputmethod.keyboard.KeyboardView}, some views inside it, for instance
     * delete button, need themed {@link com.android.inputmethod.keyboard.KeyboardView}
     * attributes.
     */
    public static final int EmojiPalettesView_LXX_Dark=0x7f0f0003;
    /**
     * Though {@link com.android.inputmethod.keyboard.emoji.EmojiPalettesView} doesn't extend
     * {@link com.android.inputmethod.keyboard.KeyboardView}, some views inside it, for instance
     * delete button, need themed {@link com.android.inputmethod.keyboard.KeyboardView}
     * attributes.
     */
    public static final int EmojiPalettesView_LXX_Light=0x7f0f0004;
    public static final int InputView=0x7f0f0005;
    public static final int InputView_Holo=0x7f0f0006;
    public static final int InputView_LXX=0x7f0f0007;
    /**
     * Default theme values
     */
    public static final int Keyboard=0x7f0f0008;
    public static final int Keyboard_ICS=0x7f0f0009;
    public static final int Keyboard_KLP=0x7f0f000a;
    public static final int Keyboard_LXX_Dark=0x7f0f000b;
    public static final int Keyboard_LXX_Light=0x7f0f000c;
    public static final int KeyboardIcons=0x7f0f000d;
    public static final int KeyboardIcons_Holo=0x7f0f000e;
    public static final int KeyboardIcons_LXX_Dark=0x7f0f000f;
    public static final int KeyboardIcons_LXX_Light=0x7f0f0010;
    public static final int KeyboardTheme_ICS=0x7f0f0011;
    public static final int KeyboardTheme_KLP=0x7f0f0012;
    public static final int KeyboardTheme_LXX_Dark=0x7f0f0013;
    public static final int KeyboardTheme_LXX_Light=0x7f0f0014;
    public static final int KeyboardView=0x7f0f0015;
    /**
     * Holo KeyboardView theme (ICS and KLP)
     */
    public static final int KeyboardView_Holo=0x7f0f0016;
    public static final int KeyboardView_ICS=0x7f0f0017;
    public static final int KeyboardView_KLP=0x7f0f0018;
    /**
     * LXX KeyboardView theme (LXX_Light and LXX_Dark)
     */
    public static final int KeyboardView_LXX=0x7f0f0019;
    public static final int KeyboardView_LXX_Dark=0x7f0f001a;
    public static final int KeyboardView_LXX_Light=0x7f0f001b;
    public static final int MainKeyboardView=0x7f0f001c;
    public static final int MainKeyboardView_ICS=0x7f0f001d;
    public static final int MainKeyboardView_KLP=0x7f0f001e;
    public static final int MainKeyboardView_LXX_Dark=0x7f0f001f;
    public static final int MainKeyboardView_LXX_Light=0x7f0f0020;
    public static final int MoreKeysKeyboard=0x7f0f0021;
    public static final int MoreKeysKeyboard_ICS=0x7f0f0022;
    public static final int MoreKeysKeyboard_KLP=0x7f0f0023;
    public static final int MoreKeysKeyboard_LXX_Dark=0x7f0f0024;
    public static final int MoreKeysKeyboard_LXX_Light=0x7f0f0025;
    public static final int MoreKeysKeyboardView=0x7f0f0026;
    public static final int MoreKeysKeyboardView_ICS=0x7f0f0027;
    public static final int MoreKeysKeyboardView_KLP=0x7f0f0028;
    public static final int MoreKeysKeyboardView_LXX_Dark=0x7f0f0029;
    public static final int MoreKeysKeyboardView_LXX_Dark_Action=0x7f0f002a;
    public static final int MoreKeysKeyboardView_LXX_Light=0x7f0f002b;
    public static final int MoreKeysKeyboardView_LXX_Light_Action=0x7f0f002c;
    public static final int SuggestionStripView=0x7f0f002d;
    public static final int SuggestionStripView_ICS=0x7f0f002e;
    public static final int SuggestionStripView_KLP=0x7f0f002f;
    public static final int SuggestionStripView_LXX_Dark=0x7f0f0030;
    public static final int SuggestionStripView_LXX_Light=0x7f0f0031;
    public static final int SuggestionWord=0x7f0f0032;
    public static final int SuggestionWord_ICS=0x7f0f0033;
    public static final int SuggestionWord_KLP=0x7f0f0034;
    public static final int SuggestionWord_LXX_Dark=0x7f0f0035;
    public static final int SuggestionWord_LXX_Light=0x7f0f0036;
    /**
     * Until KitKat (API 19), {@link android.widget.Spinner} of dialog mode in a Dialog can't
     * handle orientation change correctly. Using dropdown mode avoids the issue.
     * This file is overridden by values-v19/spinner-style.xml on KitKat and up.
     * Until KitKat (API 19), {@link android.widget.Spinner} of dialog mode in a Dialog can't
     * handle orientation change correctly. Using dropdown mode avoids the issue.
     * This file overrides values/spinner-style.xml on KitKat and up.
     */
    public static final int additionalSubtypeSpinnerStyle=0x7f0f0037;
    public static final int platformActivityTheme=0x7f0f0038;
    public static final int platformDialogTheme=0x7f0f0039;
    public static final int platformSettingsTheme=0x7f0f003a;
    public static final int setupStepActionLabelStyle=0x7f0f003b;
    public static final int setupStepActionLabelStyleCommon=0x7f0f003c;
    public static final int setupStepBaseStyle=0x7f0f003d;
    public static final int setupStepBulletStyle=0x7f0f003e;
    public static final int setupStepIndicatorStyle=0x7f0f003f;
    public static final int setupStepInstructionStyle=0x7f0f0040;
    public static final int setupStepStartActionLabelStyleCommon=0x7f0f0041;
    public static final int setupStepStartIndicatorStyle=0x7f0f0042;
    public static final int setupStepTitleStyle=0x7f0f0043;
    public static final int setupTitleStyle=0x7f0f0044;
    public static final int setupTitleStyleCommon=0x7f0f0045;
    public static final int setupWelcomeDescritpionStyle=0x7f0f0046;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a EmojiPalettesView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #EmojiPalettesView_categoryIndicatorBackground com.android.inputmethod.latin:categoryIndicatorBackground}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_categoryIndicatorDrawable com.android.inputmethod.latin:categoryIndicatorDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_categoryIndicatorEnabled com.android.inputmethod.latin:categoryIndicatorEnabled}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_categoryPageIndicatorBackground com.android.inputmethod.latin:categoryPageIndicatorBackground}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_categoryPageIndicatorColor com.android.inputmethod.latin:categoryPageIndicatorColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory10Tab com.android.inputmethod.latin:iconEmojiCategory10Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory11Tab com.android.inputmethod.latin:iconEmojiCategory11Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory12Tab com.android.inputmethod.latin:iconEmojiCategory12Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory13Tab com.android.inputmethod.latin:iconEmojiCategory13Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory14Tab com.android.inputmethod.latin:iconEmojiCategory14Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory15Tab com.android.inputmethod.latin:iconEmojiCategory15Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory16Tab com.android.inputmethod.latin:iconEmojiCategory16Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory1Tab com.android.inputmethod.latin:iconEmojiCategory1Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory2Tab com.android.inputmethod.latin:iconEmojiCategory2Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory3Tab com.android.inputmethod.latin:iconEmojiCategory3Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory4Tab com.android.inputmethod.latin:iconEmojiCategory4Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory5Tab com.android.inputmethod.latin:iconEmojiCategory5Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory6Tab com.android.inputmethod.latin:iconEmojiCategory6Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory7Tab com.android.inputmethod.latin:iconEmojiCategory7Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory8Tab com.android.inputmethod.latin:iconEmojiCategory8Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiCategory9Tab com.android.inputmethod.latin:iconEmojiCategory9Tab}</code></td><td></td></tr>
     * <tr><td><code>{@link #EmojiPalettesView_iconEmojiRecentsTab com.android.inputmethod.latin:iconEmojiRecentsTab}</code></td><td></td></tr>
     * </table>
     * @see #EmojiPalettesView_categoryIndicatorBackground
     * @see #EmojiPalettesView_categoryIndicatorDrawable
     * @see #EmojiPalettesView_categoryIndicatorEnabled
     * @see #EmojiPalettesView_categoryPageIndicatorBackground
     * @see #EmojiPalettesView_categoryPageIndicatorColor
     * @see #EmojiPalettesView_iconEmojiCategory10Tab
     * @see #EmojiPalettesView_iconEmojiCategory11Tab
     * @see #EmojiPalettesView_iconEmojiCategory12Tab
     * @see #EmojiPalettesView_iconEmojiCategory13Tab
     * @see #EmojiPalettesView_iconEmojiCategory14Tab
     * @see #EmojiPalettesView_iconEmojiCategory15Tab
     * @see #EmojiPalettesView_iconEmojiCategory16Tab
     * @see #EmojiPalettesView_iconEmojiCategory1Tab
     * @see #EmojiPalettesView_iconEmojiCategory2Tab
     * @see #EmojiPalettesView_iconEmojiCategory3Tab
     * @see #EmojiPalettesView_iconEmojiCategory4Tab
     * @see #EmojiPalettesView_iconEmojiCategory5Tab
     * @see #EmojiPalettesView_iconEmojiCategory6Tab
     * @see #EmojiPalettesView_iconEmojiCategory7Tab
     * @see #EmojiPalettesView_iconEmojiCategory8Tab
     * @see #EmojiPalettesView_iconEmojiCategory9Tab
     * @see #EmojiPalettesView_iconEmojiRecentsTab
     */
    public static final int[] EmojiPalettesView={
        0x7f030008, 0x7f030009, 0x7f03000a, 0x7f03000b, 
        0x7f03000c, 0x7f030040, 0x7f030041, 0x7f030042, 
        0x7f030043, 0x7f030044, 0x7f030045, 0x7f030046, 
        0x7f030047, 0x7f030048, 0x7f030049, 0x7f03004a, 
        0x7f03004b, 0x7f03004c, 0x7f03004d, 0x7f03004e, 
        0x7f03004f, 0x7f030051
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#categoryIndicatorBackground}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:categoryIndicatorBackground
     */
    public static final int EmojiPalettesView_categoryIndicatorBackground=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#categoryIndicatorDrawable}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:categoryIndicatorDrawable
     */
    public static final int EmojiPalettesView_categoryIndicatorDrawable=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#categoryIndicatorEnabled}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:categoryIndicatorEnabled
     */
    public static final int EmojiPalettesView_categoryIndicatorEnabled=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#categoryPageIndicatorBackground}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:categoryPageIndicatorBackground
     */
    public static final int EmojiPalettesView_categoryPageIndicatorBackground=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#categoryPageIndicatorColor}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:categoryPageIndicatorColor
     */
    public static final int EmojiPalettesView_categoryPageIndicatorColor=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory10Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory10Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory10Tab=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory11Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory11Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory11Tab=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory12Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory12Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory12Tab=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory13Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory13Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory13Tab=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory14Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory14Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory14Tab=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory15Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory15Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory15Tab=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory16Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory16Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory16Tab=11;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory1Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory1Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory1Tab=12;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory2Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory2Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory2Tab=13;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory3Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory3Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory3Tab=14;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory4Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory4Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory4Tab=15;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory5Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory5Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory5Tab=16;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory6Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory6Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory6Tab=17;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory7Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory7Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory7Tab=18;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory8Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory8Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory8Tab=19;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiCategory9Tab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiCategory9Tab
     */
    public static final int EmojiPalettesView_iconEmojiCategory9Tab=20;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiRecentsTab}
     * attribute's value can be found in the {@link #EmojiPalettesView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiRecentsTab
     */
    public static final int EmojiPalettesView_iconEmojiRecentsTab=21;
    /**
     * Attributes that can be used with a Keyboard.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_horizontalGap com.android.inputmethod.latin:horizontalGap}</code></td><td>Default horizontal gap between keys, in the proportion of keyboard width.</td></tr>
     * <tr><td><code>{@link #Keyboard_iconDeleteKey com.android.inputmethod.latin:iconDeleteKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconDoneKey com.android.inputmethod.latin:iconDoneKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconEmojiActionKey com.android.inputmethod.latin:iconEmojiActionKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconEmojiNormalKey com.android.inputmethod.latin:iconEmojiNormalKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconEnterKey com.android.inputmethod.latin:iconEnterKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconGoKey com.android.inputmethod.latin:iconGoKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconImeKey com.android.inputmethod.latin:iconImeKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconLanguageSwitchKey com.android.inputmethod.latin:iconLanguageSwitchKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconNextKey com.android.inputmethod.latin:iconNextKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconPreviousKey com.android.inputmethod.latin:iconPreviousKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconSearchKey com.android.inputmethod.latin:iconSearchKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconSendKey com.android.inputmethod.latin:iconSendKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconSettingsKey com.android.inputmethod.latin:iconSettingsKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconShiftKey com.android.inputmethod.latin:iconShiftKey}</code></td><td>Icon set for key top and key preview.</td></tr>
     * <tr><td><code>{@link #Keyboard_iconShiftKeyShifted com.android.inputmethod.latin:iconShiftKeyShifted}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconShortcutKey com.android.inputmethod.latin:iconShortcutKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconShortcutKeyDisabled com.android.inputmethod.latin:iconShortcutKeyDisabled}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconSpaceKey com.android.inputmethod.latin:iconSpaceKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconSpaceKeyForNumberLayout com.android.inputmethod.latin:iconSpaceKeyForNumberLayout}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconTabKey com.android.inputmethod.latin:iconTabKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconZwjKey com.android.inputmethod.latin:iconZwjKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_iconZwnjKey com.android.inputmethod.latin:iconZwnjKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_keyboardBottomPadding com.android.inputmethod.latin:keyboardBottomPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_keyboardLeftPadding com.android.inputmethod.latin:keyboardLeftPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_keyboardRightPadding com.android.inputmethod.latin:keyboardRightPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_keyboardTopPadding com.android.inputmethod.latin:keyboardTopPadding}</code></td><td>Keyboard top, bottom, left, right edges paddings, in propotion of keyboard height.</td></tr>
     * <tr><td><code>{@link #Keyboard_moreKeysTemplate com.android.inputmethod.latin:moreKeysTemplate}</code></td><td>More keys keyboard layout template</td></tr>
     * <tr><td><code>{@link #Keyboard_rowHeight com.android.inputmethod.latin:rowHeight}</code></td><td>Default height of a row (key height + vertical gap), in pixels or in the proportion of
     * keyboard height.</td></tr>
     * <tr><td><code>{@link #Keyboard_themeId com.android.inputmethod.latin:themeId}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_touchPositionCorrectionData com.android.inputmethod.latin:touchPositionCorrectionData}</code></td><td>Touch position correction</td></tr>
     * <tr><td><code>{@link #Keyboard_verticalGap com.android.inputmethod.latin:verticalGap}</code></td><td>Default vertical gap between rows of keys, in the proportion of keyboard height.</td></tr>
     * </table>
     * @see #Keyboard_horizontalGap
     * @see #Keyboard_iconDeleteKey
     * @see #Keyboard_iconDoneKey
     * @see #Keyboard_iconEmojiActionKey
     * @see #Keyboard_iconEmojiNormalKey
     * @see #Keyboard_iconEnterKey
     * @see #Keyboard_iconGoKey
     * @see #Keyboard_iconImeKey
     * @see #Keyboard_iconLanguageSwitchKey
     * @see #Keyboard_iconNextKey
     * @see #Keyboard_iconPreviousKey
     * @see #Keyboard_iconSearchKey
     * @see #Keyboard_iconSendKey
     * @see #Keyboard_iconSettingsKey
     * @see #Keyboard_iconShiftKey
     * @see #Keyboard_iconShiftKeyShifted
     * @see #Keyboard_iconShortcutKey
     * @see #Keyboard_iconShortcutKeyDisabled
     * @see #Keyboard_iconSpaceKey
     * @see #Keyboard_iconSpaceKeyForNumberLayout
     * @see #Keyboard_iconTabKey
     * @see #Keyboard_iconZwjKey
     * @see #Keyboard_iconZwnjKey
     * @see #Keyboard_keyboardBottomPadding
     * @see #Keyboard_keyboardLeftPadding
     * @see #Keyboard_keyboardRightPadding
     * @see #Keyboard_keyboardTopPadding
     * @see #Keyboard_moreKeysTemplate
     * @see #Keyboard_rowHeight
     * @see #Keyboard_themeId
     * @see #Keyboard_touchPositionCorrectionData
     * @see #Keyboard_verticalGap
     */
    public static final int[] Keyboard={
        0x7f03003c, 0x7f03003d, 0x7f03003e, 0x7f03003f, 
        0x7f030050, 0x7f030052, 0x7f030053, 0x7f030054, 
        0x7f030055, 0x7f030056, 0x7f030057, 0x7f030058, 
        0x7f030059, 0x7f03005a, 0x7f03005b, 0x7f03005c, 
        0x7f03005d, 0x7f03005e, 0x7f03005f, 0x7f030060, 
        0x7f030061, 0x7f030062, 0x7f030063, 0x7f030096, 
        0x7f03009a, 0x7f03009b, 0x7f03009e, 0x7f0300b7, 
        0x7f0300bc, 0x7f0300d1, 0x7f0300d4, 0x7f0300d6
      };
    /**
     * <p>
     * @attr description
     * Default horizontal gap between keys, in the proportion of keyboard width.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:horizontalGap
     */
    public static final int Keyboard_horizontalGap=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconDeleteKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconDeleteKey
     */
    public static final int Keyboard_iconDeleteKey=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconDoneKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconDoneKey
     */
    public static final int Keyboard_iconDoneKey=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiActionKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiActionKey
     */
    public static final int Keyboard_iconEmojiActionKey=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEmojiNormalKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEmojiNormalKey
     */
    public static final int Keyboard_iconEmojiNormalKey=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconEnterKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconEnterKey
     */
    public static final int Keyboard_iconEnterKey=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconGoKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconGoKey
     */
    public static final int Keyboard_iconGoKey=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconImeKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconImeKey
     */
    public static final int Keyboard_iconImeKey=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconLanguageSwitchKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconLanguageSwitchKey
     */
    public static final int Keyboard_iconLanguageSwitchKey=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconNextKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconNextKey
     */
    public static final int Keyboard_iconNextKey=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconPreviousKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconPreviousKey
     */
    public static final int Keyboard_iconPreviousKey=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSearchKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconSearchKey
     */
    public static final int Keyboard_iconSearchKey=11;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSendKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconSendKey
     */
    public static final int Keyboard_iconSendKey=12;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSettingsKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconSettingsKey
     */
    public static final int Keyboard_iconSettingsKey=13;
    /**
     * <p>
     * @attr description
     * Icon set for key top and key preview. These should be aligned with
     * {@link com.android.inputmethod.keyboard.internal.KeyboardIconsSet#NAMES_AND_ATTR_IDS}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconShiftKey
     */
    public static final int Keyboard_iconShiftKey=14;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShiftKeyShifted}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconShiftKeyShifted
     */
    public static final int Keyboard_iconShiftKeyShifted=15;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShortcutKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconShortcutKey
     */
    public static final int Keyboard_iconShortcutKey=16;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShortcutKeyDisabled}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconShortcutKeyDisabled
     */
    public static final int Keyboard_iconShortcutKeyDisabled=17;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSpaceKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconSpaceKey
     */
    public static final int Keyboard_iconSpaceKey=18;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSpaceKeyForNumberLayout}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconSpaceKeyForNumberLayout
     */
    public static final int Keyboard_iconSpaceKeyForNumberLayout=19;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconTabKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconTabKey
     */
    public static final int Keyboard_iconTabKey=20;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconZwjKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconZwjKey
     */
    public static final int Keyboard_iconZwjKey=21;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconZwnjKey}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:iconZwnjKey
     */
    public static final int Keyboard_iconZwnjKey=22;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardBottomPadding}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyboardBottomPadding
     */
    public static final int Keyboard_keyboardBottomPadding=23;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardLeftPadding}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyboardLeftPadding
     */
    public static final int Keyboard_keyboardLeftPadding=24;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardRightPadding}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyboardRightPadding
     */
    public static final int Keyboard_keyboardRightPadding=25;
    /**
     * <p>
     * @attr description
     * Keyboard top, bottom, left, right edges paddings, in propotion of keyboard height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyboardTopPadding
     */
    public static final int Keyboard_keyboardTopPadding=26;
    /**
     * <p>
     * @attr description
     * More keys keyboard layout template
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysTemplate
     */
    public static final int Keyboard_moreKeysTemplate=27;
    /**
     * <p>
     * @attr description
     * Default height of a row (key height + vertical gap), in pixels or in the proportion of
     * keyboard height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:rowHeight
     */
    public static final int Keyboard_rowHeight=28;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#themeId}
     * attribute's value can be found in the {@link #Keyboard} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ICS</td><td>0</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.</td></tr>
     * <tr><td>KLP</td><td>2</td><td></td></tr>
     * <tr><td>LXXDark</td><td>4</td><td></td></tr>
     * <tr><td>LXXLight</td><td>3</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:themeId
     */
    public static final int Keyboard_themeId=29;
    /**
     * <p>
     * @attr description
     * Touch position correction
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:touchPositionCorrectionData
     */
    public static final int Keyboard_touchPositionCorrectionData=30;
    /**
     * <p>
     * @attr description
     * Default vertical gap between rows of keys, in the proportion of keyboard height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:verticalGap
     */
    public static final int Keyboard_verticalGap=31;
    /**
     * Attributes that can be used with a KeyboardLayoutSet_Element.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Element_allowRedundantMoreKeys com.android.inputmethod.latin:allowRedundantMoreKeys}</code></td><td>Allow redundant more keys when they are in the base layout.</td></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Element_elementKeyboard com.android.inputmethod.latin:elementKeyboard}</code></td><td></td></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Element_elementName com.android.inputmethod.latin:elementName}</code></td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.</td></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Element_enableProximityCharsCorrection com.android.inputmethod.latin:enableProximityCharsCorrection}</code></td><td>Enable proximity characters correction.</td></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Element_supportsSplitLayout com.android.inputmethod.latin:supportsSplitLayout}</code></td><td>Indicates if the keyboard layout supports being split or not.</td></tr>
     * </table>
     * @see #KeyboardLayoutSet_Element_allowRedundantMoreKeys
     * @see #KeyboardLayoutSet_Element_elementKeyboard
     * @see #KeyboardLayoutSet_Element_elementName
     * @see #KeyboardLayoutSet_Element_enableProximityCharsCorrection
     * @see #KeyboardLayoutSet_Element_supportsSplitLayout
     */
    public static final int[] KeyboardLayoutSet_Element={
        0x7f030001, 0x7f030016, 0x7f030017, 0x7f030019, 
        0x7f0300ce
      };
    /**
     * <p>
     * @attr description
     * Allow redundant more keys when they are in the base layout. true by default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:allowRedundantMoreKeys
     */
    public static final int KeyboardLayoutSet_Element_allowRedundantMoreKeys=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#elementKeyboard}
     * attribute's value can be found in the {@link #KeyboardLayoutSet_Element} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:elementKeyboard
     */
    public static final int KeyboardLayoutSet_Element_elementKeyboard=1;
    /**
     * <p>
     * @attr description
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alphabet</td><td>0</td><td></td></tr>
     * <tr><td>alphabetAutomaticShifted</td><td>2</td><td></td></tr>
     * <tr><td>alphabetManualShifted</td><td>1</td><td></td></tr>
     * <tr><td>alphabetShiftLockShifted</td><td>4</td><td></td></tr>
     * <tr><td>alphabetShiftLocked</td><td>3</td><td></td></tr>
     * <tr><td>emojiCategory1</td><td>b</td><td></td></tr>
     * <tr><td>emojiCategory10</td><td>14</td><td></td></tr>
     * <tr><td>emojiCategory11</td><td>15</td><td></td></tr>
     * <tr><td>emojiCategory12</td><td>16</td><td></td></tr>
     * <tr><td>emojiCategory13</td><td>17</td><td></td></tr>
     * <tr><td>emojiCategory14</td><td>18</td><td></td></tr>
     * <tr><td>emojiCategory15</td><td>19</td><td></td></tr>
     * <tr><td>emojiCategory16</td><td>1a</td><td></td></tr>
     * <tr><td>emojiCategory2</td><td>c</td><td></td></tr>
     * <tr><td>emojiCategory3</td><td>d</td><td></td></tr>
     * <tr><td>emojiCategory4</td><td>e</td><td></td></tr>
     * <tr><td>emojiCategory5</td><td>f</td><td></td></tr>
     * <tr><td>emojiCategory6</td><td>10</td><td></td></tr>
     * <tr><td>emojiCategory7</td><td>11</td><td></td></tr>
     * <tr><td>emojiCategory8</td><td>12</td><td></td></tr>
     * <tr><td>emojiCategory9</td><td>13</td><td></td></tr>
     * <tr><td>emojiRecents</td><td>a</td><td></td></tr>
     * <tr><td>number</td><td>9</td><td></td></tr>
     * <tr><td>phone</td><td>7</td><td></td></tr>
     * <tr><td>phoneSymbols</td><td>8</td><td></td></tr>
     * <tr><td>symbols</td><td>5</td><td></td></tr>
     * <tr><td>symbolsShifted</td><td>6</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:elementName
     */
    public static final int KeyboardLayoutSet_Element_elementName=2;
    /**
     * <p>
     * @attr description
     * Enable proximity characters correction. Disabled by default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:enableProximityCharsCorrection
     */
    public static final int KeyboardLayoutSet_Element_enableProximityCharsCorrection=3;
    /**
     * <p>
     * @attr description
     * Indicates if the keyboard layout supports being split or not. false by default
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:supportsSplitLayout
     */
    public static final int KeyboardLayoutSet_Element_supportsSplitLayout=4;
    /**
     * Attributes that can be used with a KeyboardLayoutSet_Feature.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardLayoutSet_Feature_supportedScript com.android.inputmethod.latin:supportedScript}</code></td><td>This should be aligned with
     * {@link com.android.inputmethod.latin.utils.ScriptUtils#SCRIPT_ARABIC} etc.</td></tr>
     * </table>
     * @see #KeyboardLayoutSet_Feature_supportedScript
     */
    public static final int[] KeyboardLayoutSet_Feature={
        0x7f0300cd
      };
    /**
     * <p>
     * @attr description
     * This should be aligned with
     * {@link com.android.inputmethod.latin.utils.ScriptUtils#SCRIPT_ARABIC} etc.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>arabic</td><td>0</td><td></td></tr>
     * <tr><td>armenian</td><td>1</td><td></td></tr>
     * <tr><td>bengali</td><td>2</td><td></td></tr>
     * <tr><td>cyrillic</td><td>3</td><td></td></tr>
     * <tr><td>devanagari</td><td>4</td><td></td></tr>
     * <tr><td>georgian</td><td>5</td><td></td></tr>
     * <tr><td>greek</td><td>6</td><td></td></tr>
     * <tr><td>hebrew</td><td>7</td><td></td></tr>
     * <tr><td>kannada</td><td>8</td><td></td></tr>
     * <tr><td>khmer</td><td>9</td><td></td></tr>
     * <tr><td>lao</td><td>a</td><td></td></tr>
     * <tr><td>latin</td><td>b</td><td></td></tr>
     * <tr><td>malayalam</td><td>c</td><td></td></tr>
     * <tr><td>sinhala</td><td>e</td><td>Myanmar is disabled. <enum name="myanmar" value="13" /></td></tr>
     * <tr><td>tamil</td><td>f</td><td></td></tr>
     * <tr><td>telugu</td><td>10</td><td></td></tr>
     * <tr><td>thai</td><td>11</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:supportedScript
     */
    public static final int KeyboardLayoutSet_Feature_supportedScript=0;
    /**
     * Attributes that can be used with a KeyboardTheme.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardTheme_emojiPalettesViewStyle com.android.inputmethod.latin:emojiPalettesViewStyle}</code></td><td>EmojiPalettesView style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_inputViewStyle com.android.inputmethod.latin:inputViewStyle}</code></td><td>InputView style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_keyboardStyle com.android.inputmethod.latin:keyboardStyle}</code></td><td>Keyboard style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_keyboardViewStyle com.android.inputmethod.latin:keyboardViewStyle}</code></td><td>KeyboardView style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_mainKeyboardViewStyle com.android.inputmethod.latin:mainKeyboardViewStyle}</code></td><td>MainKeyboardView style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_moreKeysKeyboardStyle com.android.inputmethod.latin:moreKeysKeyboardStyle}</code></td><td>MoreKeysKeyboard style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_moreKeysKeyboardViewForActionStyle com.android.inputmethod.latin:moreKeysKeyboardViewForActionStyle}</code></td><td>MoreKeysKeyboardView style for action key</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_moreKeysKeyboardViewStyle com.android.inputmethod.latin:moreKeysKeyboardViewStyle}</code></td><td>MoreKeysKeyboardView style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_suggestionStripViewStyle com.android.inputmethod.latin:suggestionStripViewStyle}</code></td><td>Suggestions strip style</td></tr>
     * <tr><td><code>{@link #KeyboardTheme_suggestionWordStyle com.android.inputmethod.latin:suggestionWordStyle}</code></td><td>Suggestion word style</td></tr>
     * </table>
     * @see #KeyboardTheme_emojiPalettesViewStyle
     * @see #KeyboardTheme_inputViewStyle
     * @see #KeyboardTheme_keyboardStyle
     * @see #KeyboardTheme_keyboardViewStyle
     * @see #KeyboardTheme_mainKeyboardViewStyle
     * @see #KeyboardTheme_moreKeysKeyboardStyle
     * @see #KeyboardTheme_moreKeysKeyboardViewForActionStyle
     * @see #KeyboardTheme_moreKeysKeyboardViewStyle
     * @see #KeyboardTheme_suggestionStripViewStyle
     * @see #KeyboardTheme_suggestionWordStyle
     */
    public static final int[] KeyboardTheme={
        0x7f030018, 0x7f030066, 0x7f03009c, 0x7f03009f, 
        0x7f0300aa, 0x7f0300b4, 0x7f0300b5, 0x7f0300b6, 
        0x7f0300ca, 0x7f0300cb
      };
    /**
     * <p>
     * @attr description
     * EmojiPalettesView style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:emojiPalettesViewStyle
     */
    public static final int KeyboardTheme_emojiPalettesViewStyle=0;
    /**
     * <p>
     * @attr description
     * InputView style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:inputViewStyle
     */
    public static final int KeyboardTheme_inputViewStyle=1;
    /**
     * <p>
     * @attr description
     * Keyboard style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyboardStyle
     */
    public static final int KeyboardTheme_keyboardStyle=2;
    /**
     * <p>
     * @attr description
     * KeyboardView style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyboardViewStyle
     */
    public static final int KeyboardTheme_keyboardViewStyle=3;
    /**
     * <p>
     * @attr description
     * MainKeyboardView style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:mainKeyboardViewStyle
     */
    public static final int KeyboardTheme_mainKeyboardViewStyle=4;
    /**
     * <p>
     * @attr description
     * MoreKeysKeyboard style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysKeyboardStyle
     */
    public static final int KeyboardTheme_moreKeysKeyboardStyle=5;
    /**
     * <p>
     * @attr description
     * MoreKeysKeyboardView style for action key
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysKeyboardViewForActionStyle
     */
    public static final int KeyboardTheme_moreKeysKeyboardViewForActionStyle=6;
    /**
     * <p>
     * @attr description
     * MoreKeysKeyboardView style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysKeyboardViewStyle
     */
    public static final int KeyboardTheme_moreKeysKeyboardViewStyle=7;
    /**
     * <p>
     * @attr description
     * Suggestions strip style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:suggestionStripViewStyle
     */
    public static final int KeyboardTheme_suggestionStripViewStyle=8;
    /**
     * <p>
     * @attr description
     * Suggestion word style
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:suggestionWordStyle
     */
    public static final int KeyboardTheme_suggestionWordStyle=9;
    /**
     * Attributes that can be used with a KeyboardView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardView_functionalKeyBackground com.android.inputmethod.latin:functionalKeyBackground}</code></td><td>Background image for the functional key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyBackground com.android.inputmethod.latin:keyBackground}</code></td><td>Background image for the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyHintLetterPadding com.android.inputmethod.latin:keyHintLetterPadding}</code></td><td>Right padding of hint letter to the edge of the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyPopupHintLetter com.android.inputmethod.latin:keyPopupHintLetter}</code></td><td>Popup hint letter string</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyPopupHintLetterPadding com.android.inputmethod.latin:keyPopupHintLetterPadding}</code></td><td>Bottom padding of popup hint letter to the edge of the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyShiftedLetterHintPadding com.android.inputmethod.latin:keyShiftedLetterHintPadding}</code></td><td>Right padding of shifted letter hint to the edge of the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyTextShadowRadius com.android.inputmethod.latin:keyTextShadowRadius}</code></td><td>Blur radius of key text shadow.</td></tr>
     * <tr><td><code>{@link #KeyboardView_spacebarBackground com.android.inputmethod.latin:spacebarBackground}</code></td><td>Background image for the spacebar.</td></tr>
     * <tr><td><code>{@link #KeyboardView_spacebarIconWidthRatio com.android.inputmethod.latin:spacebarIconWidthRatio}</code></td><td></td></tr>
     * <tr><td><code>{@link #KeyboardView_state_has_morekeys com.android.inputmethod.latin:state_has_morekeys}</code></td><td></td></tr>
     * <tr><td><code>{@link #KeyboardView_state_left_edge com.android.inputmethod.latin:state_left_edge}</code></td><td>Key preview background states</td></tr>
     * <tr><td><code>{@link #KeyboardView_state_right_edge com.android.inputmethod.latin:state_right_edge}</code></td><td></td></tr>
     * <tr><td><code>{@link #KeyboardView_verticalCorrection com.android.inputmethod.latin:verticalCorrection}</code></td><td>Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
     * </table>
     * @see #KeyboardView_functionalKeyBackground
     * @see #KeyboardView_keyBackground
     * @see #KeyboardView_keyHintLetterPadding
     * @see #KeyboardView_keyPopupHintLetter
     * @see #KeyboardView_keyPopupHintLetterPadding
     * @see #KeyboardView_keyShiftedLetterHintPadding
     * @see #KeyboardView_keyTextShadowRadius
     * @see #KeyboardView_spacebarBackground
     * @see #KeyboardView_spacebarIconWidthRatio
     * @see #KeyboardView_state_has_morekeys
     * @see #KeyboardView_state_left_edge
     * @see #KeyboardView_state_right_edge
     * @see #KeyboardView_verticalCorrection
     */
    public static final int[] KeyboardView={
        0x7f03001a, 0x7f03006b, 0x7f030072, 0x7f03007c, 
        0x7f03007d, 0x7f03008b, 0x7f030092, 0x7f0300c2, 
        0x7f0300c3, 0x7f0300c4, 0x7f0300c5, 0x7f0300c6, 
        0x7f0300d5
      };
    /**
     * <p>
     * @attr description
     * Background image for the functional key. This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible
     * states: normal, pressed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:functionalKeyBackground
     */
    public static final int KeyboardView_functionalKeyBackground=0;
    /**
     * <p>
     * @attr description
     * Background image for the key. This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible states:
     * normal, pressed, checkable, checkable+pressed, checkable+checked,
     * checkable+checked+pressed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyBackground
     */
    public static final int KeyboardView_keyBackground=1;
    /**
     * <p>
     * @attr description
     * Right padding of hint letter to the edge of the key.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyHintLetterPadding
     */
    public static final int KeyboardView_keyHintLetterPadding=2;
    /**
     * <p>
     * @attr description
     * Popup hint letter string
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keyPopupHintLetter
     */
    public static final int KeyboardView_keyPopupHintLetter=3;
    /**
     * <p>
     * @attr description
     * Bottom padding of popup hint letter to the edge of the key.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyPopupHintLetterPadding
     */
    public static final int KeyboardView_keyPopupHintLetterPadding=4;
    /**
     * <p>
     * @attr description
     * Right padding of shifted letter hint to the edge of the key.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyShiftedLetterHintPadding
     */
    public static final int KeyboardView_keyShiftedLetterHintPadding=5;
    /**
     * <p>
     * @attr description
     * Blur radius of key text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.inputmethod.latin:keyTextShadowRadius
     */
    public static final int KeyboardView_keyTextShadowRadius=6;
    /**
     * <p>
     * @attr description
     * Background image for the spacebar.  This image needs to be a
     * {@link android.graphics.drawable.StateListDrawable}, with the following possible
     * states: normal, pressed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:spacebarBackground
     */
    public static final int KeyboardView_spacebarBackground=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#spacebarIconWidthRatio}
     * attribute's value can be found in the {@link #KeyboardView} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.inputmethod.latin:spacebarIconWidthRatio
     */
    public static final int KeyboardView_spacebarIconWidthRatio=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#state_has_morekeys}
     * attribute's value can be found in the {@link #KeyboardView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:state_has_morekeys
     */
    public static final int KeyboardView_state_has_morekeys=9;
    /**
     * <p>
     * @attr description
     * Key preview background states
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:state_left_edge
     */
    public static final int KeyboardView_state_left_edge=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#state_right_edge}
     * attribute's value can be found in the {@link #KeyboardView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:state_right_edge
     */
    public static final int KeyboardView_state_right_edge=11;
    /**
     * <p>
     * @attr description
     * Amount to offset the touch Y coordinate by, for bias correction.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:verticalCorrection
     */
    public static final int KeyboardView_verticalCorrection=12;
    /**
     * Attributes that can be used with a Keyboard_Case.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_Case_clobberSettingsKey com.android.inputmethod.latin:clobberSettingsKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_countryCode com.android.inputmethod.latin:countryCode}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_hasShortcutKey com.android.inputmethod.latin:hasShortcutKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_imeAction com.android.inputmethod.latin:imeAction}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_isIconDefined com.android.inputmethod.latin:isIconDefined}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_isMultiLine com.android.inputmethod.latin:isMultiLine}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_isSplitLayout com.android.inputmethod.latin:isSplitLayout}</code></td><td>Enable split keyboard layout.</td></tr>
     * <tr><td><code>{@link #Keyboard_Case_keyboardLayoutSet com.android.inputmethod.latin:keyboardLayoutSet}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_keyboardLayoutSetElement com.android.inputmethod.latin:keyboardLayoutSetElement}</code></td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.</td></tr>
     * <tr><td><code>{@link #Keyboard_Case_keyboardTheme com.android.inputmethod.latin:keyboardTheme}</code></td><td>This should be aligned with Keyboard.themeId and
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.</td></tr>
     * <tr><td><code>{@link #Keyboard_Case_languageCode com.android.inputmethod.latin:languageCode}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_languageSwitchKeyEnabled com.android.inputmethod.latin:languageSwitchKeyEnabled}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_localeCode com.android.inputmethod.latin:localeCode}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_mode com.android.inputmethod.latin:mode}</code></td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#MODE_TEXT} etc.</td></tr>
     * <tr><td><code>{@link #Keyboard_Case_navigateNext com.android.inputmethod.latin:navigateNext}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_navigatePrevious com.android.inputmethod.latin:navigatePrevious}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Case_passwordInput com.android.inputmethod.latin:passwordInput}</code></td><td></td></tr>
     * </table>
     * @see #Keyboard_Case_clobberSettingsKey
     * @see #Keyboard_Case_countryCode
     * @see #Keyboard_Case_hasShortcutKey
     * @see #Keyboard_Case_imeAction
     * @see #Keyboard_Case_isIconDefined
     * @see #Keyboard_Case_isMultiLine
     * @see #Keyboard_Case_isSplitLayout
     * @see #Keyboard_Case_keyboardLayoutSet
     * @see #Keyboard_Case_keyboardLayoutSetElement
     * @see #Keyboard_Case_keyboardTheme
     * @see #Keyboard_Case_languageCode
     * @see #Keyboard_Case_languageSwitchKeyEnabled
     * @see #Keyboard_Case_localeCode
     * @see #Keyboard_Case_mode
     * @see #Keyboard_Case_navigateNext
     * @see #Keyboard_Case_navigatePrevious
     * @see #Keyboard_Case_passwordInput
     */
    public static final int[] Keyboard_Case={
        0x7f03000e, 0x7f030014, 0x7f03003b, 0x7f030065, 
        0x7f030067, 0x7f030068, 0x7f030069, 0x7f030098, 
        0x7f030099, 0x7f03009d, 0x7f0300a0, 0x7f0300a7, 
        0x7f0300a8, 0x7f0300b0, 0x7f0300b8, 0x7f0300b9, 
        0x7f0300bb
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#clobberSettingsKey}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:clobberSettingsKey
     */
    public static final int Keyboard_Case_clobberSettingsKey=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#countryCode}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:countryCode
     */
    public static final int Keyboard_Case_countryCode=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#hasShortcutKey}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:hasShortcutKey
     */
    public static final int Keyboard_Case_hasShortcutKey=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#imeAction}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionCustomLabel</td><td>100</td><td>This should be aligned with
     * {@link com.android.inputmethod.latin.utils.InputTypeUtils#IME_ACTION_CUSTOM_LABEL}.</td></tr>
     * <tr><td>actionDone</td><td>6</td><td></td></tr>
     * <tr><td>actionGo</td><td>2</td><td></td></tr>
     * <tr><td>actionNext</td><td>5</td><td></td></tr>
     * <tr><td>actionNone</td><td>1</td><td></td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td></td></tr>
     * <tr><td>actionSearch</td><td>3</td><td></td></tr>
     * <tr><td>actionSend</td><td>4</td><td></td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>This should be aligned with
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO} etc.</td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:imeAction
     */
    public static final int Keyboard_Case_imeAction=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#isIconDefined}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:isIconDefined
     */
    public static final int Keyboard_Case_isIconDefined=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#isMultiLine}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:isMultiLine
     */
    public static final int Keyboard_Case_isMultiLine=5;
    /**
     * <p>
     * @attr description
     * Enable split keyboard layout. Disabled by default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:isSplitLayout
     */
    public static final int Keyboard_Case_isSplitLayout=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardLayoutSet}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keyboardLayoutSet
     */
    public static final int Keyboard_Case_keyboardLayoutSet=7;
    /**
     * <p>
     * @attr description
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#ELEMENT_ALPHABET} etc.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alphabet</td><td>0</td><td></td></tr>
     * <tr><td>alphabetAutomaticShifted</td><td>2</td><td></td></tr>
     * <tr><td>alphabetManualShifted</td><td>1</td><td></td></tr>
     * <tr><td>alphabetShiftLockShifted</td><td>4</td><td></td></tr>
     * <tr><td>alphabetShiftLocked</td><td>3</td><td></td></tr>
     * <tr><td>emojiCategory1</td><td>b</td><td></td></tr>
     * <tr><td>emojiCategory10</td><td>14</td><td></td></tr>
     * <tr><td>emojiCategory11</td><td>15</td><td></td></tr>
     * <tr><td>emojiCategory12</td><td>16</td><td></td></tr>
     * <tr><td>emojiCategory13</td><td>17</td><td></td></tr>
     * <tr><td>emojiCategory14</td><td>18</td><td></td></tr>
     * <tr><td>emojiCategory15</td><td>19</td><td></td></tr>
     * <tr><td>emojiCategory16</td><td>1a</td><td></td></tr>
     * <tr><td>emojiCategory2</td><td>c</td><td></td></tr>
     * <tr><td>emojiCategory3</td><td>d</td><td></td></tr>
     * <tr><td>emojiCategory4</td><td>e</td><td></td></tr>
     * <tr><td>emojiCategory5</td><td>f</td><td></td></tr>
     * <tr><td>emojiCategory6</td><td>10</td><td></td></tr>
     * <tr><td>emojiCategory7</td><td>11</td><td></td></tr>
     * <tr><td>emojiCategory8</td><td>12</td><td></td></tr>
     * <tr><td>emojiCategory9</td><td>13</td><td></td></tr>
     * <tr><td>emojiRecents</td><td>a</td><td></td></tr>
     * <tr><td>number</td><td>9</td><td></td></tr>
     * <tr><td>phone</td><td>7</td><td></td></tr>
     * <tr><td>phoneSymbols</td><td>8</td><td></td></tr>
     * <tr><td>symbols</td><td>5</td><td></td></tr>
     * <tr><td>symbolsShifted</td><td>6</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyboardLayoutSetElement
     */
    public static final int Keyboard_Case_keyboardLayoutSetElement=8;
    /**
     * <p>
     * @attr description
     * This should be aligned with Keyboard.themeId and
     * {@link com.android.inputmethod.keyboard.KeyboardTheme#THEME_ID_ICS} etc.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ICS</td><td>0</td><td></td></tr>
     * <tr><td>KLP</td><td>2</td><td></td></tr>
     * <tr><td>LXXDark</td><td>4</td><td></td></tr>
     * <tr><td>LXXLight</td><td>3</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyboardTheme
     */
    public static final int Keyboard_Case_keyboardTheme=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageCode}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:languageCode
     */
    public static final int Keyboard_Case_languageCode=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageSwitchKeyEnabled}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:languageSwitchKeyEnabled
     */
    public static final int Keyboard_Case_languageSwitchKeyEnabled=11;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#localeCode}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:localeCode
     */
    public static final int Keyboard_Case_localeCode=12;
    /**
     * <p>
     * @attr description
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.KeyboardId#MODE_TEXT} etc.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>email</td><td>2</td><td></td></tr>
     * <tr><td>im</td><td>3</td><td></td></tr>
     * <tr><td>number</td><td>5</td><td></td></tr>
     * <tr><td>phone</td><td>4</td><td></td></tr>
     * <tr><td>text</td><td>0</td><td></td></tr>
     * <tr><td>url</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:mode
     */
    public static final int Keyboard_Case_mode=13;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#navigateNext}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:navigateNext
     */
    public static final int Keyboard_Case_navigateNext=14;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#navigatePrevious}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:navigatePrevious
     */
    public static final int Keyboard_Case_navigatePrevious=15;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#passwordInput}
     * attribute's value can be found in the {@link #Keyboard_Case} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:passwordInput
     */
    public static final int Keyboard_Case_passwordInput=16;
    /**
     * Attributes that can be used with a Keyboard_GridRows.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_GridRows_codesArray com.android.inputmethod.latin:codesArray}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_GridRows_textsArray com.android.inputmethod.latin:textsArray}</code></td><td></td></tr>
     * </table>
     * @see #Keyboard_GridRows_codesArray
     * @see #Keyboard_GridRows_textsArray
     */
    public static final int[] Keyboard_GridRows={
        0x7f03000f, 0x7f0300d0
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#codesArray}
     * attribute's value can be found in the {@link #Keyboard_GridRows} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:codesArray
     */
    public static final int Keyboard_GridRows_codesArray=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#textsArray}
     * attribute's value can be found in the {@link #Keyboard_GridRows} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:textsArray
     */
    public static final int Keyboard_GridRows_textsArray=1;
    /**
     * Attributes that can be used with a Keyboard_Include.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_Include_keyboardLayout com.android.inputmethod.latin:keyboardLayout}</code></td><td></td></tr>
     * </table>
     * @see #Keyboard_Include_keyboardLayout
     */
    public static final int[] Keyboard_Include={
        0x7f030097
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardLayout}
     * attribute's value can be found in the {@link #Keyboard_Include} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyboardLayout
     */
    public static final int Keyboard_Include_keyboardLayout=0;
    /**
     * Attributes that can be used with a Keyboard_Key.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_Key_additionalMoreKeys com.android.inputmethod.latin:additionalMoreKeys}</code></td><td>The keys to display in the more keys keyboard in addition to moreKeys.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_altCode com.android.inputmethod.latin:altCode}</code></td><td>The alternate unicode value that this key outputs while typing.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_backgroundType com.android.inputmethod.latin:backgroundType}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Key_functionalTextColor com.android.inputmethod.latin:functionalTextColor}</code></td><td>Color to use for the label in a key that has followFunctionalTextColor keyLabelFlags.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyActionFlags com.android.inputmethod.latin:keyActionFlags}</code></td><td>The key action flags.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLabel com.android.inputmethod.latin:keyHintLabel}</code></td><td>The hint label to display on the key in conjunction with the label.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLabelColor com.android.inputmethod.latin:keyHintLabelColor}</code></td><td>Key hint label color</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLabelOffCenterRatio com.android.inputmethod.latin:keyHintLabelOffCenterRatio}</code></td><td>The hint label's horizontal offset to the center of the key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLabelRatio com.android.inputmethod.latin:keyHintLabelRatio}</code></td><td>Size of the text for hint label, in the proportion of key height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLabelVerticalAdjustment com.android.inputmethod.latin:keyHintLabelVerticalAdjustment}</code></td><td>The vertical adjustment of key hint label in proportion to its height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLetterColor com.android.inputmethod.latin:keyHintLetterColor}</code></td><td>Key hint letter (= one character hint label) color</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyHintLetterRatio com.android.inputmethod.latin:keyHintLetterRatio}</code></td><td>Size of the text for hint letter (= one character hint label), in the proportion of
     * key height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyIconDisabled com.android.inputmethod.latin:keyIconDisabled}</code></td><td>The icon for disabled key</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLabelFlags com.android.inputmethod.latin:keyLabelFlags}</code></td><td>The key label flags.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLabelOffCenterRatio com.android.inputmethod.latin:keyLabelOffCenterRatio}</code></td><td>The label's horizontal offset to the center of the key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLabelSize com.android.inputmethod.latin:keyLabelSize}</code></td><td>Size of the text for keys with multiple letters.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLargeLetterRatio com.android.inputmethod.latin:keyLargeLetterRatio}</code></td><td>Large size of the text for one letter keys, in the proportion of key height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLetterSize com.android.inputmethod.latin:keyLetterSize}</code></td><td>Size of the text for one letter keys.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyPreviewTextColor com.android.inputmethod.latin:keyPreviewTextColor}</code></td><td>The text color for key press feedback.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyPreviewTextRatio com.android.inputmethod.latin:keyPreviewTextRatio}</code></td><td>Size of the text for key press feedback popup, in the proportion of key height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyShiftedLetterHintActivatedColor com.android.inputmethod.latin:keyShiftedLetterHintActivatedColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyShiftedLetterHintInactivatedColor com.android.inputmethod.latin:keyShiftedLetterHintInactivatedColor}</code></td><td>Shifted letter hint colors</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyShiftedLetterHintRatio com.android.inputmethod.latin:keyShiftedLetterHintRatio}</code></td><td>Size of the text for shifted letter hint, in the proportion of key height.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keySpec com.android.inputmethod.latin:keySpec}</code></td><td>The label, icon to display on the key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyStyle com.android.inputmethod.latin:keyStyle}</code></td><td>The key style to specify a set of key attributes defined by <key_style/></td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyTextColor com.android.inputmethod.latin:keyTextColor}</code></td><td>Color to use for the label in a key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyTextInactivatedColor com.android.inputmethod.latin:keyTextInactivatedColor}</code></td><td>Color to use for the label in a key when in inactivated state.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyTextShadowColor com.android.inputmethod.latin:keyTextShadowColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyTypeface com.android.inputmethod.latin:keyTypeface}</code></td><td>Key top visual attributes</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyWidth com.android.inputmethod.latin:keyWidth}</code></td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.internal.KeyboardRow#KEYWIDTH_FILL_RIGHT}.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyXPos com.android.inputmethod.latin:keyXPos}</code></td><td>The X-coordinate of upper right corner of this key including horizontal gap, in the
     * proportion of keyboard width.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_maxMoreKeysColumn com.android.inputmethod.latin:maxMoreKeysColumn}</code></td><td>Maximum column of more keys keyboard</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_moreKeys com.android.inputmethod.latin:moreKeys}</code></td><td>The keys to display in the more keys keyboard.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_visualInsetsLeft com.android.inputmethod.latin:visualInsetsLeft}</code></td><td>Visual insets, in the proportion of keyboard width.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_visualInsetsRight com.android.inputmethod.latin:visualInsetsRight}</code></td><td></td></tr>
     * </table>
     * @see #Keyboard_Key_additionalMoreKeys
     * @see #Keyboard_Key_altCode
     * @see #Keyboard_Key_backgroundType
     * @see #Keyboard_Key_functionalTextColor
     * @see #Keyboard_Key_keyActionFlags
     * @see #Keyboard_Key_keyHintLabel
     * @see #Keyboard_Key_keyHintLabelColor
     * @see #Keyboard_Key_keyHintLabelOffCenterRatio
     * @see #Keyboard_Key_keyHintLabelRatio
     * @see #Keyboard_Key_keyHintLabelVerticalAdjustment
     * @see #Keyboard_Key_keyHintLetterColor
     * @see #Keyboard_Key_keyHintLetterRatio
     * @see #Keyboard_Key_keyIconDisabled
     * @see #Keyboard_Key_keyLabelFlags
     * @see #Keyboard_Key_keyLabelOffCenterRatio
     * @see #Keyboard_Key_keyLabelSize
     * @see #Keyboard_Key_keyLargeLetterRatio
     * @see #Keyboard_Key_keyLetterSize
     * @see #Keyboard_Key_keyPreviewTextColor
     * @see #Keyboard_Key_keyPreviewTextRatio
     * @see #Keyboard_Key_keyShiftedLetterHintActivatedColor
     * @see #Keyboard_Key_keyShiftedLetterHintInactivatedColor
     * @see #Keyboard_Key_keyShiftedLetterHintRatio
     * @see #Keyboard_Key_keySpec
     * @see #Keyboard_Key_keyStyle
     * @see #Keyboard_Key_keyTextColor
     * @see #Keyboard_Key_keyTextInactivatedColor
     * @see #Keyboard_Key_keyTextShadowColor
     * @see #Keyboard_Key_keyTypeface
     * @see #Keyboard_Key_keyWidth
     * @see #Keyboard_Key_keyXPos
     * @see #Keyboard_Key_maxMoreKeysColumn
     * @see #Keyboard_Key_moreKeys
     * @see #Keyboard_Key_visualInsetsLeft
     * @see #Keyboard_Key_visualInsetsRight
     */
    public static final int[] Keyboard_Key={
        0x7f030000, 0x7f030003, 0x7f030007, 0x7f03001b, 
        0x7f03006a, 0x7f03006c, 0x7f03006d, 0x7f03006e, 
        0x7f03006f, 0x7f030070, 0x7f030071, 0x7f030073, 
        0x7f030076, 0x7f030077, 0x7f030078, 0x7f030079, 
        0x7f03007a, 0x7f03007b, 0x7f030084, 0x7f030085, 
        0x7f030089, 0x7f03008a, 0x7f03008c, 0x7f03008d, 
        0x7f03008e, 0x7f03008f, 0x7f030090, 0x7f030091, 
        0x7f030093, 0x7f030094, 0x7f030095, 0x7f0300ab, 
        0x7f0300b1, 0x7f0300d7, 0x7f0300d8
      };
    /**
     * <p>
     * @attr description
     * The keys to display in the more keys keyboard in addition to moreKeys.
     * The additional more keys are inserted at the '%' markers in the moreKeys if any.
     * They are inserted at the head of moreKeys if none.
     * If there are remaining entries of additionalMoreKeys even after all '%' markers have
     * been replaced, those remaining entries are appended at the end of moreKeys.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:additionalMoreKeys
     */
    public static final int Keyboard_Key_additionalMoreKeys=0;
    /**
     * <p>
     * @attr description
     * The alternate unicode value that this key outputs while typing.
     * Code value represented in hexadecimal prefixed with "0x" or code value reference using
     * "!code/<code_name>" notation.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:altCode
     */
    public static final int Keyboard_Key_altCode=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#backgroundType}
     * attribute's value can be found in the {@link #Keyboard_Key} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>action</td><td>5</td><td></td></tr>
     * <tr><td>empty</td><td>0</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#BACKGROUND_TYPE_NORMAL} etc.</td></tr>
     * <tr><td>functional</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>1</td><td></td></tr>
     * <tr><td>spacebar</td><td>6</td><td></td></tr>
     * <tr><td>stickyOff</td><td>3</td><td></td></tr>
     * <tr><td>stickyOn</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:backgroundType
     */
    public static final int Keyboard_Key_backgroundType=2;
    /**
     * <p>
     * @attr description
     * Color to use for the label in a key that has followFunctionalTextColor keyLabelFlags.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:functionalTextColor
     */
    public static final int Keyboard_Key_functionalTextColor=3;
    /**
     * <p>
     * @attr description
     * The key action flags.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>altCodeWhileTyping</td><td>4</td><td></td></tr>
     * <tr><td>enableLongPress</td><td>8</td><td></td></tr>
     * <tr><td>isRepeatable</td><td>1</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#ACTION_FLAGS_IS_REPEATABLE} etc.</td></tr>
     * <tr><td>noKeyPreview</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyActionFlags
     */
    public static final int Keyboard_Key_keyActionFlags=4;
    /**
     * <p>
     * @attr description
     * The hint label to display on the key in conjunction with the label.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keyHintLabel
     */
    public static final int Keyboard_Key_keyHintLabel=5;
    /**
     * <p>
     * @attr description
     * Key hint label color
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyHintLabelColor
     */
    public static final int Keyboard_Key_keyHintLabelColor=6;
    /**
     * <p>
     * @attr description
     * The hint label's horizontal offset to the center of the key. Negative is to left and
     * positive is to right. The value is in proportion of the width of
     * {@link com.android.inputmethod.latin.utils.TypefaceUtils#KEY_LABEL_REFERENCE_CHAR}.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyHintLabelOffCenterRatio
     */
    public static final int Keyboard_Key_keyHintLabelOffCenterRatio=7;
    /**
     * <p>
     * @attr description
     * Size of the text for hint label, in the proportion of key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyHintLabelRatio
     */
    public static final int Keyboard_Key_keyHintLabelRatio=8;
    /**
     * <p>
     * @attr description
     * The vertical adjustment of key hint label in proportion to its height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyHintLabelVerticalAdjustment
     */
    public static final int Keyboard_Key_keyHintLabelVerticalAdjustment=9;
    /**
     * <p>
     * @attr description
     * Key hint letter (= one character hint label) color
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyHintLetterColor
     */
    public static final int Keyboard_Key_keyHintLetterColor=10;
    /**
     * <p>
     * @attr description
     * Size of the text for hint letter (= one character hint label), in the proportion of
     * key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyHintLetterRatio
     */
    public static final int Keyboard_Key_keyHintLetterRatio=11;
    /**
     * <p>
     * @attr description
     * The icon for disabled key
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keyIconDisabled
     */
    public static final int Keyboard_Key_keyIconDisabled=12;
    /**
     * <p>
     * @attr description
     * The key label flags.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignHintLabelToBottom</td><td>2</td><td>This should be aligned with
     * {@link com.android.inputmethod.keyboard.Key#LABEL_FLAGS_FONT_NORMAL} etc.</td></tr>
     * <tr><td>alignIconToBottom</td><td>4</td><td></td></tr>
     * <tr><td>alignLabelOffCenter</td><td>8</td><td></td></tr>
     * <tr><td>autoScale</td><td>c000</td><td>The autoScale value implies autoXScale bit on to optimize scaling code path.</td></tr>
     * <tr><td>autoXScale</td><td>4000</td><td></td></tr>
     * <tr><td>disableAdditionalMoreKeys</td><td>80000000</td><td>If true, disable additionalMoreKeys.</td></tr>
     * <tr><td>disableKeyHintLabel</td><td>40000000</td><td>If true, disable keyHintLabel.</td></tr>
     * <tr><td>followFunctionalTextColor</td><td>80000</td><td>If true, use functionalTextColor instead of ketTextColor to drawing the label on
     * the key</td></tr>
     * <tr><td>followKeyHintLabelRatio</td><td>140</td><td></td></tr>
     * <tr><td>followKeyLabelRatio</td><td>c0</td><td></td></tr>
     * <tr><td>followKeyLargeLetterRatio</td><td>40</td><td></td></tr>
     * <tr><td>followKeyLetterRatio</td><td>80</td><td></td></tr>
     * <tr><td>fontDefault</td><td>30</td><td></td></tr>
     * <tr><td>fontMonoSpace</td><td>20</td><td></td></tr>
     * <tr><td>fontNormal</td><td>10</td><td></td></tr>
     * <tr><td>fromCustomActionLabel</td><td>40000</td><td>If true, use EditorInfo.actionLabel for the key label.</td></tr>
     * <tr><td>hasHintLabel</td><td>800</td><td></td></tr>
     * <tr><td>hasPopupHint</td><td>200</td><td></td></tr>
     * <tr><td>hasShiftedLetterHint</td><td>400</td><td></td></tr>
     * <tr><td>keepBackgroundAspectRatio</td><td>100000</td><td>Keep aspect ratio of key background.</td></tr>
     * <tr><td>preserveCase</td><td>10000</td><td>If true, character case of code, altCode, moreKeys, keyOutputText, keyLabel,
     * or keyHintLabel will never be subject to change.</td></tr>
     * <tr><td>shiftedLetterActivated</td><td>20000</td><td>If true, use keyShiftedLetterHintActivatedColor for the shifted letter hint and
     * keyTextInactivatedColor for the primary key top label.</td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyLabelFlags
     */
    public static final int Keyboard_Key_keyLabelFlags=13;
    /**
     * <p>
     * @attr description
     * The label's horizontal offset to the center of the key. Negative is to left and
     * positive is to right. The value is in proportion of the width of
     * {@link com.android.inputmethod.latin.utils.TypefaceUtils#KEY_LABEL_REFERENCE_CHAR}.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyLabelOffCenterRatio
     */
    public static final int Keyboard_Key_keyLabelOffCenterRatio=14;
    /**
     * <p>
     * @attr description
     * Size of the text for keys with multiple letters. If specified as fraction, the text
     * size is measured in the proportion of key height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyLabelSize
     */
    public static final int Keyboard_Key_keyLabelSize=15;
    /**
     * <p>
     * @attr description
     * Large size of the text for one letter keys, in the proportion of key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyLargeLetterRatio
     */
    public static final int Keyboard_Key_keyLargeLetterRatio=16;
    /**
     * <p>
     * @attr description
     * Size of the text for one letter keys. If specified as fraction, the text size is
     * measured in the proportion of key height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyLetterSize
     */
    public static final int Keyboard_Key_keyLetterSize=17;
    /**
     * <p>
     * @attr description
     * The text color for key press feedback.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyPreviewTextColor
     */
    public static final int Keyboard_Key_keyPreviewTextColor=18;
    /**
     * <p>
     * @attr description
     * Size of the text for key press feedback popup, in the proportion of key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyPreviewTextRatio
     */
    public static final int Keyboard_Key_keyPreviewTextRatio=19;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyShiftedLetterHintActivatedColor}
     * attribute's value can be found in the {@link #Keyboard_Key} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyShiftedLetterHintActivatedColor
     */
    public static final int Keyboard_Key_keyShiftedLetterHintActivatedColor=20;
    /**
     * <p>
     * @attr description
     * Shifted letter hint colors
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyShiftedLetterHintInactivatedColor
     */
    public static final int Keyboard_Key_keyShiftedLetterHintInactivatedColor=21;
    /**
     * <p>
     * @attr description
     * Size of the text for shifted letter hint, in the proportion of key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyShiftedLetterHintRatio
     */
    public static final int Keyboard_Key_keyShiftedLetterHintRatio=22;
    /**
     * <p>
     * @attr description
     * The label, icon to display on the key. And code, outputText of the key.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keySpec
     */
    public static final int Keyboard_Key_keySpec=23;
    /**
     * <p>
     * @attr description
     * The key style to specify a set of key attributes defined by <key_style/>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:keyStyle
     */
    public static final int Keyboard_Key_keyStyle=24;
    /**
     * <p>
     * @attr description
     * Color to use for the label in a key.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyTextColor
     */
    public static final int Keyboard_Key_keyTextColor=25;
    /**
     * <p>
     * @attr description
     * Color to use for the label in a key when in inactivated state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyTextInactivatedColor
     */
    public static final int Keyboard_Key_keyTextInactivatedColor=26;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyTextShadowColor}
     * attribute's value can be found in the {@link #Keyboard_Key} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyTextShadowColor
     */
    public static final int Keyboard_Key_keyTextShadowColor=27;
    /**
     * <p>
     * @attr description
     * Key top visual attributes
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bold</td><td>1</td><td></td></tr>
     * <tr><td>boldItalic</td><td>3</td><td></td></tr>
     * <tr><td>italic</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td>This should be aligned with {@link android.graphics.Typeface#NORMAL} etc.</td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyTypeface
     */
    public static final int Keyboard_Key_keyTypeface=28;
    /**
     * <p>
     * @attr description
     * This should be aligned with
     * {@link com.android.inputmethod.keyboard.internal.KeyboardRow#KEYWIDTH_FILL_RIGHT}.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fillRight</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:keyWidth
     */
    public static final int Keyboard_Key_keyWidth=29;
    /**
     * <p>
     * @attr description
     * The X-coordinate of upper right corner of this key including horizontal gap, in the
     * proportion of keyboard width.
     * If the value is negative, the origin is the right edge of the keyboard.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:keyXPos
     */
    public static final int Keyboard_Key_keyXPos=30;
    /**
     * <p>
     * @attr description
     * Maximum column of more keys keyboard
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:maxMoreKeysColumn
     */
    public static final int Keyboard_Key_maxMoreKeysColumn=31;
    /**
     * <p>
     * @attr description
     * The keys to display in the more keys keyboard.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:moreKeys
     */
    public static final int Keyboard_Key_moreKeys=32;
    /**
     * <p>
     * @attr description
     * Visual insets, in the proportion of keyboard width.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:visualInsetsLeft
     */
    public static final int Keyboard_Key_visualInsetsLeft=33;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#visualInsetsRight}
     * attribute's value can be found in the {@link #Keyboard_Key} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:visualInsetsRight
     */
    public static final int Keyboard_Key_visualInsetsRight=34;
    /**
     * Attributes that can be used with a Keyboard_KeyStyle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_KeyStyle_parentStyle com.android.inputmethod.latin:parentStyle}</code></td><td></td></tr>
     * <tr><td><code>{@link #Keyboard_KeyStyle_styleName com.android.inputmethod.latin:styleName}</code></td><td></td></tr>
     * </table>
     * @see #Keyboard_KeyStyle_parentStyle
     * @see #Keyboard_KeyStyle_styleName
     */
    public static final int[] Keyboard_KeyStyle={
        0x7f0300ba, 0x7f0300c8
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#parentStyle}
     * attribute's value can be found in the {@link #Keyboard_KeyStyle} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:parentStyle
     */
    public static final int Keyboard_KeyStyle_parentStyle=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#styleName}
     * attribute's value can be found in the {@link #Keyboard_KeyStyle} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.inputmethod.latin:styleName
     */
    public static final int Keyboard_KeyStyle_styleName=1;
    /**
     * Attributes that can be used with a MainKeyboardView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MainKeyboardView_altCodeKeyWhileTypingFadeinAnimator com.android.inputmethod.latin:altCodeKeyWhileTypingFadeinAnimator}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_altCodeKeyWhileTypingFadeoutAnimator com.android.inputmethod.latin:altCodeKeyWhileTypingFadeoutAnimator}</code></td><td>Fadeout and fadein animator for altCodeWhileTyping keys.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_backgroundDimAlpha com.android.inputmethod.latin:backgroundDimAlpha}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDetectFastMoveSpeedThreshold com.android.inputmethod.latin:gestureDetectFastMoveSpeedThreshold}</code></td><td>Static threshold for starting gesture detection (keyWidth%/sec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDynamicDistanceThresholdFrom com.android.inputmethod.latin:gestureDynamicDistanceThresholdFrom}</code></td><td>Distance based threshold values for gesture detection (keyWidth%/sec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDynamicDistanceThresholdTo com.android.inputmethod.latin:gestureDynamicDistanceThresholdTo}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDynamicThresholdDecayDuration com.android.inputmethod.latin:gestureDynamicThresholdDecayDuration}</code></td><td>Dynamic threshold for gesture after fast typing (msec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDynamicTimeThresholdFrom com.android.inputmethod.latin:gestureDynamicTimeThresholdFrom}</code></td><td>Time based threshold values for gesture detection (msec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureDynamicTimeThresholdTo com.android.inputmethod.latin:gestureDynamicTimeThresholdTo}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewColor com.android.inputmethod.latin:gestureFloatingPreviewColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewHorizontalPadding com.android.inputmethod.latin:gestureFloatingPreviewHorizontalPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewRoundRadius com.android.inputmethod.latin:gestureFloatingPreviewRoundRadius}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewTextColor com.android.inputmethod.latin:gestureFloatingPreviewTextColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewTextLingerTimeout com.android.inputmethod.latin:gestureFloatingPreviewTextLingerTimeout}</code></td><td>Delay after gesture input and gesture floating preview text dismissing in millisecond</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewTextOffset com.android.inputmethod.latin:gestureFloatingPreviewTextOffset}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewTextSize com.android.inputmethod.latin:gestureFloatingPreviewTextSize}</code></td><td>Attributes for GestureFloatingPreviewText</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureFloatingPreviewVerticalPadding com.android.inputmethod.latin:gestureFloatingPreviewVerticalPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureRecognitionMinimumTime com.android.inputmethod.latin:gestureRecognitionMinimumTime}</code></td><td>Parameters for gesture recognition (msec) and (keyWidth%/sec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureRecognitionSpeedThreshold com.android.inputmethod.latin:gestureRecognitionSpeedThreshold}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureRecognitionUpdateTime com.android.inputmethod.latin:gestureRecognitionUpdateTime}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureSamplingMinimumDistance com.android.inputmethod.latin:gestureSamplingMinimumDistance}</code></td><td>Parameter for gesture sampling (keyWidth%/sec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureStaticTimeThresholdAfterFastTyping com.android.inputmethod.latin:gestureStaticTimeThresholdAfterFastTyping}</code></td><td>Static threshold for gesture after fast typing (msec)</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailBodyRatio com.android.inputmethod.latin:gestureTrailBodyRatio}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailColor com.android.inputmethod.latin:gestureTrailColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailEndWidth com.android.inputmethod.latin:gestureTrailEndWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailFadeoutDuration com.android.inputmethod.latin:gestureTrailFadeoutDuration}</code></td><td>Duration while gesture trail is fading out in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailFadeoutStartDelay com.android.inputmethod.latin:gestureTrailFadeoutStartDelay}</code></td><td>Delay after gesture trail starts fading out in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailMaxInterpolationAngularThreshold com.android.inputmethod.latin:gestureTrailMaxInterpolationAngularThreshold}</code></td><td>Maximum angular threshold between gesture trail interpolation segments in degree.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailMaxInterpolationDistanceThreshold com.android.inputmethod.latin:gestureTrailMaxInterpolationDistanceThreshold}</code></td><td>Maximum distance threshold between gesture trail interpolation segments.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailMaxInterpolationSegments com.android.inputmethod.latin:gestureTrailMaxInterpolationSegments}</code></td><td>Maximum number of gesture trail interpolation segments.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailMinSamplingDistance com.android.inputmethod.latin:gestureTrailMinSamplingDistance}</code></td><td>Minimum distance between gesture trail sampling points.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailShadowRatio com.android.inputmethod.latin:gestureTrailShadowRatio}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailStartWidth com.android.inputmethod.latin:gestureTrailStartWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_gestureTrailUpdateInterval com.android.inputmethod.latin:gestureTrailUpdateInterval}</code></td><td>Interval of updating gesture trail in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_ignoreAltCodeKeyTimeout com.android.inputmethod.latin:ignoreAltCodeKeyTimeout}</code></td><td>Ignore special key timeout while typing in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyHysteresisDistance com.android.inputmethod.latin:keyHysteresisDistance}</code></td><td>Key detection hysteresis distance.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyHysteresisDistanceForSlidingModifier com.android.inputmethod.latin:keyHysteresisDistanceForSlidingModifier}</code></td><td>Key detection hysteresis distance for shift/symbols sliding input.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewBackground com.android.inputmethod.latin:keyPreviewBackground}</code></td><td>Background resource for key press feedback.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewDismissAnimator com.android.inputmethod.latin:keyPreviewDismissAnimator}</code></td><td>Key preview dismiss animator</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewHeight com.android.inputmethod.latin:keyPreviewHeight}</code></td><td>Height of the key press feedback popup.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewLingerTimeout com.android.inputmethod.latin:keyPreviewLingerTimeout}</code></td><td>Delay after key releasing and key press feedback dismissing in millisecond</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewOffset com.android.inputmethod.latin:keyPreviewOffset}</code></td><td>Vertical offset of the key press feedback from the key.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyPreviewShowUpAnimator com.android.inputmethod.latin:keyPreviewShowUpAnimator}</code></td><td>Key preview show up animator</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyRepeatInterval com.android.inputmethod.latin:keyRepeatInterval}</code></td><td>Key repeat interval in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keyRepeatStartTimeout com.android.inputmethod.latin:keyRepeatStartTimeout}</code></td><td>Key repeat start timeout</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_keySelectionByDraggingFinger com.android.inputmethod.latin:keySelectionByDraggingFinger}</code></td><td>Enable key selection by dragging finger</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarFadeoutAnimator com.android.inputmethod.latin:languageOnSpacebarFadeoutAnimator}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarFinalAlpha com.android.inputmethod.latin:languageOnSpacebarFinalAlpha}</code></td><td>Fadeout animator for spacebar language label.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarTextColor com.android.inputmethod.latin:languageOnSpacebarTextColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarTextRatio com.android.inputmethod.latin:languageOnSpacebarTextRatio}</code></td><td>Size of the text for spacebar language label, in the proportion of key height.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarTextShadowColor com.android.inputmethod.latin:languageOnSpacebarTextShadowColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_languageOnSpacebarTextShadowRadius com.android.inputmethod.latin:languageOnSpacebarTextShadowRadius}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_longPressShiftLockTimeout com.android.inputmethod.latin:longPressShiftLockTimeout}</code></td><td>Long press timeout of shift key to shift lock in millisecond.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_moreKeysKeyboardForActionLayout com.android.inputmethod.latin:moreKeysKeyboardForActionLayout}</code></td><td>Layout resource for more keys keyboard of action key</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_moreKeysKeyboardLayout com.android.inputmethod.latin:moreKeysKeyboardLayout}</code></td><td>Layout resource for more keys keyboard</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_showMoreKeysKeyboardAtTouchedPoint com.android.inputmethod.latin:showMoreKeysKeyboardAtTouchedPoint}</code></td><td>More keys keyboard will shown at touched point.</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_slidingKeyInputPreviewBodyRatio com.android.inputmethod.latin:slidingKeyInputPreviewBodyRatio}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_slidingKeyInputPreviewColor com.android.inputmethod.latin:slidingKeyInputPreviewColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_slidingKeyInputPreviewShadowRatio com.android.inputmethod.latin:slidingKeyInputPreviewShadowRatio}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_slidingKeyInputPreviewWidth com.android.inputmethod.latin:slidingKeyInputPreviewWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #MainKeyboardView_suppressKeyPreviewAfterBatchInputDuration com.android.inputmethod.latin:suppressKeyPreviewAfterBatchInputDuration}</code></td><td>Suppress showing key preview duration after batch input in millisecond</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_touchNoiseThresholdDistance com.android.inputmethod.latin:touchNoiseThresholdDistance}</code></td><td>Touch noise threshold distance in millimeter</td></tr>
     * <tr><td><code>{@link #MainKeyboardView_touchNoiseThresholdTime com.android.inputmethod.latin:touchNoiseThresholdTime}</code></td><td>Touch noise threshold time in millisecond</td></tr>
     * </table>
     * @see #MainKeyboardView_altCodeKeyWhileTypingFadeinAnimator
     * @see #MainKeyboardView_altCodeKeyWhileTypingFadeoutAnimator
     * @see #MainKeyboardView_backgroundDimAlpha
     * @see #MainKeyboardView_gestureDetectFastMoveSpeedThreshold
     * @see #MainKeyboardView_gestureDynamicDistanceThresholdFrom
     * @see #MainKeyboardView_gestureDynamicDistanceThresholdTo
     * @see #MainKeyboardView_gestureDynamicThresholdDecayDuration
     * @see #MainKeyboardView_gestureDynamicTimeThresholdFrom
     * @see #MainKeyboardView_gestureDynamicTimeThresholdTo
     * @see #MainKeyboardView_gestureFloatingPreviewColor
     * @see #MainKeyboardView_gestureFloatingPreviewHorizontalPadding
     * @see #MainKeyboardView_gestureFloatingPreviewRoundRadius
     * @see #MainKeyboardView_gestureFloatingPreviewTextColor
     * @see #MainKeyboardView_gestureFloatingPreviewTextLingerTimeout
     * @see #MainKeyboardView_gestureFloatingPreviewTextOffset
     * @see #MainKeyboardView_gestureFloatingPreviewTextSize
     * @see #MainKeyboardView_gestureFloatingPreviewVerticalPadding
     * @see #MainKeyboardView_gestureRecognitionMinimumTime
     * @see #MainKeyboardView_gestureRecognitionSpeedThreshold
     * @see #MainKeyboardView_gestureRecognitionUpdateTime
     * @see #MainKeyboardView_gestureSamplingMinimumDistance
     * @see #MainKeyboardView_gestureStaticTimeThresholdAfterFastTyping
     * @see #MainKeyboardView_gestureTrailBodyRatio
     * @see #MainKeyboardView_gestureTrailColor
     * @see #MainKeyboardView_gestureTrailEndWidth
     * @see #MainKeyboardView_gestureTrailFadeoutDuration
     * @see #MainKeyboardView_gestureTrailFadeoutStartDelay
     * @see #MainKeyboardView_gestureTrailMaxInterpolationAngularThreshold
     * @see #MainKeyboardView_gestureTrailMaxInterpolationDistanceThreshold
     * @see #MainKeyboardView_gestureTrailMaxInterpolationSegments
     * @see #MainKeyboardView_gestureTrailMinSamplingDistance
     * @see #MainKeyboardView_gestureTrailShadowRatio
     * @see #MainKeyboardView_gestureTrailStartWidth
     * @see #MainKeyboardView_gestureTrailUpdateInterval
     * @see #MainKeyboardView_ignoreAltCodeKeyTimeout
     * @see #MainKeyboardView_keyHysteresisDistance
     * @see #MainKeyboardView_keyHysteresisDistanceForSlidingModifier
     * @see #MainKeyboardView_keyPreviewBackground
     * @see #MainKeyboardView_keyPreviewDismissAnimator
     * @see #MainKeyboardView_keyPreviewHeight
     * @see #MainKeyboardView_keyPreviewLingerTimeout
     * @see #MainKeyboardView_keyPreviewOffset
     * @see #MainKeyboardView_keyPreviewShowUpAnimator
     * @see #MainKeyboardView_keyRepeatInterval
     * @see #MainKeyboardView_keyRepeatStartTimeout
     * @see #MainKeyboardView_keySelectionByDraggingFinger
     * @see #MainKeyboardView_languageOnSpacebarFadeoutAnimator
     * @see #MainKeyboardView_languageOnSpacebarFinalAlpha
     * @see #MainKeyboardView_languageOnSpacebarTextColor
     * @see #MainKeyboardView_languageOnSpacebarTextRatio
     * @see #MainKeyboardView_languageOnSpacebarTextShadowColor
     * @see #MainKeyboardView_languageOnSpacebarTextShadowRadius
     * @see #MainKeyboardView_longPressShiftLockTimeout
     * @see #MainKeyboardView_moreKeysKeyboardForActionLayout
     * @see #MainKeyboardView_moreKeysKeyboardLayout
     * @see #MainKeyboardView_showMoreKeysKeyboardAtTouchedPoint
     * @see #MainKeyboardView_slidingKeyInputPreviewBodyRatio
     * @see #MainKeyboardView_slidingKeyInputPreviewColor
     * @see #MainKeyboardView_slidingKeyInputPreviewShadowRatio
     * @see #MainKeyboardView_slidingKeyInputPreviewWidth
     * @see #MainKeyboardView_suppressKeyPreviewAfterBatchInputDuration
     * @see #MainKeyboardView_touchNoiseThresholdDistance
     * @see #MainKeyboardView_touchNoiseThresholdTime
     */
    public static final int[] MainKeyboardView={
        0x7f030004, 0x7f030005, 0x7f030006, 0x7f03001c, 
        0x7f03001d, 0x7f03001e, 0x7f03001f, 0x7f030020, 
        0x7f030021, 0x7f030022, 0x7f030023, 0x7f030024, 
        0x7f030025, 0x7f030026, 0x7f030027, 0x7f030028, 
        0x7f030029, 0x7f03002a, 0x7f03002b, 0x7f03002c, 
        0x7f03002d, 0x7f03002e, 0x7f03002f, 0x7f030030, 
        0x7f030031, 0x7f030032, 0x7f030033, 0x7f030034, 
        0x7f030035, 0x7f030036, 0x7f030037, 0x7f030038, 
        0x7f030039, 0x7f03003a, 0x7f030064, 0x7f030074, 
        0x7f030075, 0x7f03007e, 0x7f03007f, 0x7f030080, 
        0x7f030081, 0x7f030082, 0x7f030083, 0x7f030086, 
        0x7f030087, 0x7f030088, 0x7f0300a1, 0x7f0300a2, 
        0x7f0300a3, 0x7f0300a4, 0x7f0300a5, 0x7f0300a6, 
        0x7f0300a9, 0x7f0300b2, 0x7f0300b3, 0x7f0300bd, 
        0x7f0300be, 0x7f0300bf, 0x7f0300c0, 0x7f0300c1, 
        0x7f0300cf, 0x7f0300d2, 0x7f0300d3
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#altCodeKeyWhileTypingFadeinAnimator}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:altCodeKeyWhileTypingFadeinAnimator
     */
    public static final int MainKeyboardView_altCodeKeyWhileTypingFadeinAnimator=0;
    /**
     * <p>
     * @attr description
     * Fadeout and fadein animator for altCodeWhileTyping keys.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:altCodeKeyWhileTypingFadeoutAnimator
     */
    public static final int MainKeyboardView_altCodeKeyWhileTypingFadeoutAnimator=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#backgroundDimAlpha}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:backgroundDimAlpha
     */
    public static final int MainKeyboardView_backgroundDimAlpha=2;
    /**
     * <p>
     * @attr description
     * Static threshold for starting gesture detection (keyWidth%/sec)
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:gestureDetectFastMoveSpeedThreshold
     */
    public static final int MainKeyboardView_gestureDetectFastMoveSpeedThreshold=3;
    /**
     * <p>
     * @attr description
     * Distance based threshold values for gesture detection (keyWidth%/sec)
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:gestureDynamicDistanceThresholdFrom
     */
    public static final int MainKeyboardView_gestureDynamicDistanceThresholdFrom=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureDynamicDistanceThresholdTo}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:gestureDynamicDistanceThresholdTo
     */
    public static final int MainKeyboardView_gestureDynamicDistanceThresholdTo=5;
    /**
     * <p>
     * @attr description
     * Dynamic threshold for gesture after fast typing (msec)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureDynamicThresholdDecayDuration
     */
    public static final int MainKeyboardView_gestureDynamicThresholdDecayDuration=6;
    /**
     * <p>
     * @attr description
     * Time based threshold values for gesture detection (msec)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureDynamicTimeThresholdFrom
     */
    public static final int MainKeyboardView_gestureDynamicTimeThresholdFrom=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureDynamicTimeThresholdTo}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureDynamicTimeThresholdTo
     */
    public static final int MainKeyboardView_gestureDynamicTimeThresholdTo=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewColor
     */
    public static final int MainKeyboardView_gestureFloatingPreviewColor=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewHorizontalPadding}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewHorizontalPadding
     */
    public static final int MainKeyboardView_gestureFloatingPreviewHorizontalPadding=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewRoundRadius}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewRoundRadius
     */
    public static final int MainKeyboardView_gestureFloatingPreviewRoundRadius=11;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewTextColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewTextColor
     */
    public static final int MainKeyboardView_gestureFloatingPreviewTextColor=12;
    /**
     * <p>
     * @attr description
     * Delay after gesture input and gesture floating preview text dismissing in millisecond
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewTextLingerTimeout
     */
    public static final int MainKeyboardView_gestureFloatingPreviewTextLingerTimeout=13;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewTextOffset}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewTextOffset
     */
    public static final int MainKeyboardView_gestureFloatingPreviewTextOffset=14;
    /**
     * <p>
     * @attr description
     * Attributes for GestureFloatingPreviewText
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewTextSize
     */
    public static final int MainKeyboardView_gestureFloatingPreviewTextSize=15;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureFloatingPreviewVerticalPadding}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureFloatingPreviewVerticalPadding
     */
    public static final int MainKeyboardView_gestureFloatingPreviewVerticalPadding=16;
    /**
     * <p>
     * @attr description
     * Parameters for gesture recognition (msec) and (keyWidth%/sec)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureRecognitionMinimumTime
     */
    public static final int MainKeyboardView_gestureRecognitionMinimumTime=17;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureRecognitionSpeedThreshold}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:gestureRecognitionSpeedThreshold
     */
    public static final int MainKeyboardView_gestureRecognitionSpeedThreshold=18;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureRecognitionUpdateTime}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureRecognitionUpdateTime
     */
    public static final int MainKeyboardView_gestureRecognitionUpdateTime=19;
    /**
     * <p>
     * @attr description
     * Parameter for gesture sampling (keyWidth%/sec)
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:gestureSamplingMinimumDistance
     */
    public static final int MainKeyboardView_gestureSamplingMinimumDistance=20;
    /**
     * <p>
     * @attr description
     * Static threshold for gesture after fast typing (msec)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureStaticTimeThresholdAfterFastTyping
     */
    public static final int MainKeyboardView_gestureStaticTimeThresholdAfterFastTyping=21;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureTrailBodyRatio}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailBodyRatio
     */
    public static final int MainKeyboardView_gestureTrailBodyRatio=22;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureTrailColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailColor
     */
    public static final int MainKeyboardView_gestureTrailColor=23;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureTrailEndWidth}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureTrailEndWidth
     */
    public static final int MainKeyboardView_gestureTrailEndWidth=24;
    /**
     * <p>
     * @attr description
     * Duration while gesture trail is fading out in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailFadeoutDuration
     */
    public static final int MainKeyboardView_gestureTrailFadeoutDuration=25;
    /**
     * <p>
     * @attr description
     * Delay after gesture trail starts fading out in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailFadeoutStartDelay
     */
    public static final int MainKeyboardView_gestureTrailFadeoutStartDelay=26;
    /**
     * <p>
     * @attr description
     * Maximum angular threshold between gesture trail interpolation segments in degree.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailMaxInterpolationAngularThreshold
     */
    public static final int MainKeyboardView_gestureTrailMaxInterpolationAngularThreshold=27;
    /**
     * <p>
     * @attr description
     * Maximum distance threshold between gesture trail interpolation segments.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureTrailMaxInterpolationDistanceThreshold
     */
    public static final int MainKeyboardView_gestureTrailMaxInterpolationDistanceThreshold=28;
    /**
     * <p>
     * @attr description
     * Maximum number of gesture trail interpolation segments.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailMaxInterpolationSegments
     */
    public static final int MainKeyboardView_gestureTrailMaxInterpolationSegments=29;
    /**
     * <p>
     * @attr description
     * Minimum distance between gesture trail sampling points.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureTrailMinSamplingDistance
     */
    public static final int MainKeyboardView_gestureTrailMinSamplingDistance=30;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureTrailShadowRatio}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailShadowRatio
     */
    public static final int MainKeyboardView_gestureTrailShadowRatio=31;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#gestureTrailStartWidth}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:gestureTrailStartWidth
     */
    public static final int MainKeyboardView_gestureTrailStartWidth=32;
    /**
     * <p>
     * @attr description
     * Interval of updating gesture trail in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:gestureTrailUpdateInterval
     */
    public static final int MainKeyboardView_gestureTrailUpdateInterval=33;
    /**
     * <p>
     * @attr description
     * Ignore special key timeout while typing in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:ignoreAltCodeKeyTimeout
     */
    public static final int MainKeyboardView_ignoreAltCodeKeyTimeout=34;
    /**
     * <p>
     * @attr description
     * Key detection hysteresis distance.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyHysteresisDistance
     */
    public static final int MainKeyboardView_keyHysteresisDistance=35;
    /**
     * <p>
     * @attr description
     * Key detection hysteresis distance for shift/symbols sliding input.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyHysteresisDistanceForSlidingModifier
     */
    public static final int MainKeyboardView_keyHysteresisDistanceForSlidingModifier=36;
    /**
     * <p>
     * @attr description
     * Background resource for key press feedback.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyPreviewBackground
     */
    public static final int MainKeyboardView_keyPreviewBackground=37;
    /**
     * <p>
     * @attr description
     * Key preview dismiss animator
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyPreviewDismissAnimator
     */
    public static final int MainKeyboardView_keyPreviewDismissAnimator=38;
    /**
     * <p>
     * @attr description
     * Height of the key press feedback popup.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyPreviewHeight
     */
    public static final int MainKeyboardView_keyPreviewHeight=39;
    /**
     * <p>
     * @attr description
     * Delay after key releasing and key press feedback dismissing in millisecond
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:keyPreviewLingerTimeout
     */
    public static final int MainKeyboardView_keyPreviewLingerTimeout=40;
    /**
     * <p>
     * @attr description
     * Vertical offset of the key press feedback from the key.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:keyPreviewOffset
     */
    public static final int MainKeyboardView_keyPreviewOffset=41;
    /**
     * <p>
     * @attr description
     * Key preview show up animator
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:keyPreviewShowUpAnimator
     */
    public static final int MainKeyboardView_keyPreviewShowUpAnimator=42;
    /**
     * <p>
     * @attr description
     * Key repeat interval in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:keyRepeatInterval
     */
    public static final int MainKeyboardView_keyRepeatInterval=43;
    /**
     * <p>
     * @attr description
     * Key repeat start timeout
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:keyRepeatStartTimeout
     */
    public static final int MainKeyboardView_keyRepeatStartTimeout=44;
    /**
     * <p>
     * @attr description
     * Enable key selection by dragging finger
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:keySelectionByDraggingFinger
     */
    public static final int MainKeyboardView_keySelectionByDraggingFinger=45;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageOnSpacebarFadeoutAnimator}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarFadeoutAnimator
     */
    public static final int MainKeyboardView_languageOnSpacebarFadeoutAnimator=46;
    /**
     * <p>
     * @attr description
     * Fadeout animator for spacebar language label.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarFinalAlpha
     */
    public static final int MainKeyboardView_languageOnSpacebarFinalAlpha=47;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageOnSpacebarTextColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarTextColor
     */
    public static final int MainKeyboardView_languageOnSpacebarTextColor=48;
    /**
     * <p>
     * @attr description
     * Size of the text for spacebar language label, in the proportion of key height.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarTextRatio
     */
    public static final int MainKeyboardView_languageOnSpacebarTextRatio=49;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageOnSpacebarTextShadowColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarTextShadowColor
     */
    public static final int MainKeyboardView_languageOnSpacebarTextShadowColor=50;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageOnSpacebarTextShadowRadius}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.inputmethod.latin:languageOnSpacebarTextShadowRadius
     */
    public static final int MainKeyboardView_languageOnSpacebarTextShadowRadius=51;
    /**
     * <p>
     * @attr description
     * Long press timeout of shift key to shift lock in millisecond.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:longPressShiftLockTimeout
     */
    public static final int MainKeyboardView_longPressShiftLockTimeout=52;
    /**
     * <p>
     * @attr description
     * Layout resource for more keys keyboard of action key
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysKeyboardForActionLayout
     */
    public static final int MainKeyboardView_moreKeysKeyboardForActionLayout=53;
    /**
     * <p>
     * @attr description
     * Layout resource for more keys keyboard
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:moreKeysKeyboardLayout
     */
    public static final int MainKeyboardView_moreKeysKeyboardLayout=54;
    /**
     * <p>
     * @attr description
     * More keys keyboard will shown at touched point.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.inputmethod.latin:showMoreKeysKeyboardAtTouchedPoint
     */
    public static final int MainKeyboardView_showMoreKeysKeyboardAtTouchedPoint=55;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#slidingKeyInputPreviewBodyRatio}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:slidingKeyInputPreviewBodyRatio
     */
    public static final int MainKeyboardView_slidingKeyInputPreviewBodyRatio=56;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#slidingKeyInputPreviewColor}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:slidingKeyInputPreviewColor
     */
    public static final int MainKeyboardView_slidingKeyInputPreviewColor=57;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#slidingKeyInputPreviewShadowRatio}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:slidingKeyInputPreviewShadowRatio
     */
    public static final int MainKeyboardView_slidingKeyInputPreviewShadowRatio=58;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#slidingKeyInputPreviewWidth}
     * attribute's value can be found in the {@link #MainKeyboardView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:slidingKeyInputPreviewWidth
     */
    public static final int MainKeyboardView_slidingKeyInputPreviewWidth=59;
    /**
     * <p>
     * @attr description
     * Suppress showing key preview duration after batch input in millisecond
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:suppressKeyPreviewAfterBatchInputDuration
     */
    public static final int MainKeyboardView_suppressKeyPreviewAfterBatchInputDuration=60;
    /**
     * <p>
     * @attr description
     * Touch noise threshold distance in millimeter
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.inputmethod.latin:touchNoiseThresholdDistance
     */
    public static final int MainKeyboardView_touchNoiseThresholdDistance=61;
    /**
     * <p>
     * @attr description
     * Touch noise threshold time in millisecond
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:touchNoiseThresholdTime
     */
    public static final int MainKeyboardView_touchNoiseThresholdTime=62;
    /**
     * Attributes that can be used with a MoreKeysKeyboardView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MoreKeysKeyboardView_divider com.android.inputmethod.latin:divider}</code></td><td></td></tr>
     * </table>
     * @see #MoreKeysKeyboardView_divider
     */
    public static final int[] MoreKeysKeyboardView={
        0x7f030015
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#divider}
     * attribute's value can be found in the {@link #MoreKeysKeyboardView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.inputmethod.latin:divider
     */
    public static final int MoreKeysKeyboardView_divider=0;
    /**
     * Attributes that can be used with a SeekBarDialogPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SeekBarDialogPreference_maxValue com.android.inputmethod.latin:maxValue}</code></td><td></td></tr>
     * <tr><td><code>{@link #SeekBarDialogPreference_minValue com.android.inputmethod.latin:minValue}</code></td><td></td></tr>
     * <tr><td><code>{@link #SeekBarDialogPreference_stepValue com.android.inputmethod.latin:stepValue}</code></td><td></td></tr>
     * </table>
     * @see #SeekBarDialogPreference_maxValue
     * @see #SeekBarDialogPreference_minValue
     * @see #SeekBarDialogPreference_stepValue
     */
    public static final int[] SeekBarDialogPreference={
        0x7f0300ad, 0x7f0300af, 0x7f0300c7
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#maxValue}
     * attribute's value can be found in the {@link #SeekBarDialogPreference} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:maxValue
     */
    public static final int SeekBarDialogPreference_maxValue=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#minValue}
     * attribute's value can be found in the {@link #SeekBarDialogPreference} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:minValue
     */
    public static final int SeekBarDialogPreference_minValue=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#stepValue}
     * attribute's value can be found in the {@link #SeekBarDialogPreference} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:stepValue
     */
    public static final int SeekBarDialogPreference_stepValue=2;
    /**
     * Attributes that can be used with a SuggestionStripView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SuggestionStripView_alphaObsoleted com.android.inputmethod.latin:alphaObsoleted}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_centerSuggestionPercentile com.android.inputmethod.latin:centerSuggestionPercentile}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_colorAutoCorrect com.android.inputmethod.latin:colorAutoCorrect}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_colorSuggested com.android.inputmethod.latin:colorSuggested}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_colorTypedWord com.android.inputmethod.latin:colorTypedWord}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_colorValidTypedWord com.android.inputmethod.latin:colorValidTypedWord}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_maxMoreSuggestionsRow com.android.inputmethod.latin:maxMoreSuggestionsRow}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_minMoreSuggestionsWidth com.android.inputmethod.latin:minMoreSuggestionsWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_suggestionStripOptions com.android.inputmethod.latin:suggestionStripOptions}</code></td><td></td></tr>
     * <tr><td><code>{@link #SuggestionStripView_suggestionsCountInStrip com.android.inputmethod.latin:suggestionsCountInStrip}</code></td><td></td></tr>
     * </table>
     * @see #SuggestionStripView_alphaObsoleted
     * @see #SuggestionStripView_centerSuggestionPercentile
     * @see #SuggestionStripView_colorAutoCorrect
     * @see #SuggestionStripView_colorSuggested
     * @see #SuggestionStripView_colorTypedWord
     * @see #SuggestionStripView_colorValidTypedWord
     * @see #SuggestionStripView_maxMoreSuggestionsRow
     * @see #SuggestionStripView_minMoreSuggestionsWidth
     * @see #SuggestionStripView_suggestionStripOptions
     * @see #SuggestionStripView_suggestionsCountInStrip
     */
    public static final int[] SuggestionStripView={
        0x7f030002, 0x7f03000d, 0x7f030010, 0x7f030011, 
        0x7f030012, 0x7f030013, 0x7f0300ac, 0x7f0300ae, 
        0x7f0300c9, 0x7f0300cc
      };
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#alphaObsoleted}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:alphaObsoleted
     */
    public static final int SuggestionStripView_alphaObsoleted=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#centerSuggestionPercentile}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name com.android.inputmethod.latin:centerSuggestionPercentile
     */
    public static final int SuggestionStripView_centerSuggestionPercentile=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorAutoCorrect}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:colorAutoCorrect
     */
    public static final int SuggestionStripView_colorAutoCorrect=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorSuggested}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:colorSuggested
     */
    public static final int SuggestionStripView_colorSuggested=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorTypedWord}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:colorTypedWord
     */
    public static final int SuggestionStripView_colorTypedWord=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorValidTypedWord}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.inputmethod.latin:colorValidTypedWord
     */
    public static final int SuggestionStripView_colorValidTypedWord=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#maxMoreSuggestionsRow}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:maxMoreSuggestionsRow
     */
    public static final int SuggestionStripView_maxMoreSuggestionsRow=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#minMoreSuggestionsWidth}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.inputmethod.latin:minMoreSuggestionsWidth
     */
    public static final int SuggestionStripView_minMoreSuggestionsWidth=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionStripOptions}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>autoCorrectBold</td><td>1</td><td>This should be aligned with
     * {@link com.android.inputmethod.latin.suggestions.SuggestionStripLayoutHelper.AUTO_CORRECT_BOLD} etc.</td></tr>
     * <tr><td>autoCorrectUnderline</td><td>2</td><td></td></tr>
     * <tr><td>validTypedWordBold</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.inputmethod.latin:suggestionStripOptions
     */
    public static final int SuggestionStripView_suggestionStripOptions=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionsCountInStrip}
     * attribute's value can be found in the {@link #SuggestionStripView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.inputmethod.latin:suggestionsCountInStrip
     */
    public static final int SuggestionStripView_suggestionsCountInStrip=9;
  }
  public static final class xml {
    public static final int additional_subtype_settings=0x7f110000;
    public static final int dictionary_settings=0x7f110001;
    public static final int kbd_arabic=0x7f110002;
    public static final int kbd_armenian_phonetic=0x7f110003;
    public static final int kbd_azerty=0x7f110004;
    public static final int kbd_bengali=0x7f110005;
    public static final int kbd_bengali_akkhor=0x7f110006;
    public static final int kbd_bulgarian=0x7f110007;
    public static final int kbd_bulgarian_bds=0x7f110008;
    public static final int kbd_colemak=0x7f110009;
    public static final int kbd_dvorak=0x7f11000a;
    public static final int kbd_east_slavic=0x7f11000b;
    public static final int kbd_emoji_category1=0x7f11000c;
    public static final int kbd_emoji_category10=0x7f11000d;
    public static final int kbd_emoji_category11=0x7f11000e;
    public static final int kbd_emoji_category12=0x7f11000f;
    public static final int kbd_emoji_category13=0x7f110010;
    public static final int kbd_emoji_category14=0x7f110011;
    public static final int kbd_emoji_category15=0x7f110012;
    public static final int kbd_emoji_category16=0x7f110013;
    public static final int kbd_emoji_category2=0x7f110014;
    public static final int kbd_emoji_category3=0x7f110015;
    public static final int kbd_emoji_category4=0x7f110016;
    public static final int kbd_emoji_category5=0x7f110017;
    public static final int kbd_emoji_category6=0x7f110018;
    public static final int kbd_emoji_category7=0x7f110019;
    public static final int kbd_emoji_category8=0x7f11001a;
    public static final int kbd_emoji_category9=0x7f11001b;
    public static final int kbd_emoji_recents=0x7f11001c;
    public static final int kbd_farsi=0x7f11001d;
    public static final int kbd_georgian=0x7f11001e;
    public static final int kbd_greek=0x7f11001f;
    public static final int kbd_hebrew=0x7f110020;
    public static final int kbd_hindi=0x7f110021;
    public static final int kbd_hindi_compact=0x7f110022;
    public static final int kbd_kannada=0x7f110023;
    public static final int kbd_khmer=0x7f110024;
    public static final int kbd_lao=0x7f110025;
    public static final int kbd_malayalam=0x7f110026;
    public static final int kbd_marathi=0x7f110027;
    public static final int kbd_mongolian=0x7f110028;
    public static final int kbd_more_keys_keyboard_template=0x7f110029;
    public static final int kbd_nepali_romanized=0x7f11002a;
    public static final int kbd_nepali_traditional=0x7f11002b;
    public static final int kbd_nordic=0x7f11002c;
    public static final int kbd_number=0x7f11002d;
    public static final int kbd_pcqwerty=0x7f11002e;
    public static final int kbd_phone=0x7f11002f;
    public static final int kbd_phone_symbols=0x7f110030;
    public static final int kbd_qwerty=0x7f110031;
    public static final int kbd_qwertz=0x7f110032;
    public static final int kbd_serbian_qwertz=0x7f110033;
    public static final int kbd_sinhala=0x7f110034;
    public static final int kbd_south_slavic=0x7f110035;
    public static final int kbd_spanish=0x7f110036;
    public static final int kbd_suggestions_pane_template=0x7f110037;
    public static final int kbd_swiss=0x7f110038;
    public static final int kbd_symbols=0x7f110039;
    public static final int kbd_symbols_shift=0x7f11003a;
    public static final int kbd_tamil=0x7f11003b;
    public static final int kbd_telugu=0x7f11003c;
    public static final int kbd_thai=0x7f11003d;
    public static final int kbd_uzbek=0x7f11003e;
    public static final int key_armenian_sha=0x7f11003f;
    public static final int key_armenian_xeh=0x7f110040;
    public static final int key_comma=0x7f110041;
    public static final int key_emoji=0x7f110042;
    public static final int key_period=0x7f110043;
    public static final int key_settings=0x7f110044;
    public static final int key_space_3kw=0x7f110045;
    public static final int key_space_5kw=0x7f110046;
    public static final int key_space_7kw=0x7f110047;
    public static final int key_space_symbols=0x7f110048;
    public static final int key_styles_actions=0x7f110049;
    public static final int key_styles_common=0x7f11004a;
    public static final int key_styles_currency=0x7f11004b;
    public static final int key_styles_currency_dollar=0x7f11004c;
    public static final int key_styles_currency_euro=0x7f11004d;
    public static final int key_styles_currency_generic=0x7f11004e;
    public static final int key_styles_enter=0x7f11004f;
    public static final int key_styles_less_greater=0x7f110050;
    public static final int key_styles_navigate_more_keys=0x7f110051;
    public static final int key_styles_number=0x7f110052;
    public static final int key_styles_settings=0x7f110053;
    public static final int key_thai_kho_khuat=0x7f110054;
    public static final int keyboard_layout_set_arabic=0x7f110055;
    public static final int keyboard_layout_set_armenian_phonetic=0x7f110056;
    public static final int keyboard_layout_set_azerty=0x7f110057;
    public static final int keyboard_layout_set_bengali=0x7f110058;
    public static final int keyboard_layout_set_bengali_akkhor=0x7f110059;
    public static final int keyboard_layout_set_bulgarian=0x7f11005a;
    public static final int keyboard_layout_set_bulgarian_bds=0x7f11005b;
    public static final int keyboard_layout_set_colemak=0x7f11005c;
    public static final int keyboard_layout_set_dvorak=0x7f11005d;
    public static final int keyboard_layout_set_east_slavic=0x7f11005e;
    public static final int keyboard_layout_set_emoji=0x7f11005f;
    public static final int keyboard_layout_set_farsi=0x7f110060;
    public static final int keyboard_layout_set_georgian=0x7f110061;
    public static final int keyboard_layout_set_greek=0x7f110062;
    public static final int keyboard_layout_set_hebrew=0x7f110063;
    public static final int keyboard_layout_set_hindi=0x7f110064;
    public static final int keyboard_layout_set_hindi_compact=0x7f110065;
    public static final int keyboard_layout_set_kannada=0x7f110066;
    public static final int keyboard_layout_set_khmer=0x7f110067;
    public static final int keyboard_layout_set_lao=0x7f110068;
    public static final int keyboard_layout_set_malayalam=0x7f110069;
    public static final int keyboard_layout_set_marathi=0x7f11006a;
    public static final int keyboard_layout_set_mongolian=0x7f11006b;
    public static final int keyboard_layout_set_nepali_romanized=0x7f11006c;
    public static final int keyboard_layout_set_nepali_traditional=0x7f11006d;
    public static final int keyboard_layout_set_nordic=0x7f11006e;
    public static final int keyboard_layout_set_pcqwerty=0x7f11006f;
    public static final int keyboard_layout_set_qwerty=0x7f110070;
    public static final int keyboard_layout_set_qwertz=0x7f110071;
    public static final int keyboard_layout_set_serbian_qwertz=0x7f110072;
    public static final int keyboard_layout_set_sinhala=0x7f110073;
    public static final int keyboard_layout_set_south_slavic=0x7f110074;
    public static final int keyboard_layout_set_spanish=0x7f110075;
    public static final int keyboard_layout_set_swiss=0x7f110076;
    public static final int keyboard_layout_set_tamil=0x7f110077;
    public static final int keyboard_layout_set_telugu=0x7f110078;
    public static final int keyboard_layout_set_thai=0x7f110079;
    public static final int keyboard_layout_set_uzbek=0x7f11007a;
    public static final int keys_arabic3_left=0x7f11007b;
    public static final int keys_curly_brackets=0x7f11007c;
    public static final int keys_dvorak_123=0x7f11007d;
    public static final int keys_exclamation_question=0x7f11007e;
    public static final int keys_farsi3_right=0x7f11007f;
    public static final int keys_parentheses=0x7f110080;
    public static final int keys_pcqwerty2_right3=0x7f110081;
    public static final int keys_pcqwerty3_right2=0x7f110082;
    public static final int keys_pcqwerty4_right3=0x7f110083;
    public static final int keys_square_brackets=0x7f110084;
    public static final int keystyle_devanagari_sign_anusvara=0x7f110085;
    public static final int keystyle_devanagari_sign_candrabindu=0x7f110086;
    public static final int keystyle_devanagari_sign_nukta=0x7f110087;
    public static final int keystyle_devanagari_sign_virama=0x7f110088;
    public static final int keystyle_devanagari_sign_visarga=0x7f110089;
    public static final int keystyle_devanagari_vowel_sign_aa=0x7f11008a;
    public static final int keystyle_devanagari_vowel_sign_ai=0x7f11008b;
    public static final int keystyle_devanagari_vowel_sign_au=0x7f11008c;
    public static final int keystyle_devanagari_vowel_sign_candra_e=0x7f11008d;
    public static final int keystyle_devanagari_vowel_sign_candra_o=0x7f11008e;
    public static final int keystyle_devanagari_vowel_sign_e=0x7f11008f;
    public static final int keystyle_devanagari_vowel_sign_i=0x7f110090;
    public static final int keystyle_devanagari_vowel_sign_ii=0x7f110091;
    public static final int keystyle_devanagari_vowel_sign_o=0x7f110092;
    public static final int keystyle_devanagari_vowel_sign_u=0x7f110093;
    public static final int keystyle_devanagari_vowel_sign_uu=0x7f110094;
    public static final int keystyle_devanagari_vowel_sign_vocalic_r=0x7f110095;
    public static final int method=0x7f110096;
    public static final int prefs=0x7f110097;
    public static final int prefs_screen_accounts=0x7f110098;
    public static final int prefs_screen_advanced=0x7f110099;
    public static final int prefs_screen_appearance=0x7f11009a;
    public static final int prefs_screen_correction=0x7f11009b;
    public static final int prefs_screen_debug=0x7f11009c;
    public static final int prefs_screen_gesture=0x7f11009d;
    public static final int prefs_screen_preferences=0x7f11009e;
    public static final int prefs_screen_theme=0x7f11009f;
    public static final int row_pcqwerty5=0x7f1100a0;
    public static final int row_qwerty4=0x7f1100a1;
    public static final int row_symbols4=0x7f1100a2;
    public static final int row_symbols_shift4=0x7f1100a3;
    public static final int rowkeys_arabic1=0x7f1100a4;
    public static final int rowkeys_arabic2=0x7f1100a5;
    public static final int rowkeys_arabic3=0x7f1100a6;
    public static final int rowkeys_armenian_phonetic1=0x7f1100a7;
    public static final int rowkeys_armenian_phonetic2=0x7f1100a8;
    public static final int rowkeys_armenian_phonetic3=0x7f1100a9;
    public static final int rowkeys_armenian_phonetic4=0x7f1100aa;
    public static final int rowkeys_azerty1=0x7f1100ab;
    public static final int rowkeys_azerty2=0x7f1100ac;
    public static final int rowkeys_azerty3=0x7f1100ad;
    public static final int rowkeys_bengali1=0x7f1100ae;
    public static final int rowkeys_bengali2=0x7f1100af;
    public static final int rowkeys_bengali3=0x7f1100b0;
    public static final int rowkeys_bengali_akkhor1=0x7f1100b1;
    public static final int rowkeys_bengali_akkhor2=0x7f1100b2;
    public static final int rowkeys_bengali_akkhor3=0x7f1100b3;
    public static final int rowkeys_bulgarian1=0x7f1100b4;
    public static final int rowkeys_bulgarian2=0x7f1100b5;
    public static final int rowkeys_bulgarian3=0x7f1100b6;
    public static final int rowkeys_bulgarian_bds1=0x7f1100b7;
    public static final int rowkeys_bulgarian_bds2=0x7f1100b8;
    public static final int rowkeys_bulgarian_bds3=0x7f1100b9;
    public static final int rowkeys_colemak1=0x7f1100ba;
    public static final int rowkeys_colemak2=0x7f1100bb;
    public static final int rowkeys_colemak3=0x7f1100bc;
    public static final int rowkeys_dvorak1=0x7f1100bd;
    public static final int rowkeys_dvorak2=0x7f1100be;
    public static final int rowkeys_dvorak3=0x7f1100bf;
    public static final int rowkeys_east_slavic1=0x7f1100c0;
    public static final int rowkeys_east_slavic2=0x7f1100c1;
    public static final int rowkeys_east_slavic3=0x7f1100c2;
    public static final int rowkeys_farsi1=0x7f1100c3;
    public static final int rowkeys_farsi2=0x7f1100c4;
    public static final int rowkeys_farsi3=0x7f1100c5;
    public static final int rowkeys_georgian1=0x7f1100c6;
    public static final int rowkeys_georgian2=0x7f1100c7;
    public static final int rowkeys_georgian3=0x7f1100c8;
    public static final int rowkeys_greek1=0x7f1100c9;
    public static final int rowkeys_greek2=0x7f1100ca;
    public static final int rowkeys_greek3=0x7f1100cb;
    public static final int rowkeys_hebrew1=0x7f1100cc;
    public static final int rowkeys_hebrew2=0x7f1100cd;
    public static final int rowkeys_hebrew3=0x7f1100ce;
    public static final int rowkeys_hindi1=0x7f1100cf;
    public static final int rowkeys_hindi2=0x7f1100d0;
    public static final int rowkeys_hindi3=0x7f1100d1;
    public static final int rowkeys_hindi_compact1=0x7f1100d2;
    public static final int rowkeys_hindi_compact2=0x7f1100d3;
    public static final int rowkeys_hindi_compact3=0x7f1100d4;
    public static final int rowkeys_kannada1=0x7f1100d5;
    public static final int rowkeys_kannada2=0x7f1100d6;
    public static final int rowkeys_kannada3=0x7f1100d7;
    public static final int rowkeys_khmer1=0x7f1100d8;
    public static final int rowkeys_khmer2=0x7f1100d9;
    public static final int rowkeys_khmer3=0x7f1100da;
    public static final int rowkeys_khmer4=0x7f1100db;
    public static final int rowkeys_lao1=0x7f1100dc;
    public static final int rowkeys_lao2=0x7f1100dd;
    public static final int rowkeys_lao3=0x7f1100de;
    public static final int rowkeys_lao4=0x7f1100df;
    public static final int rowkeys_malayalam1=0x7f1100e0;
    public static final int rowkeys_malayalam2=0x7f1100e1;
    public static final int rowkeys_malayalam3=0x7f1100e2;
    public static final int rowkeys_marathi1=0x7f1100e3;
    public static final int rowkeys_marathi2=0x7f1100e4;
    public static final int rowkeys_marathi3=0x7f1100e5;
    public static final int rowkeys_mongolian1=0x7f1100e6;
    public static final int rowkeys_mongolian2=0x7f1100e7;
    public static final int rowkeys_mongolian3=0x7f1100e8;
    public static final int rowkeys_nepali_romanized1=0x7f1100e9;
    public static final int rowkeys_nepali_romanized2=0x7f1100ea;
    public static final int rowkeys_nepali_romanized3=0x7f1100eb;
    public static final int rowkeys_nepali_traditional1=0x7f1100ec;
    public static final int rowkeys_nepali_traditional2=0x7f1100ed;
    public static final int rowkeys_nepali_traditional3=0x7f1100ee;
    public static final int rowkeys_nordic1=0x7f1100ef;
    public static final int rowkeys_nordic2=0x7f1100f0;
    public static final int rowkeys_pcqwerty1=0x7f1100f1;
    public static final int rowkeys_pcqwerty1_shift=0x7f1100f2;
    public static final int rowkeys_pcqwerty2=0x7f1100f3;
    public static final int rowkeys_pcqwerty3=0x7f1100f4;
    public static final int rowkeys_pcqwerty4=0x7f1100f5;
    public static final int rowkeys_qwerty1=0x7f1100f6;
    public static final int rowkeys_qwerty1_left5=0x7f1100f7;
    public static final int rowkeys_qwerty1_right5=0x7f1100f8;
    public static final int rowkeys_qwerty2=0x7f1100f9;
    public static final int rowkeys_qwerty2_left5=0x7f1100fa;
    public static final int rowkeys_qwerty2_right4=0x7f1100fb;
    public static final int rowkeys_qwerty3=0x7f1100fc;
    public static final int rowkeys_qwerty3_left4=0x7f1100fd;
    public static final int rowkeys_qwerty3_right3=0x7f1100fe;
    public static final int rowkeys_qwertz1=0x7f1100ff;
    public static final int rowkeys_qwertz3=0x7f110100;
    public static final int rowkeys_serbian_qwertz1=0x7f110101;
    public static final int rowkeys_serbian_qwertz2=0x7f110102;
    public static final int rowkeys_serbian_qwertz3=0x7f110103;
    public static final int rowkeys_sinhala1=0x7f110104;
    public static final int rowkeys_sinhala2=0x7f110105;
    public static final int rowkeys_sinhala3=0x7f110106;
    public static final int rowkeys_south_slavic1=0x7f110107;
    public static final int rowkeys_south_slavic2=0x7f110108;
    public static final int rowkeys_south_slavic3=0x7f110109;
    public static final int rowkeys_spanish2=0x7f11010a;
    public static final int rowkeys_swiss1=0x7f11010b;
    public static final int rowkeys_swiss2=0x7f11010c;
    public static final int rowkeys_symbols1=0x7f11010d;
    public static final int rowkeys_symbols2=0x7f11010e;
    public static final int rowkeys_symbols3=0x7f11010f;
    public static final int rowkeys_symbols_shift1=0x7f110110;
    public static final int rowkeys_symbols_shift2=0x7f110111;
    public static final int rowkeys_symbols_shift3=0x7f110112;
    public static final int rowkeys_tamil1=0x7f110113;
    public static final int rowkeys_tamil2=0x7f110114;
    public static final int rowkeys_tamil3=0x7f110115;
    public static final int rowkeys_telugu1=0x7f110116;
    public static final int rowkeys_telugu2=0x7f110117;
    public static final int rowkeys_telugu3=0x7f110118;
    public static final int rowkeys_thai1=0x7f110119;
    public static final int rowkeys_thai2=0x7f11011a;
    public static final int rowkeys_thai3=0x7f11011b;
    public static final int rowkeys_thai4=0x7f11011c;
    public static final int rowkeys_uzbek1=0x7f11011d;
    public static final int rowkeys_uzbek2=0x7f11011e;
    public static final int rows_arabic=0x7f11011f;
    public static final int rows_armenian_phonetic=0x7f110120;
    public static final int rows_azerty=0x7f110121;
    public static final int rows_bengali=0x7f110122;
    public static final int rows_bengali_akkhor=0x7f110123;
    public static final int rows_bulgarian=0x7f110124;
    public static final int rows_bulgarian_bds=0x7f110125;
    public static final int rows_colemak=0x7f110126;
    public static final int rows_dvorak=0x7f110127;
    public static final int rows_east_slavic=0x7f110128;
    public static final int rows_farsi=0x7f110129;
    public static final int rows_georgian=0x7f11012a;
    public static final int rows_greek=0x7f11012b;
    public static final int rows_hebrew=0x7f11012c;
    public static final int rows_hindi=0x7f11012d;
    public static final int rows_hindi_compact=0x7f11012e;
    public static final int rows_kannada=0x7f11012f;
    public static final int rows_khmer=0x7f110130;
    public static final int rows_lao=0x7f110131;
    public static final int rows_malayalam=0x7f110132;
    public static final int rows_marathi=0x7f110133;
    public static final int rows_mongolian=0x7f110134;
    public static final int rows_nepali_romanized=0x7f110135;
    public static final int rows_nepali_traditional=0x7f110136;
    public static final int rows_nordic=0x7f110137;
    public static final int rows_number=0x7f110138;
    public static final int rows_number_normal=0x7f110139;
    public static final int rows_number_password=0x7f11013a;
    public static final int rows_pcqwerty=0x7f11013b;
    public static final int rows_phone=0x7f11013c;
    public static final int rows_phone_symbols=0x7f11013d;
    public static final int rows_qwerty=0x7f11013e;
    public static final int rows_qwertz=0x7f11013f;
    public static final int rows_serbian_qwertz=0x7f110140;
    public static final int rows_sinhala=0x7f110141;
    public static final int rows_south_slavic=0x7f110142;
    public static final int rows_spanish=0x7f110143;
    public static final int rows_swiss=0x7f110144;
    public static final int rows_symbols=0x7f110145;
    public static final int rows_symbols_shift=0x7f110146;
    public static final int rows_tamil=0x7f110147;
    public static final int rows_telugu=0x7f110148;
    public static final int rows_thai=0x7f110149;
    public static final int rows_uzbek=0x7f11014a;
    public static final int spell_checker_settings=0x7f11014b;
    public static final int spellchecker=0x7f11014c;
  }
}